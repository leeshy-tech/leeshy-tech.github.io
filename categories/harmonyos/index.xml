<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>HarmonyOS - 分类 - Leeshy&#39;s Blog | To be humble</title>
        <link>https://leeshy-tech.github.io/categories/harmonyos/</link>
        <description>HarmonyOS - 分类 - Leeshy&#39;s Blog | To be humble</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>saili@bupt.edu.cn (Leeshy)</managingEditor>
            <webMaster>saili@bupt.edu.cn (Leeshy)</webMaster><lastBuildDate>Fri, 28 Jan 2022 23:32:06 &#43;0800</lastBuildDate><atom:link href="https://leeshy-tech.github.io/categories/harmonyos/" rel="self" type="application/rss+xml" /><item>
    <title>鸿蒙开发实践——页面导航</title>
    <link>https://leeshy-tech.github.io/harmonyos_pagetopage/</link>
    <pubDate>Fri, 28 Jan 2022 23:32:06 &#43;0800</pubDate><author>saili@bupt.edu.cn (Leeshy)</author><guid>https://leeshy-tech.github.io/harmonyos_pagetopage/</guid>
    <description><![CDATA[<h1 id="页面导航">页面导航</h1>
<h2 id="项目简介">项目简介</h2>
<h3 id="项目结构">项目结构</h3>
<pre tabindex="0"><code>├─ entry.src.main
	├─ com.example.page_to_page
        ├─slice
            ├─ AnotherAbilitySlice
            ├─ MainAbilitySlice
            └─ SecondAbilitySlice
        ├─ AnotherAbility	
        ├─ MainAbility
        └─ MyApplication
	└─ resources.base.layout
        ├─ ability_another.xml
        ├─ ability_main.xml
        └─ ability_second.xml
</code></pre><h3 id="效果">效果</h3>
<p>点击按钮一，从MainAbilitySlice跳转到SecondAbilitySlice。</p>
<p>点击按钮二，从MainAbilitySlice跳转到SecondAbilitySlice，并传递参数字符串。</p>
<p>点击按钮三，从MainAbility的MainAbilitySlice跳转到AnotherAbility的AnotherAbilitySlice。</p>
<p></p>
<h2 id="intent">intent</h2>
<blockquote>
<p><a href="https://developer.harmonyos.com/cn/docs/documentation/doc-guides/ability-intent-0000000000038799" target="_blank" rel="noopener noreffer">HarmonyOS文档——intent</a></p>
</blockquote>
<p>intent是对象之间传递信息的载体，Slice之间的导航、传参以及Ability之间的导航都是基于intent。Intent的构成元素包括Operation与Parameters。Operation是执行的操作，Parameters则是携带的参数。</p>
<h2 id="slice间导航">Slice间导航</h2>
<p>核心代码：</p>
<p>MainAbilitySlice的onStart方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="n">Button</span> <span class="n">btn1</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">findComponentById</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Id_btn1</span><span class="o">);</span>
<span class="n">btn1</span><span class="o">.</span><span class="na">setClickedListener</span><span class="o">(</span><span class="n">listener</span><span class="o">-&gt;</span><span class="n">present</span><span class="o">(</span><span class="k">new</span> <span class="n">SecondAbilitySlice</span><span class="o">(),</span><span class="k">new</span> <span class="n">Intent</span><span class="o">()));</span>
</code></pre></div><ul>
<li>通过id获取按钮对象。</li>
<li>给按钮绑定事件监听器，执行present方法。</li>
<li>这里只是导航，没有其他操作，所以传递一个默认intent即可。</li>
</ul>
<h2 id="slice间传参">Slice间传参</h2>
<p>核心代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="n">Button</span> <span class="n">btn2</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">findComponentById</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Id_btn2</span><span class="o">);</span>
<span class="n">btn2</span><span class="o">.</span><span class="na">setClickedListener</span><span class="o">(</span><span class="n">listener</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="n">Intent</span> <span class="n">intent1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">();</span>
    <span class="n">intent1</span><span class="o">.</span><span class="na">setParam</span><span class="o">(</span><span class="s">&#34;my_string&#34;</span><span class="o">,</span><span class="s">&#34;从MainAbilitySlice传参&#34;</span><span class="o">);</span>
    <span class="k">this</span><span class="o">.</span><span class="na">present</span><span class="o">(</span><span class="k">new</span> <span class="n">SecondAbilitySlice</span><span class="o">(),</span><span class="n">intent1</span><span class="o">);</span>
<span class="o">});</span>
</code></pre></div><p>跟导航部分思路相同。</p>
<p>传参的关键是构造intent对象的Parameters属性，使用setParam方法存储键值对。setParam方法有很多重载，包括int，string等等，但是没有对象类型，也就是传参不能传对象。</p>
<h2 id="pageability间导航">PageAbility间导航</h2>
<p>核心代码：</p>
<p>MainAbilitySlice类的onStart方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="n">Button</span> <span class="n">btn3</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">findComponentById</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Id_btn3</span><span class="o">);</span>
<span class="n">btn3</span><span class="o">.</span><span class="na">setClickedListener</span><span class="o">(</span><span class="n">listener</span> <span class="o">-&gt;</span> <span class="n">navigateToAnotherPage</span><span class="o">(</span><span class="n">listener</span><span class="o">));</span>
</code></pre></div><p>设置监听器的逻辑相同，不过这次我们让监听器执行我们的自定义函数navigateToAnotherPage。</p>
<p>MainAbilitySlice类新增:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">navigateToAnotherPage</span><span class="o">(</span><span class="n">Component</span> <span class="n">component</span><span class="o">){</span>
        <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">();</span>
        <span class="n">Operation</span> <span class="n">operation</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">.</span><span class="na">OperationBuilder</span><span class="o">()</span>
                <span class="o">.</span><span class="na">withDeviceId</span><span class="o">(</span><span class="s">&#34;&#34;</span><span class="o">)</span>						<span class="c1">//空字符串为本机
</span><span class="c1"></span>                <span class="o">.</span><span class="na">withBundleName</span><span class="o">(</span><span class="s">&#34;com.example.page_to_page&#34;</span><span class="o">)</span><span class="c1">//本应用的标识
</span><span class="c1"></span>                <span class="o">.</span><span class="na">withAbilityName</span><span class="o">(</span><span class="s">&#34;com.example.page_to_page.AnotherAbility&#34;</span><span class="o">)</span><span class="c1">//想启动的Ability
</span><span class="c1"></span>                <span class="o">.</span><span class="na">build</span><span class="o">();</span>

        <span class="n">intent</span><span class="o">.</span><span class="na">setOperation</span><span class="o">(</span><span class="n">operation</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">startAbility</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre></div><ul>
<li>使用OperationBuilder构建一个Operation，设置给intent。</li>
<li>将intent传给监听器</li>
</ul>
<p>页面跳转的核心是intent对象的Operation属性，这里构建Operation有三个参数DeviceId、BundleName、AbilityName，因为鸿蒙可以启动任意设备的任意应用的任意Ability，可能这就是万物互联吧。</p>
<h2 id="结束语">结束语</h2>
<h3 id="项目源码">项目源码</h3>
<p><a href="https://github.com/leeshy-tech/HarmonyOS_example/tree/main/page_to_page" target="_blank" rel="noopener noreffer">https://github.com/leeshy-tech/HarmonyOS_example/tree/main/page_to_page</a></p>
<h3 id="参考文献">参考文献</h3>
<p><a href="https://www.bilibili.com/video/BV1DM4y1G7MN" target="_blank" rel="noopener noreffer">HarmonyOS 2.0应用开发实战教程丨锋迷商城项目</a></p>
<p><a href="https://developer.harmonyos.com/cn/docs/documentation/doc-guides/ability-intent-0000000000038799" target="_blank" rel="noopener noreffer">HarmonyOS文档——intent</a></p>
]]></description>
</item>
<item>
    <title>鸿蒙开发笔记——开发工具DevEco Studio</title>
    <link>https://leeshy-tech.github.io/harmonyos_studioconfig/</link>
    <pubDate>Fri, 28 Jan 2022 17:21:06 &#43;0800</pubDate><author>saili@bupt.edu.cn (Leeshy)</author><guid>https://leeshy-tech.github.io/harmonyos_studioconfig/</guid>
    <description><![CDATA[<h1 id="deveco-studio">DevEco Studio</h1>
<blockquote>
<p>HUAWEI DevEco Studio（获取工具请<a href="https://developer.harmonyos.com/cn/develop/deveco-studio" target="_blank" rel="noopener noreffer">点击链接下载</a>，以下简称DevEco Studio）是基于IntelliJ IDEA Community开源版本打造，面向华为终端全场景多设备的一站式集成开发环境（IDE），为开发者提供工程模板创建、开发、编译、调试、发布等E2E的HarmonyOS应用/服务开发</p>
</blockquote>
<h2 id="配置">配置</h2>
<p>DevEco是基于IDEA打造的，所以二者非常相似，有些配置不会的话可以直接google IDEA的相关配置。</p>
<h3 id="界面风格">界面风格</h3>
<blockquote>
<p>将界面风格改为暗黑模式</p>
</blockquote>
<ul>
<li>
<p>打开设置：file&gt;settings</p>
</li>
<li>
<p>Appearance &amp; Behavior &gt; Appearance</p>
</li>
<li>
<p>Theme：改为Darcula，点击OK。</p>
<p></p>
</li>
</ul>
<h3 id="字体">字体</h3>
<ul>
<li>
<p>打开设置：file&gt;settings</p>
</li>
<li>
<p>Editor &gt; Font</p>
</li>
<li>
<p>Font：字体风格，我个人比较喜欢Inconsolata ; Size：字号 ; Line height：行距</p>
</li>
</ul>
<p></p>
<h3 id="注释颜色">注释颜色</h3>
<blockquote>
<p>初始的注释颜色非常浅，还是灰色，所以想调成亮一点的绿色。</p>
</blockquote>
<ul>
<li>
<p>打开设置：file&gt;settings</p>
</li>
<li>
<p>Editor &gt; Color Scheme &gt; Language Default</p>
</li>
<li>
<p>点开Comments，其中Block comment是块注释，Line comment是行注释，尽量二者颜色统一吧，颜色栏是可以复制的。</p>
</li>
</ul>
<p></p>
<h3 id="输入联想大小写不敏感">输入联想——大小写不敏感</h3>
<blockquote>
<p>初始的输入联想是大小写敏感的，Str才能补全成String，设置大小写不敏感，使str也能补全成String。</p>
</blockquote>
<ul>
<li>打开设置：file&gt;settings</li>
<li>Editor &gt; General &gt; Code Completion</li>
<li>去掉右侧Match case的勾</li>
</ul>
<p></p>
<p>效果如下：</p>
<p></p>
<h3 id="自动引包优化">自动引包优化</h3>
<ul>
<li>
<p>打开设置：file&gt;settings</p>
</li>
<li>
<p>Editor &gt; General &gt; Auto import</p>
</li>
<li>
<p>在右侧勾上如图的两句话。</p>
<p></p>
</li>
</ul>
<h3 id="汉化">汉化</h3>
<blockquote>
<p>编辑器设中文其实意义不大，汉化部分很少，都是一些基础的单词，但是我看到中文有一种莫名的安心感，所以还是汉化了。</p>
</blockquote>
<ul>
<li>打开设置：file&gt;settings</li>
<li>Plugins</li>
<li>搜索chinese，在installed里找到Chinese (Simplified) ，点击enable。</li>
<li>注意你会在Marketplace里找到Chinese (Simplified) Language Pack，它是IDEA的插件，适配效果没有内置的好。</li>
</ul>
<p></p>
<h2 id="项目结构">项目结构</h2>
<h2 id="调试方法">调试方法</h2>
<p>鸿蒙项目有两种调试方式：previewer和在设备运行</p>
<h4 id="previewer">Previewer</h4>
<p>previewer本质上是个页面预览器，预览的页面是工作区前台的Page。位置在：</p>
<p></p>
<h4 id="在设备运行">在设备运行</h4>
<p>设备有很多种，本地模拟器、远程模拟器、远程真机等等（<a href="https://developer.harmonyos.com/cn/docs/documentation/doc-guides/run_simulator-0000001053303709" target="_blank" rel="noopener noreffer">细节可以看官方文档</a>），都是将整个项目完整的打包成应用在设备上运行。推荐使用远程模拟器，因为本地模拟器会占用相当大一部分的本机资源。在右上角打开设备管理器即可进行管理。</p>
<p></p>
<h3 id="选择调试方式">选择调试方式</h3>
<p>设备：不管是远程还是本地，使用上都会有一定的卡顿，并且项目具有默认显示页面，调试非默认页面时，需要保证跳转逻辑等等无误。</p>
<p>预览器：工作区打开什么文件就默认预览什么文件，不需要考虑其他页面或者Ability的逻辑，但是，预览器是高度阉割的，某些逻辑不能很好的在预览器运行，比如我昨天遇到一个报错`[ClassCastException: java.lang.Object cannot be cast to java.lang.String，在预览器中运行就会报这个错误无法启动预览器，但是在设备中运行就正常。所以要灵活选择调试方式。当然，不提供页面服务的Ability的肯定要在设备上测试。</p>
<h2 id="结束语">结束语</h2>
<h3 id="参考文献">参考文献</h3>
]]></description>
</item>
<item>
    <title>鸿蒙开发笔记——Ability</title>
    <link>https://leeshy-tech.github.io/harmonyos_ability_note/</link>
    <pubDate>Wed, 26 Jan 2022 20:30:06 &#43;0800</pubDate><author>saili@bupt.edu.cn (Leeshy)</author><guid>https://leeshy-tech.github.io/harmonyos_ability_note/</guid>
    <description><![CDATA[<h1 id="ability">Ability</h1>
<p>官方解释如下：</p>
<blockquote>
<p>Ability是应用所具备能力的抽象，也是应用程序的重要组成部分。一个应用可以具备多种能力（即可以包含多个Ability），HarmonyOS支持应用以Ability为单位进行部署。</p>
</blockquote>
<p>Ability相当于功能集合，把实现某个具体功能的逻辑归类到一起。分类如下：</p>
<pre tabindex="0"><code>└─ Ability                     
    ├─ FA   
        └─ Page Ability：页面，可以与用户交互。     
    └─ PA   
        ├─ Service Ability：后台任务。      
        └─ Data Ability：统一数据访问抽象。     
</code></pre><h2 id="注册ability">注册Ability</h2>
<p>要使用Ability必须要在config.json里进行配置，格式如下:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&#34;module&#34;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&#34;abilities&#34;</span><span class="p">:</span> <span class="p">[</span>
            <span class="p">{</span>
                <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;page&#34;</span>
            <span class="p">}</span>
        <span class="p">]</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>配置项：<a href="https://developer.harmonyos.com/cn/docs/documentation/doc-guides/basic-config-file-elements-0000000000034463#ZH-CN_TOPIC_0000001064016070__table593616515457" target="_blank" rel="noopener noreffer">abilities&ndash;应用配置文件</a></p>
<h2 id="page-ability">Page Ability</h2>
<blockquote>
<p>一个Page可以由一个或多个AbilitySlice构成，AbilitySlice是指应用的单个页面及其控制逻辑的总和。</p>
</blockquote>
<p>Page是Slice的集合，Slice = 页面 + 控制逻辑</p>
<h3 id="ability生存周期">Ability生存周期</h3>
<p>如图所示：  </p>
<ul>
<li>
<p>onStart()
当系统首次创建Page实例时触发。开发者必须重写该方法，并在此配置默认显示的Slice。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">onStart</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">super</span><span class="o">.</span><span class="na">onStart</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
    <span class="kd">super</span><span class="o">.</span><span class="na">setMainRoute</span><span class="o">(</span><span class="n">FooSlice</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></li>
<li>
<p>onActive()
Page进入ACTIVE状态时调用，Page保持在此状态除非：应用进入后台或导航到其他页面，从而进入INACTIVE状态。</p>
</li>
<li>
<p>onInactive()
Page进入INACTIVE状态时调用。</p>
</li>
<li>
<p>onBackground()
Page由前台进入后台时调用，其调用之前一定会调用onInactive()。</p>
</li>
<li>
<p>onForeground()
Page由后台进入前台时调用，其调用之后一定会调用onActive()。</p>
</li>
<li>
<p>onStop()
系统销毁Page时调用。</p>
</li>
</ul>
<h3 id="abilityslice生命周期">AbilitySlice生命周期</h3>
<blockquote>
<p>AbilitySlice和Page具有相同的生命周期状态和同名的回调，当Page生命周期发生变化时，它的AbilitySlice也会发生相同的生命周期变化。此外，AbilitySlice还具有独立于Page的生命周期变化，这发生在同一Page中的AbilitySlice之间导航时，此时Page的生命周期状态不会改变。</p>
</blockquote>
<p>开发者必须重写AbilitySlice的onStart()回调，并在此方法中通过setUIContent()方法设置页面，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java">    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onStart</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">onStart</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>

        <span class="n">setUIContent</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Layout_main_layout</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre></div><blockquote>
<p>setUIContext( )提供了两个重载：</p>
<p>setUIContext( int )：通过布局文件的ID，加载layout目录下的xml文件完成页面渲染。</p>
<p>setUIContext(  ComponentContainer )：加载使用Java创建的组件完成页面渲染。</p>
</blockquote>
<h3 id="slice间导航">Slice间导航</h3>
<p><a href="https://developer.harmonyos.com/cn/docs/documentation/doc-guides/ability-page-switching-0000000000037999" target="_blank" rel="noopener noreffer">https://developer.harmonyos.com/cn/docs/documentation/doc-guides/ability-page-switching-0000000000037999</a><br>
<a href="https://developer.huawei.com/consumer/cn/codelabsPortal/carddetails/Ability_Intent" target="_blank" rel="noopener noreffer">https://developer.huawei.com/consumer/cn/codelabsPortal/carddetails/Ability_Intent</a></p>
<h2 id="service-ability">Service Ability</h2>
<blockquote>
<p>基于Service模板的Ability主要用于后台运行任务（如执行音乐播放、文件下载等），但不提供用户交互界面。Service可由其他应用或Ability启动，即使用户切换到其他应用，Service仍将在后台继续运行。</p>
</blockquote>
<h2 id="data-ability">Data Ability</h2>
<h2 id="结束语">结束语</h2>
<h3 id="参考文献">参考文献</h3>
<p><a href="https://developer.harmonyos.com/cn/docs/documentation/doc-guides/ability-ability-overview-0000000000029852" target="_blank" rel="noopener noreffer">HarmonyOS文档</a></p>
]]></description>
</item>
</channel>
</rss>
