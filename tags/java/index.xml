<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Java - 标签 - Leeshy&#39;s Blog | To be humble</title>
        <link>https://leeshy-tech.github.io/tags/java/</link>
        <description>Java - 标签 - Leeshy&#39;s Blog | To be humble</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>saili@bupt.edu.cn (Leeshy)</managingEditor>
            <webMaster>saili@bupt.edu.cn (Leeshy)</webMaster><lastBuildDate>Sat, 12 Feb 2022 16:46:06 &#43;0800</lastBuildDate><atom:link href="https://leeshy-tech.github.io/tags/java/" rel="self" type="application/rss+xml" /><item>
    <title>鸿蒙开发实践——调用API</title>
    <link>https://leeshy-tech.github.io/harmonyos_api/</link>
    <pubDate>Sat, 12 Feb 2022 16:46:06 &#43;0800</pubDate><author>saili@bupt.edu.cn (Leeshy)</author><guid>https://leeshy-tech.github.io/harmonyos_api/</guid>
    <description><![CDATA[<h2 id="项目简介">项目简介</h2>
<h3 id="项目结构">项目结构</h3>
<pre tabindex="0"><code>└─ entry
	├─src.main
        ├─ java.com.example.api
            ├─beans
                ├─ requestBody				API请求体
                └─ returnBody				API返回体
            ├─slice
                └─ MainAbilitySlice			主页面Slice
            ├─utils
                ├─ baiduApi					百度API调用
                ├─ HttpRequestUtil			一般API调用，本项目没用到，但是很重要
                └─ LoadImageUtil			网络图片加载到image组件
            ├─ MainAbility
            └─ MyApplication
        └─ resources.base.layout
            └─ ability_main.xml				主页面布局文件
 	└─ build.gradle							添加外部依赖
</code></pre><h3 id="效果">效果</h3>
<p>单击按钮，将输入框内的文字转换为二维码显示在下方。</p>
<p>用手机扫码，解码的信息与文字相同。</p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<h2 id="铺垫">铺垫</h2>
<h3 id="http">HTTP</h3>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>注意<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">本项目中调用API使用的是https方式，这部分仅作笔记。</div>
        </div>
    </div>
<p>在鸿蒙应⽤中默认只允许访问https接⼝，如果要访问http接⼝，需要在config.json的deviceConfig项中添加如下配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="s2">&#34;deviceConfig&#34;</span><span class="err">:</span> <span class="p">{</span>
  <span class="nt">&#34;default&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;network&#34;</span><span class="p">:</span> <span class="p">{</span>
      <span class="nt">&#34;cleartextTraffic&#34;</span><span class="p">:</span> <span class="kc">true</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><h3 id="json">JSON</h3>
<p>API请求体的传入和响应体的解析需要JSON格式的字符串、把JSON字符串转换为对象，虽然也可以用转义符等方式实现，但还是用外部依赖比较方便，常用的依赖有Gson、FastJson、Jackson，本项目使用的是FastJson。</p>
<p>借助转义符传递JSON be like：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="n">String</span> <span class="n">jsonBody</span> <span class="o">=</span> <span class="s">&#34;{\n  \&#34;data\&#34; : \&#34;https://apis.baidu.com/\&#34;,\n&#34;</span> <span class="o">+</span>
        <span class="s">&#34;  \&#34;size\&#34; : 20,\n&#34;</span> <span class="o">+</span>
        <span class="s">&#34;  \&#34;level\&#34; : \&#34;L\&#34;,\n&#34;</span> <span class="o">+</span>
        <span class="s">&#34;  \&#34;format\&#34; : \&#34;jpg\&#34;,\n&#34;</span> <span class="o">+</span>
        <span class="s">&#34;  \&#34;logo\&#34; : \&#34;https://apisown-test.bj.bcebos.com/qr-code-api-store.png\&#34;\n}&#34;</span><span class="o">;</span>
</code></pre></div><p>我的老天，它实在是太丑陋了。</p>
<h3 id="引入外部依赖">引入外部依赖</h3>
<p>添加依赖库fastjson，以及百度的依赖库api-explorer-sdk。</p>
<p>在entry &gt; build.gradle中添加：<code>implementation ('com.baidubce:api-explorer-sdk:1.0.3.1','com.alibaba:fastjson:1.2.47')</code></p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>技巧<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">添加外部依赖的方法，详见：<a href="https://leeshy-tech.github.io/harmonyos_outerdependency/" target="_blank" rel="noopener noreffer">鸿蒙开发笔记——引入外部依赖</a></div>
        </div>
    </div>
<h2 id="api调用">API调用</h2>
<p>API的功能是将字符串转化为二维码图片，这里选用的是<a href="https://apis.baidu.com/store/detail/581576df-bc52-4e4a-8a3a-2abd6035e7ae" target="_blank" rel="noopener noreffer">百度的API</a>，原因是：有例程。对于我这种啥都没学扎实的人来说，能降低点难度最好。</p>
<h3 id="api需要注意的点">API需要注意的点</h3>
<ol>
<li>调用方式：HTTP or HTTPS? POST？GET？DELETE？</li>
<li>请求体参数。</li>
<li>响应体参数：取决于你如何取到你想要的返回值。</li>
<li>认证密钥。</li>
</ol>
<p>从该API的介绍中我们看到：http和https均可，POST方式，有认证密钥，请求体和响应体参数示例如下：</p>
<p></p>
<h3 id="核心代码">核心代码</h3>
<ol>
<li>
<p>请求体和响应体各写成一个类：requestBody 、returnBody</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="c1">//API的请求体，共五个参数
</span><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">requestBody</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">data</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">size</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">level</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">format</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">logo</span><span class="o">;</span>

   <span class="o">...</span>
<span class="o">}</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"> <span class="c1">//API的响应体类，只有一个参数
</span><span class="c1"></span> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">returnBody</span> <span class="o">{</span>
     <span class="kd">private</span> <span class="n">String</span> <span class="n">imageUrl</span><span class="o">;</span>

     <span class="o">...</span>
 <span class="o">}</span>
</code></pre></div></li>
<li>
<p>调用API的过程封装成类的函数：baiduApi.sendRequest(requestBody request_body)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="c1">//百度API的请求代码，由示例代码更改而来：https://apis.baidu.com/store/detail/581576df-bc52-4e4a-8a3a-2abd6035e7ae
</span><span class="c1"></span><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">sendRequest</span><span class="o">(</span><span class="n">requestBody</span> <span class="n">request_body</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">//填入自己的accessKey，secretKey，否则项目无法正常运行。
</span><span class="c1"></span>    <span class="n">String</span> <span class="n">accessKey</span> <span class="o">=</span> <span class="s">&#34;accessKey&#34;</span><span class="o">;</span>
    <span class="n">String</span> <span class="n">secretKey</span> <span class="o">=</span> <span class="s">&#34;secretKey&#34;</span><span class="o">;</span>

    <span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="n">String</span> <span class="n">path</span> <span class="o">=</span> <span class="s">&#34;http://qrcode.api.bdymkt.com/qrcode/generate&#34;</span><span class="o">;</span>
    <span class="n">ApiExplorerRequest</span> <span class="n">request</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ApiExplorerRequest</span><span class="o">(</span><span class="n">HttpMethodName</span><span class="o">.</span><span class="na">POST</span><span class="o">,</span> <span class="n">path</span><span class="o">);</span>
    <span class="n">request</span><span class="o">.</span><span class="na">setCredentials</span><span class="o">(</span><span class="n">accessKey</span><span class="o">,</span> <span class="n">secretKey</span><span class="o">);</span>

    <span class="c1">// 设置header参数
</span><span class="c1"></span>    <span class="n">request</span><span class="o">.</span><span class="na">addHeaderParameter</span><span class="o">(</span><span class="s">&#34;Content-Type&#34;</span><span class="o">,</span> <span class="s">&#34;application/json;charset=UTF-8&#34;</span><span class="o">);</span>

    <span class="c1">// 设置jsonBody参数
</span><span class="c1"></span>    <span class="n">String</span> <span class="n">objStr</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">.</span><span class="na">toJSONString</span><span class="o">(</span><span class="n">request_body</span><span class="o">);</span>
    <span class="n">request</span><span class="o">.</span><span class="na">setJsonBody</span><span class="o">(</span><span class="n">objStr</span><span class="o">);</span>

    <span class="n">ApiExplorerClient</span> <span class="n">client</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ApiExplorerClient</span><span class="o">(</span><span class="k">new</span> <span class="n">AppSigner</span><span class="o">());</span>

    <span class="k">try</span> <span class="o">{</span>
        <span class="n">ApiExplorerResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">sendRequest</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
        <span class="c1">// 返回结果格式为Json字符串
</span><span class="c1"></span>        <span class="n">result</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">getResult</span><span class="o">();</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></li>
</ol>
<h2 id="按键监听">按键监听</h2>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>注意<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">本部分参考官方文档 &gt; Ability框架 &gt; 线程管理</div>
        </div>
    </div>
<p>这里的按键监听与之前稍有不同，原因是调用API是一个耗时的工作，它不能在主线程中运行，需要在按键监听器中使用新的线程。</p>
<h3 id="核心代码-1">核心代码</h3>
<p>MainAbilitySlice的onStart方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="c1">//设置按键监听
</span><span class="c1"></span><span class="n">btn1</span><span class="o">.</span><span class="na">setClickedListener</span><span class="o">(</span><span class="n">component</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="c1">//开一个新线程
</span><span class="c1"></span>    <span class="n">TaskDispatcher</span> <span class="n">globalTaskDispatcher</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getGlobalTaskDispatcher</span><span class="o">(</span><span class="n">TaskPriority</span><span class="o">.</span><span class="na">DEFAULT</span><span class="o">);</span>
    <span class="c1">//异步
</span><span class="c1"></span>    <span class="n">globalTaskDispatcher</span><span class="o">.</span><span class="na">asyncDispatch</span><span class="o">(()-&gt;{</span>
        <span class="c1">//调用API生成二维码图片（网络地址）
</span><span class="c1"></span>        <span class="c1">//返回字符串格式：{&#34;imageUrl&#34;:&#34;https://bj.bcebos.com/qr-code/22021215e07535dcaa53.jpg&#34;}
</span><span class="c1"></span>        <span class="n">String</span> <span class="n">string</span> <span class="o">=</span> <span class="n">tf1</span><span class="o">.</span><span class="na">getText</span><span class="o">();</span>
        <span class="n">requestBody</span> <span class="n">request_body</span> <span class="o">=</span> <span class="k">new</span> <span class="n">requestBody</span><span class="o">(</span><span class="n">string</span><span class="o">,</span><span class="n">20</span><span class="o">,</span><span class="s">&#34;L&#34;</span><span class="o">,</span><span class="s">&#34;jpg&#34;</span><span class="o">,</span>
                <span class="s">&#34;https://apisown-test.bj.bcebos.com/qr-code-api-store.png&#34;</span><span class="o">);</span>
        <span class="n">String</span> <span class="n">request_result</span> <span class="o">=</span> <span class="n">baiduApi</span><span class="o">.</span><span class="na">sendRequest</span><span class="o">(</span><span class="n">request_body</span><span class="o">);</span>
        <span class="c1">//将JSON字符串转换为类，取出imageUrl
</span><span class="c1"></span>        <span class="n">returnBody</span> <span class="n">returndata</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">.</span><span class="na">parseObject</span><span class="o">(</span><span class="n">request_result</span><span class="o">,</span> <span class="n">returnBody</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">String</span> <span class="n">image_url</span> <span class="o">=</span> <span class="n">returndata</span><span class="o">.</span><span class="na">getImageUrl</span><span class="o">();</span>
        <span class="c1">//将网络图片显示到image组件
</span><span class="c1"></span>        <span class="n">LoadImageUtil</span><span class="o">.</span><span class="na">loadImg</span><span class="o">(</span><span class="k">this</span><span class="o">,</span><span class="n">image_url</span><span class="o">,</span><span class="n">image1</span><span class="o">);</span>
    <span class="o">});</span>
<span class="o">});</span>
</code></pre></div><p>在新线程的异步方法里写入监听逻辑：调用API并将返回的网络图片url显示到image组件。</p>
<h2 id="网络图片显示">网络图片显示</h2>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>注意<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">本部分参考官方文档 &gt; 媒体 &gt; 图像 &gt; 位图操作开发指导 &amp; 图像解码开发指导。</div>
        </div>
    </div>
<p>当我们API调用成功之后，我们就需要显示这个图片，但是image组件的setImageElement()方法的输入参数类型只能是Element，而Element类型是鸿蒙的本地数据文件管理类型，也就是说通过这个方法只能让image组件显示本地的图片，我们获得的网络图片地址在这里是不能用的。</p>
<p></p>
<p>我们需要自己写接口来实现网络图片的显示：LoadImageUtil.loadImg(Context context, String netImgUrl, Image image)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="c1">//将网络图片加载到context的image组件里
</span><span class="c1"></span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">loadImg</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">String</span> <span class="n">netImgUrl</span><span class="o">,</span> <span class="n">Image</span> <span class="n">image</span><span class="o">){</span>
    <span class="c1">//创建一个新线程
</span><span class="c1"></span>    <span class="n">TaskDispatcher</span> <span class="n">globalTaskDispatcher</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getGlobalTaskDispatcher</span><span class="o">(</span><span class="n">TaskPriority</span><span class="o">.</span><span class="na">DEFAULT</span><span class="o">);</span>
    <span class="n">globalTaskDispatcher</span><span class="o">.</span><span class="na">asyncDispatch</span><span class="o">(()-&gt;{</span>
        <span class="n">HttpURLConnection</span> <span class="n">connection</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="k">try</span><span class="o">{</span>
            <span class="c1">//建立与网络图片之间的http连接
</span><span class="c1"></span>            <span class="n">URL</span> <span class="n">url</span> <span class="o">=</span> <span class="k">new</span> <span class="n">URL</span><span class="o">(</span><span class="n">netImgUrl</span><span class="o">);</span>
            <span class="n">connection</span> <span class="o">=</span> <span class="o">(</span><span class="n">HttpURLConnection</span><span class="o">)</span> <span class="n">url</span><span class="o">.</span><span class="na">openConnection</span><span class="o">();</span>
            <span class="n">connection</span><span class="o">.</span><span class="na">connect</span><span class="o">();</span>
            <span class="c1">//从连接中获取输入流
</span><span class="c1"></span>            <span class="n">InputStream</span> <span class="n">inputStream</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">();</span>
            <span class="c1">//根据数据流将图片数据缓存到ImageSouce对象，创建图片对象
</span><span class="c1"></span>            <span class="n">ImageSource</span> <span class="n">imageSource</span> <span class="o">=</span> <span class="n">ImageSource</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">inputStream</span><span class="o">,</span><span class="k">new</span> <span class="n">ImageSource</span><span class="o">.</span><span class="na">SourceOptions</span><span class="o">());</span>
            <span class="c1">//图片数据解码的参数
</span><span class="c1"></span>            <span class="n">ImageSource</span><span class="o">.</span><span class="na">DecodingOptions</span> <span class="n">decodingOptions</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ImageSource</span><span class="o">.</span><span class="na">DecodingOptions</span><span class="o">();</span>
            <span class="n">decodingOptions</span><span class="o">.</span><span class="na">desiredPixelFormat</span> <span class="o">=</span> <span class="n">PixelFormat</span><span class="o">.</span><span class="na">ARGB_8888</span><span class="o">;</span>
            <span class="c1">//PixelMap对象就表示一个图片
</span><span class="c1"></span>            <span class="n">PixelMap</span> <span class="n">pixelmap</span> <span class="o">=</span> <span class="n">imageSource</span><span class="o">.</span><span class="na">createPixelmap</span><span class="o">(</span><span class="n">decodingOptions</span><span class="o">);</span>
            <span class="c1">//将图片载入到组件中：在鸿蒙应用中将图片载入到组件，推荐在一个独立的UI线程中完成
</span><span class="c1"></span>            <span class="n">context</span><span class="o">.</span><span class="na">getUITaskDispatcher</span><span class="o">().</span><span class="na">asyncDispatch</span><span class="o">(()-&gt;{</span>
                <span class="n">image</span><span class="o">.</span><span class="na">setPixelMap</span><span class="o">(</span><span class="n">pixelmap</span><span class="o">);</span>
                <span class="n">pixelmap</span><span class="o">.</span><span class="na">release</span><span class="o">();</span><span class="c1">//释放图片
</span><span class="c1"></span>            <span class="o">});</span>
        <span class="o">}</span><span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">){</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">});</span>
<span class="o">}</span>
</code></pre></div><p>主要思路：</p>
<ul>
<li>建立网络连接获得图片数据</li>
<li>图片数据解码</li>
<li>转换成位图对象pixelmap</li>
<li>通过image.setPixelMap(pixelmap)方法载入图片</li>
</ul>
<h2 id="结束语">结束语</h2>
<h3 id="项目地址">项目地址</h3>
<p><a href="https://github.com/leeshy-tech/HarmonyOS_example/tree/main/Api" target="_blank" rel="noopener noreffer">https://github.com/leeshy-tech/HarmonyOS_example/tree/main/Api</a></p>
<h3 id="参考文献">参考文献</h3>
<p><a href="https://www.w3cschool.cn/fastjson/fastjson-demo1.html" target="_blank" rel="noopener noreffer">Fastjson 使用实例</a></p>
<p><a href="https://www.runoob.com/w3cnote/java-json-instro.html" target="_blank" rel="noopener noreffer">Java 中 JSON 的使用</a></p>
<p><a href="https://apis.baidu.com/store/detail/581576df-bc52-4e4a-8a3a-2abd6035e7ae" target="_blank" rel="noopener noreffer">百度智能云——二维码生成识别</a></p>
<p><a href="https://developer.harmonyos.com/cn/docs/documentation/doc-guides/document-outline-0000001064589184" target="_blank" rel="noopener noreffer">HarmonyOS文档</a></p>
<p><a href="https://www.bilibili.com/video/BV1DM4y1G7MN" target="_blank" rel="noopener noreffer">HarmonyOS 2.0应用开发实战教程丨锋迷商城项目</a></p>
]]></description>
</item>
<item>
    <title>鸿蒙开发笔记——引入外部依赖</title>
    <link>https://leeshy-tech.github.io/harmonyos_outerdependency/</link>
    <pubDate>Sat, 12 Feb 2022 14:21:06 &#43;0800</pubDate><author>saili@bupt.edu.cn (Leeshy)</author><guid>https://leeshy-tech.github.io/harmonyos_outerdependency/</guid>
    <description><![CDATA[<h2 id="gradle">Gradle</h2>
<p>简单的说，Gradle是一个构建工具，它是用来帮助我们构建app的，构建包括编译、打包等过程。我们可以为Gradle指定构建规则，然后它就会根据我们的“命令”自动为我们构建app。Studio中默认就使用Gradle来完成应用的构建。在创建工程时，Studio自动帮我们生成了一些通用构建规则，很多时候我们甚至完全不用修改这些规则就能完成我们app的构建。</p>
<p>有些时候，我们会有一些个性化的构建需求，比如我们引入了第三方库，或者我们想要在通用构建过程中做一些其他的事情，这时我们就要自己在系统默认构建规则上做一些修改。这时候我们就要自己向Gradle”下命令“了，这时候我们就需要用Gradle能听懂的话了，也就是Groovy。Groovy是一种基于JVM的动态语言，关于它的具体介绍，感兴趣的同学可以文末参考”延伸阅读“部分给出的链接。</p>
<h2 id="依赖坐标">依赖坐标</h2>
<h3 id="什么是依赖坐标">什么是依赖坐标</h3>
<p>依赖坐标的概念来源于Maven，俗称 gav：指的是使用下面三个向量子仓库中唯一定位一个 Maven 工程。</p>
<ol>
<li>
<p>groupid:公司或组织域名倒序</p>
<p><!-- raw HTML omitted -->com.ys.maven<!-- raw HTML omitted --></p>
</li>
<li>
<p>artifactid:模块名，也是实际项目的名称</p>
<p><!-- raw HTML omitted -->Maven_05<!-- raw HTML omitted --></p>
</li>
<li>
<p>version:当前项目的版本</p>
<p><!-- raw HTML omitted -->0.0.1-SNAPSHOT<!-- raw HTML omitted --></p>
</li>
</ol>
<h3 id="如何获取依赖坐标">如何获取依赖坐标</h3>
<ol>
<li>
<p><a href="https://mvnrepository.com/" target="_blank" rel="noopener noreffer">https://mvnrepository.com/</a> 在mvnrepository官网查询</p>
<p></p>
<p>单击版本号，可以看到它的坐标信息：</p>
<p></p>
</li>
<li>
<p>各种提示：</p>
<p>比如我现在要调用百度公司的API，示例代码提示我要引用百度的依赖：</p>
<p></p>
<p>那么就获取了坐标信息。</p>
</li>
</ol>
<h2 id="在鸿蒙应用中引用依赖">在鸿蒙应用中引用依赖</h2>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>注意<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">虽然我们在坐标依赖部分一直在说Maven，但是在DevEco Studio中使用的还是gradle，这点要分清楚。</div>
        </div>
    </div>
<ol>
<li>
<p>打开entry &gt; build.gradle：</p>
<p></p>
</li>
<li>
<p>在dependencies一栏添加如下语句：<code>implementation ('依赖坐标1','依赖坐标2','依赖坐标3')</code></p>
<p>依赖坐标 = <code>groupid:artifactid:version</code></p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="n">dependencies</span> <span class="o">{</span>
 <span class="n">implementation</span> <span class="nf">fileTree</span><span class="o">(</span><span class="nl">dir:</span> <span class="s1">&#39;libs&#39;</span><span class="o">,</span> <span class="nl">include:</span> <span class="o">[</span><span class="s1">&#39;*.jar&#39;</span><span class="o">,</span> <span class="s1">&#39;*.har&#39;</span><span class="o">])</span>
 <span class="n">testImplementation</span> <span class="s1">&#39;junit:junit:4.13.1&#39;</span>
 <span class="n">ohosTestImplementation</span> <span class="s1">&#39;com.huawei.ohos.testkit:runner:2.0.0.200&#39;</span>
 <span class="n">implementation</span> <span class="o">(</span><span class="s1">&#39;com.google.code.gson:gson:2.8.8&#39;</span><span class="o">,</span><span class="s1">&#39;com.baidubce:api-explorer-sdk:1.0.3.1&#39;</span><span class="o">)</span>
<span class="o">}</span>
</code></pre></div></li>
<li>
<p>打开gradle页面，刷新。</p>
<p></p>
<p></p>
</li>
<li>
<p>左侧工程目录能看到加入的依赖</p>
<p></p>
</li>
<li>
<p>由此，在工程中能够正常使用外部依赖。</p>
<p></p>
</li>
</ol>
<h2 id="结束语">结束语</h2>
<h3 id="参考文献">参考文献</h3>
<p><a href="https://www.cnblogs.com/Bonker/p/5619458.html" target="_blank" rel="noopener noreffer">十分钟理解Gradle</a></p>
<p><a href="https://mvnrepository.com/" target="_blank" rel="noopener noreffer">https://mvnrepository.com/</a></p>
<p><a href="https://www.cnblogs.com/ysocean/p/7451054.html" target="_blank" rel="noopener noreffer">Maven详解（五）&mdash;&mdash; 坐标的概念以及依赖管理</a></p>
<p><a href="https://www.bilibili.com/video/BV1DM4y1G7MN" target="_blank" rel="noopener noreffer">HarmonyOS 2.0应用开发实战教程丨锋迷商城项目</a></p>
]]></description>
</item>
<item>
    <title>鸿蒙开发实践——电话簿</title>
    <link>https://leeshy-tech.github.io/harmonyos_addressbook/</link>
    <pubDate>Tue, 08 Feb 2022 21:12:06 &#43;0800</pubDate><author>saili@bupt.edu.cn (Leeshy)</author><guid>https://leeshy-tech.github.io/harmonyos_addressbook/</guid>
    <description><![CDATA[<h1 id="电话簿">电话簿</h1>
<h2 id="项目简介">项目简介</h2>
<h3 id="项目结构">项目结构</h3>
<pre tabindex="0"><code>├─ entry.src.main
	├─ com.example.address_book
        ├─slice
            ├─ UserAddSlice
            ├─ UserListSlice
            └─ MainAbilitySlice
        ├─ DataBaseAbility	
        ├─ MainAbility
        └─ MyApplication
	└─ resources.base.layout
        ├─ ability_main.xml
        ├─ user_add.xml
        └─ user_list.xml
</code></pre><h3 id="效果">效果</h3>
<p></p>
<h2 id="数据库结构">数据库结构</h2>
<ul>
<li>数据库UserStore：本地、关系型
<ul>
<li>表users
<ul>
<li>属性userId：int、主键、自增</li>
<li>属性userName：text、不为空</li>
<li>属性userTel：text、唯一</li>
<li>属性userAddr：text</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="mainabilityslice">MainAbilitySlice</h2>
<p>核心代码：</p>
<p><strong>MainAbilitySlice的onStart方法：</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="n">Button</span> <span class="n">btn1</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">findComponentById</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Id_btn1</span><span class="o">);</span>
<span class="n">btn1</span><span class="o">.</span><span class="na">setClickedListener</span><span class="o">(</span><span class="n">listener</span><span class="o">-&gt;</span><span class="n">present</span><span class="o">(</span><span class="k">new</span> <span class="n">UserAddSlice</span><span class="o">(),</span><span class="k">new</span> <span class="n">Intent</span><span class="o">()));</span>

<span class="n">Button</span> <span class="n">btn2</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">findComponentById</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Id_btn2</span><span class="o">);</span>
<span class="n">btn2</span><span class="o">.</span><span class="na">setClickedListener</span><span class="o">(</span><span class="n">listener</span><span class="o">-&gt;</span><span class="n">present</span><span class="o">(</span><span class="k">new</span> <span class="n">UserListSlice</span><span class="o">(),</span><span class="k">new</span> <span class="n">Intent</span><span class="o">()));</span>
</code></pre></div><p>执行简单的页面跳转。</p>
<h2 id="databaseability">DataBaseAbility</h2>
<p>核心代码：</p>
<p><strong>DataBaseAbility类：</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">private</span> <span class="n">RdbStore</span> <span class="n">rdbStore</span><span class="o">;</span>
<span class="kd">private</span> <span class="n">StoreConfig</span> <span class="n">config</span> <span class="o">=</span> <span class="n">StoreConfig</span><span class="o">.</span><span class="na">newDefaultConfig</span><span class="o">(</span><span class="s">&#34;UserStore.db&#34;</span><span class="o">);</span>
</code></pre></div><p>RdbStore对象：表示与数据库的连接，通过此对象可以完成对数据表中数据的CRUD操作
StoreConfig对象：关联数据⽂件配置(数据库)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">private</span> <span class="n">RdbOpenCallback</span> <span class="n">callback</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RdbOpenCallback</span><span class="o">()</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">RdbStore</span> <span class="n">rdbStore</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">//使⽤rdbStore对象执⾏SQL创建数据表
</span><span class="c1"></span>        <span class="n">rdbStore</span><span class="o">.</span><span class="na">executeSql</span><span class="o">(</span><span class="s">&#34;create table if not exists users(&#34;</span> <span class="o">+</span>
                <span class="s">&#34;userId integer primary key autoincrement,&#34;</span> <span class="o">+</span>
                <span class="s">&#34;userName text not null,&#34;</span> <span class="o">+</span>
                <span class="s">&#34;userTel text not null unique,&#34;</span> <span class="o">+</span>
                <span class="s">&#34;userAddr text)&#34;</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">};</span>
</code></pre></div><p>RdbOpenCallback.onCreate()：数据库创建时被回调，初始化，创建数据表users（当其不存在时）。</p>
<p><strong>DataBaseAbility类的onStart方法：</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">onStart</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">super</span><span class="o">.</span><span class="na">onStart</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
    <span class="n">HiLog</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">LABEL_LOG</span><span class="o">,</span> <span class="s">&#34;DataBaseAbility onStart&#34;</span><span class="o">);</span>

    <span class="c1">//初始化与数据库的连接
</span><span class="c1"></span>    <span class="n">DatabaseHelper</span> <span class="n">helper</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DatabaseHelper</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="n">rdbStore</span> <span class="o">=</span> <span class="n">helper</span><span class="o">.</span><span class="na">getRdbStore</span><span class="o">(</span><span class="n">config</span><span class="o">,</span><span class="n">1</span><span class="o">,</span><span class="n">callback</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div><p><strong>重写insert方法：</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">insert</span><span class="o">(</span><span class="n">Uri</span> <span class="n">uri</span><span class="o">,</span> <span class="n">ValuesBucket</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="o">-</span><span class="n">1</span><span class="o">;</span>
    <span class="n">String</span> <span class="n">path</span> <span class="o">=</span> <span class="n">uri</span><span class="o">.</span><span class="na">getLastPath</span><span class="o">();</span>
    <span class="k">if</span><span class="o">(</span><span class="s">&#34;users&#34;</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="n">path</span><span class="o">)){</span>
        <span class="n">i</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">rdbStore</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="s">&#34;users&#34;</span><span class="o">,</span><span class="n">value</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div><p><strong>重写query、delete、update方法：</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="kd">public</span> <span class="n">ResultSet</span> <span class="nf">query</span><span class="o">(</span><span class="n">Uri</span> <span class="n">uri</span><span class="o">,</span> <span class="n">String</span><span class="o">[]</span> <span class="n">columns</span><span class="o">,</span> <span class="n">DataAbilityPredicates</span> <span class="n">predicates</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">RdbPredicates</span> <span class="n">rdbPredicates</span> <span class="o">=</span> <span class="n">DataAbilityUtils</span><span class="o">.</span><span class="na">createRdbPredicates</span><span class="o">(</span><span class="n">predicates</span><span class="o">,</span> <span class="s">&#34;users&#34;</span><span class="o">);</span>
    <span class="n">ResultSet</span> <span class="n">resultSet</span> <span class="o">=</span> <span class="n">rdbStore</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="n">rdbPredicates</span><span class="o">,</span> <span class="n">columns</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">resultSet</span><span class="o">;</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kt">int</span> <span class="nf">delete</span><span class="o">(</span><span class="n">Uri</span> <span class="n">uri</span><span class="o">,</span> <span class="n">DataAbilityPredicates</span> <span class="n">predicates</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">RdbPredicates</span> <span class="n">rdbPredicates</span> <span class="o">=</span> <span class="n">DataAbilityUtils</span><span class="o">.</span><span class="na">createRdbPredicates</span><span class="o">(</span><span class="n">predicates</span><span class="o">,</span> <span class="s">&#34;users&#34;</span><span class="o">);</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">rdbStore</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">rdbPredicates</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kt">int</span> <span class="nf">update</span><span class="o">(</span><span class="n">Uri</span> <span class="n">uri</span><span class="o">,</span> <span class="n">ValuesBucket</span> <span class="n">value</span><span class="o">,</span> <span class="n">DataAbilityPredicates</span> <span class="n">predicates</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">RdbPredicates</span> <span class="n">rdbPredicates</span> <span class="o">=</span> <span class="n">DataAbilityUtils</span><span class="o">.</span><span class="na">createRdbPredicates</span><span class="o">(</span><span class="n">predicates</span><span class="o">,</span> <span class="s">&#34;users&#34;</span><span class="o">);</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">rdbStore</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">value</span><span class="o">,</span> <span class="n">rdbPredicates</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div><h2 id="useraddslice">UserAddSlice</h2>
<p>核心代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserAddSlice</span> <span class="kd">extends</span> <span class="n">AbilitySlice</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">DataAbilityHelper</span> <span class="n">dataAbilityHelper</span><span class="o">;</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onStart</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">onStart</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">setUIContent</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Layout_user_add</span><span class="o">);</span>
        <span class="n">dataAbilityHelper</span> <span class="o">=</span> <span class="n">DataAbilityHelper</span><span class="o">.</span><span class="na">creator</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="c1">//获取组件对象
</span><span class="c1"></span>        <span class="n">Button</span> <span class="n">btn_add</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">findComponentById</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Id_btn_add</span><span class="o">);</span>
        <span class="n">TextField</span> <span class="n">tf1</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextField</span><span class="o">)</span> <span class="n">findComponentById</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Id_textField1</span><span class="o">);</span>
        <span class="n">TextField</span> <span class="n">tf2</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextField</span><span class="o">)</span> <span class="n">findComponentById</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Id_textField2</span><span class="o">);</span>
        <span class="n">TextField</span> <span class="n">tf3</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextField</span><span class="o">)</span> <span class="n">findComponentById</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Id_textField3</span><span class="o">);</span>
        <span class="c1">//绑定事件监听器
</span><span class="c1"></span>        <span class="n">btn_add</span><span class="o">.</span><span class="na">setClickedListener</span><span class="o">(</span><span class="n">component</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="n">String</span> <span class="n">userName</span> <span class="o">=</span> <span class="n">tf1</span><span class="o">.</span><span class="na">getText</span><span class="o">();</span>
            <span class="n">String</span> <span class="n">userTel</span> <span class="o">=</span> <span class="n">tf2</span><span class="o">.</span><span class="na">getText</span><span class="o">();</span>
            <span class="n">String</span> <span class="n">userAddr</span> <span class="o">=</span> <span class="n">tf3</span><span class="o">.</span><span class="na">getText</span><span class="o">();</span>
            <span class="c1">//构造VB
</span><span class="c1"></span>            <span class="n">ValuesBucket</span> <span class="n">valuesBucket</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ValuesBucket</span><span class="o">();</span>
            <span class="n">valuesBucket</span><span class="o">.</span><span class="na">putString</span><span class="o">(</span><span class="s">&#34;userName&#34;</span><span class="o">,</span><span class="n">userName</span><span class="o">);</span>
            <span class="n">valuesBucket</span><span class="o">.</span><span class="na">putString</span><span class="o">(</span><span class="s">&#34;userTel&#34;</span><span class="o">,</span><span class="n">userTel</span><span class="o">);</span>
            <span class="n">valuesBucket</span><span class="o">.</span><span class="na">putString</span><span class="o">(</span><span class="s">&#34;userAddr&#34;</span><span class="o">,</span><span class="n">userAddr</span><span class="o">);</span>
            <span class="c1">//插入数据
</span><span class="c1"></span>            <span class="k">try</span><span class="o">{</span>
                <span class="n">Uri</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">Uri</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="s">&#34;dataability:///com.example.address_book.DataBaseAbility/users&#34;</span><span class="o">);</span>
                <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">dataAbilityHelper</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="n">uri</span><span class="o">,</span><span class="n">valuesBucket</span><span class="o">);</span>
                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&gt;&gt;&gt;&gt;&gt;&gt;&#34;</span><span class="o">+</span><span class="n">i</span><span class="o">);</span>
            <span class="o">}</span><span class="k">catch</span> <span class="o">(</span><span class="n">DataAbilityRemoteException</span> <span class="n">e</span><span class="o">){</span>
                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">});</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><ul>
<li>
<p>数据库的相关操作要依靠dataAbilityHelper。</p>
</li>
<li>
<p>从TextField组件中获取输入的信息。</p>
</li>
<li>
<p>设置监听器，将获得的信息插入数据表。</p>
</li>
<li>
<p>插入数据通过ValuesBucket储存，指数据表的一行。</p>
</li>
</ul>
<h2 id="userlistslice">UserListSlice</h2>
<p>核心代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserListSlice</span> <span class="kd">extends</span> <span class="n">AbilitySlice</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">DataAbilityHelper</span> <span class="n">dataAbilityHelper</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onStart</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">onStart</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">setUIContent</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Layout_user_list</span><span class="o">);</span>

        <span class="n">Text</span> <span class="n">text</span> <span class="o">=</span> <span class="o">(</span><span class="n">Text</span><span class="o">)</span> <span class="n">findComponentById</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Id_infoText</span><span class="o">);</span>
        <span class="n">text</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&#34;&#34;</span><span class="o">);</span>
        <span class="n">dataAbilityHelper</span> <span class="o">=</span> <span class="n">DataAbilityHelper</span><span class="o">.</span><span class="na">creator</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="c1">//查询所有联系⼈信息
</span><span class="c1"></span>        <span class="n">Uri</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">Uri</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="s">&#34;dataability:///com.example.address_book.DataBaseAbility/users&#34;</span><span class="o">);</span>
        <span class="n">String</span><span class="o">[]</span> <span class="n">colums</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;userId&#34;</span><span class="o">,</span><span class="s">&#34;userName&#34;</span><span class="o">,</span><span class="s">&#34;userTel&#34;</span><span class="o">,</span><span class="s">&#34;userAddr&#34;</span><span class="o">};</span>
        <span class="n">DataAbilityPredicates</span> <span class="n">dataAbilityPredicates</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DataAbilityPredicates</span><span class="o">();</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="n">dataAbilityHelper</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="n">uri</span><span class="o">,</span><span class="n">colums</span><span class="o">,</span><span class="n">dataAbilityPredicates</span><span class="o">);</span>
            <span class="c1">//从rs中获取查询结果
</span><span class="c1"></span>            <span class="kt">int</span> <span class="n">rowCount</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getRowCount</span><span class="o">();</span>
            <span class="k">if</span><span class="o">(</span><span class="n">rowCount</span><span class="o">&gt;</span><span class="n">0</span><span class="o">){</span>
                <span class="n">rs</span><span class="o">.</span><span class="na">goToFirstRow</span><span class="o">();</span>
                <span class="k">do</span><span class="o">{</span>
                    <span class="kt">int</span> <span class="n">userId</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span> <span class="n">0</span><span class="o">);</span>
                    <span class="n">String</span> <span class="n">userName</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="n">1</span><span class="o">);</span>
                    <span class="n">String</span> <span class="n">userTel</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="n">2</span><span class="o">);</span>
                    <span class="n">String</span> <span class="n">userAddr</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="n">3</span><span class="o">);</span>
                    <span class="n">String</span> <span class="n">info</span> <span class="o">=</span> <span class="s">&#34; [&#34;</span><span class="o">+</span><span class="n">userId</span><span class="o">+</span><span class="s">&#34;,&#34;</span><span class="o">+</span><span class="n">userName</span><span class="o">+</span><span class="s">&#34;,&#34;</span><span class="o">+</span><span class="n">userTel</span><span class="o">+</span><span class="s">&#34;,&#34;</span><span class="o">+</span><span class="n">userAddr</span><span class="o">+</span><span class="s">&#34;]&#34;</span><span class="o">;</span>
                    <span class="n">text</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span> <span class="n">text</span><span class="o">.</span><span class="na">getText</span><span class="o">()+</span><span class="n">info</span> <span class="o">);</span>
                <span class="o">}</span><span class="k">while</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">goToNextRow</span><span class="o">());</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">DataAbilityRemoteException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><ul>
<li>通过调用查询接口来查询。</li>
<li>ResultSet为查询结果集，类似于指针，指向结果的第一行。</li>
</ul>
<h2 id="结束语">结束语</h2>
<h3 id="项目源码">项目源码</h3>
<p><a href="https://github.com/leeshy-tech/HarmonyOS_example/tree/main/address_book" target="_blank" rel="noopener noreffer">https://github.com/leeshy-tech/HarmonyOS_example/tree/main/address_book</a></p>
<h3 id="参考文献">参考文献</h3>
<p><a href="https://developer.harmonyos.com/cn/docs/documentation/doc-guides/database-relational-overview-0000000000030046" target="_blank" rel="noopener noreffer">HarmonyOS文档——关系型数据库</a></p>
<p><a href="https://www.bilibili.com/video/BV1DM4y1G7MN" target="_blank" rel="noopener noreffer">HarmonyOS 2.0应用开发实战教程丨锋迷商城项目</a></p>
]]></description>
</item>
<item>
    <title>鸿蒙开发实践——ServiceAbility</title>
    <link>https://leeshy-tech.github.io/harmonyos_serviceability/</link>
    <pubDate>Sat, 29 Jan 2022 21:38:06 &#43;0800</pubDate><author>saili@bupt.edu.cn (Leeshy)</author><guid>https://leeshy-tech.github.io/harmonyos_serviceability/</guid>
    <description><![CDATA[<h1 id="serviceability实践">ServiceAbility实践</h1>
<h2 id="项目简介">项目简介</h2>
<h3 id="项目结构">项目结构</h3>
<pre tabindex="0"><code>├─ entry.src.main
	├─ com.example.serviceability
        ├─slice
            └─ MainAbilitySlice
        ├─ MainAbility	
        ├─ MyService
        └─ MyApplication
	├─ resources.base.layout
        └─ ability_main.xml
    └─ config.json
</code></pre><h3 id="效果">效果</h3>
<p>按钮1开启MyService。</p>
<p>按钮2连接到MyService。</p>
<p>按钮3断开与MyService的连接。</p>
<p>按钮4关闭MyService。</p>
<p>服务运行时会在状态栏显示。</p>
<p>不同的点击顺序，命令行输出的提示信息不同。</p>
<h2 id="铺垫">铺垫</h2>
<p>在MyService里的每个生命周期函数里都加一句sout来显示各个方法执行的顺序。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyService</span> <span class="kd">extends</span> <span class="n">Ability</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">HiLogLabel</span> <span class="n">LABEL_LOG</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HiLogLabel</span><span class="o">(</span><span class="n">3</span><span class="o">,</span> <span class="n">0xD001100</span><span class="o">,</span> <span class="s">&#34;Demo&#34;</span><span class="o">);</span>

    <span class="c1">//在每个生命周期函数内加一句sout调试
</span><span class="c1"></span>    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onStart</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">onStart</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
        <span class="n">HiLog</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="n">LABEL_LOG</span><span class="o">,</span> <span class="s">&#34;MyService::onStart&#34;</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;--------------------onStart&#34;</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onBackground</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">onBackground</span><span class="o">();</span>
        <span class="n">HiLog</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">LABEL_LOG</span><span class="o">,</span> <span class="s">&#34;MyService::onBackground&#34;</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;--------------------onBackground&#34;</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onStop</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">onStop</span><span class="o">();</span>
        <span class="n">HiLog</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">LABEL_LOG</span><span class="o">,</span> <span class="s">&#34;MyService::onStop&#34;</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;--------------------onStop&#34;</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCommand</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">restart</span><span class="o">,</span> <span class="kt">int</span> <span class="n">startId</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;--------------------onCommand&#34;</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">IRemoteObject</span> <span class="nf">onConnect</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;--------------------onConnect&#34;</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="n">LocalRemoteObject</span><span class="o">()</span> <span class="o">{};</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onDisconnect</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;--------------------onDisconnect&#34;</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><h2 id="开启和关闭serviceability">开启和关闭ServiceAbility</h2>
<blockquote>
<p>此部分和”页面导航“里开启Ability的操作如出一辙，也就是说，我们只是在开启和关闭Ability，至于它是什么类型，无所谓。</p>
</blockquote>
<p>核心代码：</p>
<p>​	MainAbilitySlice的onStart方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="c1">//按钮1开启MyService
</span><span class="c1"></span><span class="n">Button</span> <span class="n">btn1</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">findComponentById</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Id_btn1</span><span class="o">);</span>
<span class="n">btn1</span><span class="o">.</span><span class="na">setClickedListener</span><span class="o">(</span><span class="n">component</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="n">Intent</span> <span class="n">intent1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">();</span>
    <span class="n">Operation</span> <span class="n">operation</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">.</span><span class="na">OperationBuilder</span><span class="o">()</span>
            <span class="o">.</span><span class="na">withDeviceId</span><span class="o">(</span><span class="s">&#34;&#34;</span><span class="o">)</span>
            <span class="o">.</span><span class="na">withBundleName</span><span class="o">(</span><span class="s">&#34;com.example.serviceability&#34;</span><span class="o">)</span>
            <span class="o">.</span><span class="na">withAbilityName</span><span class="o">(</span><span class="s">&#34;com.example.serviceability.MyService&#34;</span><span class="o">)</span>
            <span class="o">.</span><span class="na">build</span><span class="o">();</span>
    <span class="n">intent1</span><span class="o">.</span><span class="na">setOperation</span><span class="o">(</span><span class="n">operation</span><span class="o">);</span>
    <span class="k">this</span><span class="o">.</span><span class="na">startAbility</span><span class="o">(</span><span class="n">intent1</span><span class="o">);</span>
<span class="o">});</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="c1">//按钮4关闭MyService
</span><span class="c1"></span><span class="n">Button</span> <span class="n">btn4</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">findComponentById</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Id_btn4</span><span class="o">);</span>
<span class="n">btn4</span><span class="o">.</span><span class="na">setClickedListener</span><span class="o">(</span><span class="n">component</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="n">Intent</span> <span class="n">intent3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">();</span>
    <span class="n">Operation</span> <span class="n">operation</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">.</span><span class="na">OperationBuilder</span><span class="o">()</span>
            <span class="o">.</span><span class="na">withDeviceId</span><span class="o">(</span><span class="s">&#34;&#34;</span><span class="o">)</span>
            <span class="o">.</span><span class="na">withBundleName</span><span class="o">(</span><span class="s">&#34;com.example.serviceability&#34;</span><span class="o">)</span>
            <span class="o">.</span><span class="na">withAbilityName</span><span class="o">(</span><span class="s">&#34;com.example.serviceability.MyService&#34;</span><span class="o">)</span>
            <span class="o">.</span><span class="na">build</span><span class="o">();</span>
    <span class="n">intent3</span><span class="o">.</span><span class="na">setOperation</span><span class="o">(</span><span class="n">operation</span><span class="o">);</span>
    <span class="k">this</span><span class="o">.</span><span class="na">stopAbility</span><span class="o">(</span><span class="n">intent3</span><span class="o">);</span>
<span class="o">});</span>
</code></pre></div><ul>
<li>通过id获取Button对象，设置事件监听器。</li>
<li>调用<strong>startAbility</strong>和<strong>stopAbility</strong>方法，在intent对象的Operation属性里指定开启哪台<strong>设备</strong>的哪个<strong>应用</strong>的哪个<strong>Ability</strong>。</li>
</ul>
<h2 id="建立连接">建立连接</h2>
<p>核心代码：</p>
<p>​	MainAbilitySlice的onStart方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="c1">//按钮2连接到MyService
</span><span class="c1"></span><span class="n">Button</span> <span class="n">btn2</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">findComponentById</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Id_btn2</span><span class="o">);</span>

<span class="n">IAbilityConnection</span> <span class="n">connection</span> <span class="o">=</span> <span class="k">new</span> <span class="n">IAbilityConnection</span><span class="o">()</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onAbilityConnectDone</span><span class="o">(</span><span class="n">ElementName</span> <span class="n">elementName</span><span class="o">,</span> <span class="n">IRemoteObject</span> <span class="n">iRemoteObject</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;----------------------连接MyService成功&#34;</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onAbilityDisconnectDone</span><span class="o">(</span><span class="n">ElementName</span> <span class="n">elementName</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;----------------------连接MyService失败&#34;</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">};</span>

<span class="n">btn2</span><span class="o">.</span><span class="na">setClickedListener</span><span class="o">(</span><span class="n">component</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="n">Intent</span> <span class="n">intent2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">();</span>
    <span class="n">Operation</span> <span class="n">operation</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">.</span><span class="na">OperationBuilder</span><span class="o">()</span>
            <span class="o">.</span><span class="na">withDeviceId</span><span class="o">(</span><span class="s">&#34;&#34;</span><span class="o">)</span>
            <span class="o">.</span><span class="na">withBundleName</span><span class="o">(</span><span class="s">&#34;com.example.serviceability&#34;</span><span class="o">)</span>
            <span class="o">.</span><span class="na">withAbilityName</span><span class="o">(</span><span class="s">&#34;com.example.serviceability.MyService&#34;</span><span class="o">)</span>
            <span class="o">.</span><span class="na">build</span><span class="o">();</span>
    <span class="n">intent2</span><span class="o">.</span><span class="na">setOperation</span><span class="o">(</span><span class="n">operation</span><span class="o">);</span>
    <span class="k">this</span><span class="o">.</span><span class="na">connectAbility</span><span class="o">(</span><span class="n">intent2</span><span class="o">,</span><span class="n">connection</span><span class="o">);</span>
<span class="o">});</span>
</code></pre></div><ul>
<li>
<p>通过id获取Button对象，设置事件监听器。</p>
</li>
<li>
<p>新建连接对象，重写onAbilityConnectDone和onAbilityDisconnectDone方法，每个方法里都写一句sout用于调试。</p>
<ul>
<li>onAbilityConnectDone：连接成功建立后执行。</li>
<li>onAbilityDisconnectDone：连接建立失败后执行。</li>
</ul>
</li>
<li>
<p>调用connectAbility方法，传递intent和connect对象。</p>
</li>
</ul>
<p>​	MyService：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="nd">@Override</span>
<span class="kd">public</span> <span class="n">IRemoteObject</span> <span class="nf">onConnect</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;--------------------onConnect&#34;</span><span class="o">);</span>
    <span class="k">return</span> <span class="k">new</span> <span class="n">LocalRemoteObject</span><span class="o">()</span> <span class="o">{};</span>
<span class="o">}</span>
</code></pre></div><ul>
<li>注意返回语句，返回一个LocalRemoteObject对象。</li>
</ul>
<p>试图与Service建立连接时，触发onConnect方法，它返回一个LocalRemoteObject对象，在这个实例中它返回的是MyService这个Ability，触发回调函数onAbilityConnectDone或者onAbilityDisconnectDone。</p>
<h2 id="关闭连接">关闭连接</h2>
<p>核心代码：</p>
<p>MainAbilitySlice的onStart方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="c1">//按钮3断开与MyService的连接
</span><span class="c1"></span><span class="n">Button</span> <span class="n">btn3</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">findComponentById</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Id_btn3</span><span class="o">);</span>
<span class="n">btn3</span><span class="o">.</span><span class="na">setClickedListener</span><span class="o">(</span><span class="n">component</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="n">connection</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">disconnectAbility</span><span class="o">(</span><span class="n">connection</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">});</span>
</code></pre></div><ul>
<li>若connection对象存在，就调用<strong>disconnectAbility</strong>方法即可。</li>
</ul>
<h2 id="前台service">前台Service</h2>
<p>前台Service会始终保持正在运行的图标在系统状态栏显示。</p>
<p>核心代码：</p>
<p>MyService的onStart方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="c1">// 创建通知，其中1005为notificationId
</span><span class="c1"></span><span class="n">NotificationRequest</span> <span class="n">request</span> <span class="o">=</span> <span class="k">new</span> <span class="n">NotificationRequest</span><span class="o">(</span><span class="n">1005</span><span class="o">);</span>
<span class="n">NotificationRequest</span><span class="o">.</span><span class="na">NotificationNormalContent</span> <span class="n">content</span> <span class="o">=</span> <span class="k">new</span> <span class="n">NotificationRequest</span><span class="o">.</span><span class="na">NotificationNormalContent</span><span class="o">();</span>
<span class="n">content</span><span class="o">.</span><span class="na">setTitle</span><span class="o">(</span><span class="s">&#34;title&#34;</span><span class="o">).</span><span class="na">setText</span><span class="o">(</span><span class="s">&#34;text&#34;</span><span class="o">);</span>
<span class="n">NotificationRequest</span><span class="o">.</span><span class="na">NotificationContent</span> <span class="n">notificationContent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">NotificationRequest</span><span class="o">.</span><span class="na">NotificationContent</span><span class="o">(</span><span class="n">content</span><span class="o">);</span>
<span class="n">request</span><span class="o">.</span><span class="na">setContent</span><span class="o">(</span><span class="n">notificationContent</span><span class="o">);</span>

<span class="c1">// 绑定通知，1005为创建通知时传入的notificationId
</span><span class="c1"></span><span class="n">keepBackgroundRunning</span><span class="o">(</span><span class="n">1005</span><span class="o">,</span> <span class="n">request</span><span class="o">);</span>
</code></pre></div><p>这段进行一个简单的Ctrl+C、V就行，注意以下几个点：</p>
<ul>
<li>
<p>1005这个notificationId不能与其他的服务重复</p>
</li>
<li>
<p>title和text在图中对应：</p>
<p></p>
</li>
</ul>
<p>config.json中还要申请常驻后台权限：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="s2">&#34;reqPermissions&#34;</span><span class="err">:</span> <span class="p">[</span>
  <span class="p">{</span><span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;ohos.permission.KEEP_BACKGROUND_RUNNING&#34;</span><span class="p">}</span>
<span class="p">]</span>
</code></pre></div><p>位置如图所示：</p>
<p></p>
<h2 id="生命周期分析">生命周期分析</h2>
<p>整个执行过程如图所示：</p>
<p></p>
<ul>
<li>
<p>启动：</p>
<ul>
<li>
<p>若MyService已建立，执行onCommand。</p>
<p></p>
</li>
<li>
<p>若未建立，执行onStart和onCommand。</p>
<p></p>
</li>
</ul>
</li>
<li>
<p>连接：</p>
<ul>
<li>
<p>若MyService已建立，则执行onConnect。</p>
<p></p>
</li>
<li>
<p>若未建立，则执行onStart和onConnect（红字忽略）。</p>
<p></p>
</li>
</ul>
</li>
<li>
<p>断开连接：当连接存在，且</p>
<ul>
<li>
<p>MyService是手动创建的，不是由连接唤起的，只执行onDisconnect</p>
<p></p>
</li>
<li>
<p>MyService是由该连接唤起的，执行onDisconnect、onBackground、onStop。</p>
<p></p>
</li>
</ul>
</li>
<li>
<p>关闭：当MyService没有被连接时，才能关闭，执行onBackground和onStop。</p>
<p></p>
</li>
</ul>
<h2 id="结束语">结束语</h2>
<h3 id="项目源码">项目源码</h3>
<p><a href="https://github.com/leeshy-tech/HarmonyOS_example/tree/main/ServiceAbility" target="_blank" rel="noopener noreffer">https://github.com/leeshy-tech/HarmonyOS_example/tree/main/ServiceAbility</a></p>
<h3 id="参考文献">参考文献</h3>
<p><a href="https://www.bilibili.com/video/BV1DM4y1G7MN" target="_blank" rel="noopener noreffer">HarmonyOS 2.0应用开发实战教程丨锋迷商城项目</a></p>
<p><a href="https://developer.harmonyos.com/cn/docs/documentation/doc-guides/ability-service-concept-0000000000044457" target="_blank" rel="noopener noreffer">HarmonyOS文档——ServiceAbility</a></p>
]]></description>
</item>
<item>
    <title>鸿蒙开发实践——页面导航</title>
    <link>https://leeshy-tech.github.io/harmonyos_pagetopage/</link>
    <pubDate>Fri, 28 Jan 2022 23:32:06 &#43;0800</pubDate><author>saili@bupt.edu.cn (Leeshy)</author><guid>https://leeshy-tech.github.io/harmonyos_pagetopage/</guid>
    <description><![CDATA[<h1 id="页面导航">页面导航</h1>
<h2 id="项目简介">项目简介</h2>
<h3 id="项目结构">项目结构</h3>
<pre tabindex="0"><code>├─ entry.src.main
	├─ com.example.page_to_page
        ├─slice
            ├─ AnotherAbilitySlice
            ├─ MainAbilitySlice
            └─ SecondAbilitySlice
        ├─ AnotherAbility	
        ├─ MainAbility
        └─ MyApplication
	└─ resources.base.layout
        ├─ ability_another.xml
        ├─ ability_main.xml
        └─ ability_second.xml
</code></pre><h3 id="效果">效果</h3>
<p>点击按钮一，从MainAbilitySlice跳转到SecondAbilitySlice。</p>
<p>点击按钮二，从MainAbilitySlice跳转到SecondAbilitySlice，并传递参数字符串。</p>
<p>点击按钮三，从MainAbility的MainAbilitySlice跳转到AnotherAbility的AnotherAbilitySlice。</p>
<p></p>
<h2 id="intent">intent</h2>
<blockquote>
<p><a href="https://developer.harmonyos.com/cn/docs/documentation/doc-guides/ability-intent-0000000000038799" target="_blank" rel="noopener noreffer">HarmonyOS文档——intent</a></p>
</blockquote>
<p>intent是对象之间传递信息的载体，Slice之间的导航、传参以及Ability之间的导航都是基于intent。Intent的构成元素包括Operation与Parameters。Operation是执行的操作，Parameters则是携带的参数。</p>
<h2 id="slice间导航">Slice间导航</h2>
<p>核心代码：</p>
<p>MainAbilitySlice的onStart方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="n">Button</span> <span class="n">btn1</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">findComponentById</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Id_btn1</span><span class="o">);</span>
<span class="n">btn1</span><span class="o">.</span><span class="na">setClickedListener</span><span class="o">(</span><span class="n">listener</span><span class="o">-&gt;</span><span class="n">present</span><span class="o">(</span><span class="k">new</span> <span class="n">SecondAbilitySlice</span><span class="o">(),</span><span class="k">new</span> <span class="n">Intent</span><span class="o">()));</span>
</code></pre></div><ul>
<li>通过id获取按钮对象。</li>
<li>给按钮绑定事件监听器，执行present方法。</li>
<li>这里只是导航，没有其他操作，所以传递一个默认intent即可。</li>
</ul>
<h2 id="slice间传参">Slice间传参</h2>
<p>核心代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="n">Button</span> <span class="n">btn2</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">findComponentById</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Id_btn2</span><span class="o">);</span>
<span class="n">btn2</span><span class="o">.</span><span class="na">setClickedListener</span><span class="o">(</span><span class="n">listener</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="n">Intent</span> <span class="n">intent1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">();</span>
    <span class="n">intent1</span><span class="o">.</span><span class="na">setParam</span><span class="o">(</span><span class="s">&#34;my_string&#34;</span><span class="o">,</span><span class="s">&#34;从MainAbilitySlice传参&#34;</span><span class="o">);</span>
    <span class="k">this</span><span class="o">.</span><span class="na">present</span><span class="o">(</span><span class="k">new</span> <span class="n">SecondAbilitySlice</span><span class="o">(),</span><span class="n">intent1</span><span class="o">);</span>
<span class="o">});</span>
</code></pre></div><p>跟导航部分思路相同。</p>
<p>传参的关键是构造intent对象的Parameters属性，使用setParam方法存储键值对。setParam方法有很多重载，包括int，string等等，但是没有对象类型，也就是传参不能传对象。</p>
<h2 id="pageability间导航">PageAbility间导航</h2>
<p>核心代码：</p>
<p>MainAbilitySlice类的onStart方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="n">Button</span> <span class="n">btn3</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">findComponentById</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Id_btn3</span><span class="o">);</span>
<span class="n">btn3</span><span class="o">.</span><span class="na">setClickedListener</span><span class="o">(</span><span class="n">listener</span> <span class="o">-&gt;</span> <span class="n">navigateToAnotherPage</span><span class="o">(</span><span class="n">listener</span><span class="o">));</span>
</code></pre></div><p>设置监听器的逻辑相同，不过这次我们让监听器执行我们的自定义函数navigateToAnotherPage。</p>
<p>MainAbilitySlice类新增:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">navigateToAnotherPage</span><span class="o">(</span><span class="n">Component</span> <span class="n">component</span><span class="o">){</span>
        <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">();</span>
        <span class="n">Operation</span> <span class="n">operation</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">.</span><span class="na">OperationBuilder</span><span class="o">()</span>
                <span class="o">.</span><span class="na">withDeviceId</span><span class="o">(</span><span class="s">&#34;&#34;</span><span class="o">)</span>						<span class="c1">//空字符串为本机
</span><span class="c1"></span>                <span class="o">.</span><span class="na">withBundleName</span><span class="o">(</span><span class="s">&#34;com.example.page_to_page&#34;</span><span class="o">)</span><span class="c1">//本应用的标识
</span><span class="c1"></span>                <span class="o">.</span><span class="na">withAbilityName</span><span class="o">(</span><span class="s">&#34;com.example.page_to_page.AnotherAbility&#34;</span><span class="o">)</span><span class="c1">//想启动的Ability
</span><span class="c1"></span>                <span class="o">.</span><span class="na">build</span><span class="o">();</span>

        <span class="n">intent</span><span class="o">.</span><span class="na">setOperation</span><span class="o">(</span><span class="n">operation</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">startAbility</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre></div><ul>
<li>使用OperationBuilder构建一个Operation，设置给intent。</li>
<li>将intent传给监听器</li>
</ul>
<p>页面跳转的核心是intent对象的Operation属性，这里构建Operation有三个参数DeviceId、BundleName、AbilityName，因为鸿蒙可以启动任意设备的任意应用的任意Ability，可能这就是万物互联吧。</p>
<h2 id="结束语">结束语</h2>
<h3 id="项目源码">项目源码</h3>
<p><a href="https://github.com/leeshy-tech/HarmonyOS_example/tree/main/page_to_page" target="_blank" rel="noopener noreffer">https://github.com/leeshy-tech/HarmonyOS_example/tree/main/page_to_page</a></p>
<h3 id="参考文献">参考文献</h3>
<p><a href="https://www.bilibili.com/video/BV1DM4y1G7MN" target="_blank" rel="noopener noreffer">HarmonyOS 2.0应用开发实战教程丨锋迷商城项目</a></p>
<p><a href="https://developer.harmonyos.com/cn/docs/documentation/doc-guides/ability-intent-0000000000038799" target="_blank" rel="noopener noreffer">HarmonyOS文档——intent</a></p>
]]></description>
</item>
<item>
    <title>程序报错总结——HarmonyOS</title>
    <link>https://leeshy-tech.github.io/harmonyos_application_error/</link>
    <pubDate>Thu, 27 Jan 2022 22:27:06 &#43;0800</pubDate><author>saili@bupt.edu.cn (Leeshy)</author><guid>https://leeshy-tech.github.io/harmonyos_application_error/</guid>
    <description><![CDATA[<h3 id="1">1</h3>
<div class="details admonition bug open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-bug fa-fw"></i>Bug<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">不可转换的类型；无法将 &lsquo;ohos.agp.components.Component&rsquo; 转换为 &lsquo;ohos.ai.cv.text.Text&rsquo;</div>
        </div>
    </div>
<p>原因：使用Tab键补全Text时，Studio自动引库引到了错误的库<code>import ohos.ai.cv.text.Text;</code>，实际应当是<code>import ohos.agp.components.Text;</code>。</p>
<p></p>
<h3 id="2">2</h3>
<div class="details admonition bug open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-bug fa-fw"></i>Bug<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">java.lang.NullPointerException: Attempt to invoke virtual method &lsquo;void ohos.agp.components.Button.setClickedListener(ohos.agp.components.Component$ClickedListener)&rsquo; on a null object reference</div>
        </div>
    </div>
<p>原因：在写xml文件时，误把注释写成了//，应该是<code>&lt;!-- --&gt;</code>。这里它不会直接报错，而是说我获得的按键对象为空，说明xml构建出了问题。</p>
<p></p>
]]></description>
</item>
</channel>
</rss>
