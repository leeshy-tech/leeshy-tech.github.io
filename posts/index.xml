<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - Leeshy&#39;s Blog | To be humble</title>
        <link>https://leeshy-tech.github.io/posts/</link>
        <description>所有文章 | Leeshy&#39;s Blog | To be humble</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>saili@bupt.edu.cn (Leeshy)</managingEditor>
            <webMaster>saili@bupt.edu.cn (Leeshy)</webMaster><lastBuildDate>Wed, 09 Feb 2022 22:15:06 &#43;0800</lastBuildDate><atom:link href="https://leeshy-tech.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>模拟开关——CD4066、CD4051</title>
    <link>https://leeshy-tech.github.io/analogue_switch/</link>
    <pubDate>Wed, 09 Feb 2022 22:15:06 &#43;0800</pubDate><author>saili@bupt.edu.cn (Leeshy)</author><guid>https://leeshy-tech.github.io/analogue_switch/</guid>
    <description><![CDATA[<h1 id="模拟开关">模拟开关</h1>
<p>模拟开关，英文名Analog switches；主要是完成信号链路中的信号切换功能。采用MOS管的开关方式实现了对信号链路关断或者打开；由于其功能类似于开关，而用模拟器件的特性实现，成为模拟开关。</p>
<h2 id="什么时候用继电器">什么时候用继电器</h2>
<p>继电器利用了电生磁原理，通电时电磁铁吸附开关使开关断开，常常应用于电子设计中作为电控开关。模拟开关是集成电路芯片，体积小、寿命高，而且能够实现较为复杂的功能，比如单刀双掷、单刀四掷、四开关集成等等。所以常见场景下还是模拟开关最为适合。</p>
<p>但是，集成电路芯片就决定了它有限制使用条件，信号电压、电流、频率均有一些限制，在大功率、高频场景下，可能模拟开关无法胜任，就需要使用继电器。</p>
<h2 id="四双向模拟开关cd4066">四双向模拟开关CD4066</h2>
<p>CD4066 的引脚功能如图所示。每个封装内部有 4 个独立的模拟开关，每个模拟开关 有输入、输出、控制三个端子，其中输入端和输出端可互换。当控制端加高电平时，开关导通；当控制端加低电平时开关截止。模拟开关导通时，导通电阻为几十欧姆；模拟开关截止时，呈现很高的阻抗，可以看成为开路。模拟开关可传输数字信号和模拟信号，可传输的模拟信号的上限频率为 40MHz。各开关间的串扰很小，典型值为－50dB。</p>
<p></p>
<p>当模拟开关的电源电压采用双电源时，例如 =﹢5V， =﹣5V(均对地0V而言)，则输入电压对称于0V的正、负信号电压(﹢5V～﹣5V)均能传输。这时要求控制信号C=“1”为+5V，C=“0”为-5V，否则只能传输正极性的信号电压。</p>
<h2 id="单八路模拟开关cd4051">单八路模拟开关CD4051</h2>
<p>CD4051 的引脚功能如图所示。CD4051 相当于一个单刀八掷开关，开关接通哪一通道，由输入的 3 位地址码 ABC 来决定。</p>
<p></p>
<p>真值表：</p>
<p></p>
<h2 id="同系列器件">同系列器件</h2>
<h3 id="双四路模拟开关cd4052">双四路模拟开关CD4052</h3>
<p></p>
<h3 id="三组二路模拟开关-cd4053">三组二路模拟开关 CD4053</h3>
<p></p>
<h3 id="十六路模拟开关-cd4067单刀十六掷">十六路模拟开关 CD4067——单刀十六掷</h3>
<h2 id="结束语">结束语</h2>
<h3 id="参考文献">参考文献</h3>
<p><a href="https://www.chip37.com/scp/CD4066" target="_blank" rel="noopener noreffer">https://www.chip37.com/scp/CD4066</a></p>
<p><a href="http://www.elecfans.com/dianzichangshi/20171209598886_a.html" target="_blank" rel="noopener noreffer">http://www.elecfans.com/dianzichangshi/20171209598886_a.html</a></p>
<h3 id="datasheet">datasheet</h3>
<p><a href="https://github.com/leeshy-tech/Electronic-Design/tree/main/analog_switches" target="_blank" rel="noopener noreffer">https://github.com/leeshy-tech/Electronic-Design/tree/main/analog_switches</a></p>
]]></description>
</item>
<item>
    <title>鸿蒙开发笔记——Ability</title>
    <link>https://leeshy-tech.github.io/harmonyos_ability/</link>
    <pubDate>Tue, 08 Feb 2022 21:26:06 &#43;0800</pubDate><author>saili@bupt.edu.cn (Leeshy)</author><guid>https://leeshy-tech.github.io/harmonyos_ability/</guid>
    <description><![CDATA[<h1 id="ability">Ability</h1>
<div class="details admonition quote open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-quote-right fa-fw"></i>HarmonyOS文档<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Ability是应用所具备能力的抽象，也是应用程序的重要组成部分。一个应用可以具备多种能力，HarmonyOS支持应用以Ability为单位进行部署。Ability可以分为FA（Feature Ability）和PA（Particle Ability）两种类型，每种类型为开发者提供了不同的模板，以便实现不同的业务功能。</div>
        </div>
    </div>
<p>总的来说，Ability是功能相似的内容的集合，这种划分便于应用的编程组织，FA提供与用户交互的能力，只包含PageAbility，PA没有可视化界面，包括ServiceAbility和DataAbility。</p>
<h2 id="配置">配置</h2>
<p>一个应用中所有的Ability必须在config.json中注册。</p>
<p>如果通过新建Ability来创建Ability，Studio会自动注册，不需要手动更改config.json。</p>
<p>但如果通过新建Java类来创建，则需要在config.json添加相关的配置信息。</p>
<p></p>
<p>同样，当删除Ability时，需要删除config.json中对应的配置信息，否则会出现一些问题。</p>
<h2 id="生命周期">生命周期</h2>
<p>PageAbility和ServiceAbility具有复杂的生命周期，创建、隐藏到后台、从后台呼出等等都会执行相关的生命周期函数，其中onStart方法最常用，当Ability创建时调用onStart方法，所以UI的绑定、按钮事件响应器等等都需要在onStart方法中实现。</p>
<p></p>
<h2 id="intent">Intent</h2>
<div class="details admonition quote open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-quote-right fa-fw"></i>HarmonyOS文档<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Intent是对象之间传递信息的载体。例如，当一个Ability需要启动另一个Ability时，或者一个AbilitySlice需要导航到另一个AbilitySlice时，可以通过Intent指定启动的目标同时携带相关数据。</div>
        </div>
    </div>
<p>Intent是页面跳转及传参的关键，他包括Operation与Parameters两个属性，不传参时只需要构造默认intent，例如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="n">btn1</span><span class="o">.</span><span class="na">setClickedListener</span><span class="o">(</span><span class="n">component</span> <span class="o">-&gt;</span> <span class="o">{</span>
 	<span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">();</span>
 	<span class="k">this</span><span class="o">.</span><span class="na">present</span><span class="o">(</span><span class="k">new</span> <span class="n">SecondAbilitySlice</span><span class="o">(),</span><span class="n">intent</span><span class="o">);</span>
 <span class="o">});</span>
</code></pre></div><p>参数通过Parameters来传递：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="n">btn1</span><span class="o">.</span><span class="na">setClickedListener</span><span class="o">(</span><span class="n">component</span> <span class="o">-&gt;</span> <span class="o">{</span>
     <span class="n">Intent</span> <span class="n">intent1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">();</span>
     <span class="n">intent1</span><span class="o">.</span><span class="na">setParam</span><span class="o">(</span><span class="s">&#34;productId&#34;</span><span class="o">,</span><span class="s">&#34;101&#34;</span><span class="o">);</span>
     <span class="k">this</span><span class="o">.</span><span class="na">present</span><span class="o">(</span><span class="k">new</span> <span class="n">SecondAbilitySlice</span><span class="o">(),</span><span class="n">intent1</span><span class="o">);</span>
 <span class="o">});</span>
</code></pre></div><p>通过设置Operation可以启动任意<strong>设备</strong>的任意<strong>应用</strong>的任意<strong>Ability</strong>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">();</span>
<span class="c1">// 通过Intent中的OperationBuilder类构造operation对象，指定设备标识（空串表示当前设备）、应用包名、Ability名称
</span><span class="c1"></span><span class="n">Operation</span> <span class="n">operation</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">.</span><span class="na">OperationBuilder</span><span class="o">()</span>
        <span class="o">.</span><span class="na">withDeviceId</span><span class="o">(</span><span class="s">&#34;&#34;</span><span class="o">)</span>
        <span class="o">.</span><span class="na">withBundleName</span><span class="o">(</span><span class="s">&#34;com.demoapp&#34;</span><span class="o">)</span>
        <span class="o">.</span><span class="na">withAbilityName</span><span class="o">(</span><span class="s">&#34;com.demoapp.FooAbility&#34;</span><span class="o">)</span>
        <span class="o">.</span><span class="na">build</span><span class="o">();</span>
<span class="c1">// 把operation设置到intent中
</span><span class="c1"></span><span class="n">intent</span><span class="o">.</span><span class="na">setOperation</span><span class="o">(</span><span class="n">operation</span><span class="o">);</span>
<span class="n">startAbility</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
</code></pre></div><h2 id="pageability">PageAbility</h2>
<p>一个PageAbility可以包含任意个AbilitySlice，默认展示的AbilitySlice是通过**setMainRoute()**方法来指定的。</p>
<h3 id="abilityslice">AbilitySlice</h3>
<p>AbilitySlice相当于一个页面，其显示的内容是通过组件来声明的，其组件加载⽀持两种⽅式：</p>
<ul>
<li>Java代码</li>
<li>xml布局文件</li>
</ul>
<p>在其onStart方法中通过 setUIContext 来加载视图组件，它有两个重载：</p>
<ul>
<li>setUIContext(int) : 通过布局⽂件的ID，加载resources/base/layout⽬录下的布局⽂件完成⻚⾯的渲染。</li>
<li>setUIContext(ComponentContainer) :通过加载⼀个使⽤Java代码创建的组件完成⻚⾯的渲染 。</li>
</ul>
<h2 id="serviceability">ServiceAbility</h2>
<div class="details admonition quote open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-quote-right fa-fw"></i>HarmonyOS文档<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">基于Service模板的Ability（以下简称“Service”）主要用于后台运行任务（如执行音乐播放、文件下载等），但不提供用户交互界面。Service可由其他应用或Ability启动，即使用户切换到其他应用，Service仍将在后台继续运行。</div>
        </div>
    </div>
<h3 id="前台service">前台Service</h3>
<p>一般情况下，Service都是在后台运行的，后台Service的优先级都是比较低的，当资源不足时，系统有可能回收正在运行的后台Service。</p>
<p>在一些场景下（如播放音乐），用户希望应用能够一直保持运行，此时就需要使用前台Service。前台Service会始终保持正在运行的图标在系统状态栏显示。</p>
<h2 id="dataability">DataAbility</h2>
<div class="details admonition quote open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-quote-right fa-fw"></i>HarmonyOS文档<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>使用Data模板的Ability（以下简称“Data”）有助于应用管理其自身和其他应用存储数据的访问，并提供与其他应用共享数据的方法。Data既可用于同设备不同应用的数据共享，也支持跨设备不同应用的数据共享。</p>
<p>数据的存放形式多样，可以是数据库，也可以是磁盘上的文件。Data对外提供对数据的增、删、改、查，以及打开文件等接口，这些接口的具体实现由开发者提供</p>
</div>
        </div>
    </div>
<h3 id="uri">URI</h3>
<p>URI用来标识一个具体的数据，例如数据库中的某个表或磁盘上的某个文件。格式如下：</p>
<p></p>
<ul>
<li>scheme：协议方案名，固定为“dataability”，代表Data Ability所使用的协议类型。</li>
<li>authority：设备ID。如果为跨设备场景，则为目标设备的ID；如果为本地设备场景，则不需要填写。</li>
<li>path：资源的路径信息，代表特定资源的位置信息。</li>
<li>query：查询参数。</li>
<li>fragment：可以用于指示要访问的子资源。</li>
</ul>
<p>URI示例：</p>
<ul>
<li>跨设备场景：dataability://<em>device_id</em>/<em>com.domainname.dataability.persondata</em>/<em>person</em>/<em>10</em></li>
<li>本地设备：dataability:///<em>com.domainname.dataability.persondata</em>/<em>person</em>/<em>10</em></li>
</ul>
<h3 id="数据操作">数据操作</h3>
<p>DataAbility可以对文件或数据库进行数据操纵，不同类型数据管理方式写法都不一样，详见文档的<strong>数据管理</strong>一栏：</p>
<p></p>
<h2 id="实践工程">实践工程</h2>
<p><a href="https://leeshy-tech.github.io/harmonyos_pagetopage/" target="_blank" rel="noopener noreffer">页面导航</a></p>
<p><a href="https://leeshy-tech.github.io/harmonyos_serviceability/" target="_blank" rel="noopener noreffer">ServiceAbility</a></p>
<p><a href="https://leeshy-tech.github.io/harmonyos_addressbook/" target="_blank" rel="noopener noreffer">电话簿</a></p>
<h2 id="结束语">结束语</h2>
<p>本文仅是对官方文档做一个简单的总结+个人理解，详细的内容还需参考官方文档。</p>
<h3 id="参考文献">参考文献</h3>
<p><a href="https://developer.harmonyos.com/cn/docs/documentation/doc-guides/document-outline-0000001064589184" target="_blank" rel="noopener noreffer">HarmonyOS——文档</a></p>
]]></description>
</item>
<item>
    <title>鸿蒙开发实践——电话簿</title>
    <link>https://leeshy-tech.github.io/harmonyos_addressbook/</link>
    <pubDate>Tue, 08 Feb 2022 21:12:06 &#43;0800</pubDate><author>saili@bupt.edu.cn (Leeshy)</author><guid>https://leeshy-tech.github.io/harmonyos_addressbook/</guid>
    <description><![CDATA[<h1 id="电话簿">电话簿</h1>
<h2 id="项目简介">项目简介</h2>
<h3 id="项目结构">项目结构</h3>
<pre tabindex="0"><code>├─ entry.src.main
	├─ com.example.address_book
        ├─slice
            ├─ UserAddSlice
            ├─ UserListSlice
            └─ MainAbilitySlice
        ├─ DataBaseAbility	
        ├─ MainAbility
        └─ MyApplication
	└─ resources.base.layout
        ├─ ability_main.xml
        ├─ user_add.xml
        └─ user_list.xml
</code></pre><h3 id="效果">效果</h3>
<p></p>
<h2 id="数据库结构">数据库结构</h2>
<ul>
<li>数据库UserStore：本地、关系型
<ul>
<li>表users
<ul>
<li>属性userId：int、主键、自增</li>
<li>属性userName：text、不为空</li>
<li>属性userTel：text、唯一</li>
<li>属性userAddr：text</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="mainabilityslice">MainAbilitySlice</h2>
<p>核心代码：</p>
<p><strong>MainAbilitySlice的onStart方法：</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="n">Button</span> <span class="n">btn1</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">findComponentById</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Id_btn1</span><span class="o">);</span>
<span class="n">btn1</span><span class="o">.</span><span class="na">setClickedListener</span><span class="o">(</span><span class="n">listener</span><span class="o">-&gt;</span><span class="n">present</span><span class="o">(</span><span class="k">new</span> <span class="n">UserAddSlice</span><span class="o">(),</span><span class="k">new</span> <span class="n">Intent</span><span class="o">()));</span>

<span class="n">Button</span> <span class="n">btn2</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">findComponentById</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Id_btn2</span><span class="o">);</span>
<span class="n">btn2</span><span class="o">.</span><span class="na">setClickedListener</span><span class="o">(</span><span class="n">listener</span><span class="o">-&gt;</span><span class="n">present</span><span class="o">(</span><span class="k">new</span> <span class="n">UserListSlice</span><span class="o">(),</span><span class="k">new</span> <span class="n">Intent</span><span class="o">()));</span>
</code></pre></div><p>执行简单的页面跳转。</p>
<h2 id="databaseability">DataBaseAbility</h2>
<p>核心代码：</p>
<p><strong>DataBaseAbility类：</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">private</span> <span class="n">RdbStore</span> <span class="n">rdbStore</span><span class="o">;</span>
<span class="kd">private</span> <span class="n">StoreConfig</span> <span class="n">config</span> <span class="o">=</span> <span class="n">StoreConfig</span><span class="o">.</span><span class="na">newDefaultConfig</span><span class="o">(</span><span class="s">&#34;UserStore.db&#34;</span><span class="o">);</span>
</code></pre></div><p>RdbStore对象：表示与数据库的连接，通过此对象可以完成对数据表中数据的CRUD操作
StoreConfig对象：关联数据⽂件配置(数据库)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">private</span> <span class="n">RdbOpenCallback</span> <span class="n">callback</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RdbOpenCallback</span><span class="o">()</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">RdbStore</span> <span class="n">rdbStore</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">//使⽤rdbStore对象执⾏SQL创建数据表
</span><span class="c1"></span>        <span class="n">rdbStore</span><span class="o">.</span><span class="na">executeSql</span><span class="o">(</span><span class="s">&#34;create table if not exists users(&#34;</span> <span class="o">+</span>
                <span class="s">&#34;userId integer primary key autoincrement,&#34;</span> <span class="o">+</span>
                <span class="s">&#34;userName text not null,&#34;</span> <span class="o">+</span>
                <span class="s">&#34;userTel text not null unique,&#34;</span> <span class="o">+</span>
                <span class="s">&#34;userAddr text)&#34;</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">};</span>
</code></pre></div><p>RdbOpenCallback.onCreate()：数据库创建时被回调，初始化，创建数据表users（当其不存在时）。</p>
<p><strong>DataBaseAbility类的onStart方法：</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">onStart</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">super</span><span class="o">.</span><span class="na">onStart</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
    <span class="n">HiLog</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">LABEL_LOG</span><span class="o">,</span> <span class="s">&#34;DataBaseAbility onStart&#34;</span><span class="o">);</span>

    <span class="c1">//初始化与数据库的连接
</span><span class="c1"></span>    <span class="n">DatabaseHelper</span> <span class="n">helper</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DatabaseHelper</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="n">rdbStore</span> <span class="o">=</span> <span class="n">helper</span><span class="o">.</span><span class="na">getRdbStore</span><span class="o">(</span><span class="n">config</span><span class="o">,</span><span class="n">1</span><span class="o">,</span><span class="n">callback</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div><p><strong>重写insert方法：</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">insert</span><span class="o">(</span><span class="n">Uri</span> <span class="n">uri</span><span class="o">,</span> <span class="n">ValuesBucket</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="o">-</span><span class="n">1</span><span class="o">;</span>
    <span class="n">String</span> <span class="n">path</span> <span class="o">=</span> <span class="n">uri</span><span class="o">.</span><span class="na">getLastPath</span><span class="o">();</span>
    <span class="k">if</span><span class="o">(</span><span class="s">&#34;users&#34;</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="n">path</span><span class="o">)){</span>
        <span class="n">i</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">rdbStore</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="s">&#34;users&#34;</span><span class="o">,</span><span class="n">value</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div><p><strong>重写query、delete、update方法：</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="kd">public</span> <span class="n">ResultSet</span> <span class="nf">query</span><span class="o">(</span><span class="n">Uri</span> <span class="n">uri</span><span class="o">,</span> <span class="n">String</span><span class="o">[]</span> <span class="n">columns</span><span class="o">,</span> <span class="n">DataAbilityPredicates</span> <span class="n">predicates</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">RdbPredicates</span> <span class="n">rdbPredicates</span> <span class="o">=</span> <span class="n">DataAbilityUtils</span><span class="o">.</span><span class="na">createRdbPredicates</span><span class="o">(</span><span class="n">predicates</span><span class="o">,</span> <span class="s">&#34;users&#34;</span><span class="o">);</span>
    <span class="n">ResultSet</span> <span class="n">resultSet</span> <span class="o">=</span> <span class="n">rdbStore</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="n">rdbPredicates</span><span class="o">,</span> <span class="n">columns</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">resultSet</span><span class="o">;</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kt">int</span> <span class="nf">delete</span><span class="o">(</span><span class="n">Uri</span> <span class="n">uri</span><span class="o">,</span> <span class="n">DataAbilityPredicates</span> <span class="n">predicates</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">RdbPredicates</span> <span class="n">rdbPredicates</span> <span class="o">=</span> <span class="n">DataAbilityUtils</span><span class="o">.</span><span class="na">createRdbPredicates</span><span class="o">(</span><span class="n">predicates</span><span class="o">,</span> <span class="s">&#34;users&#34;</span><span class="o">);</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">rdbStore</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">rdbPredicates</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kt">int</span> <span class="nf">update</span><span class="o">(</span><span class="n">Uri</span> <span class="n">uri</span><span class="o">,</span> <span class="n">ValuesBucket</span> <span class="n">value</span><span class="o">,</span> <span class="n">DataAbilityPredicates</span> <span class="n">predicates</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">RdbPredicates</span> <span class="n">rdbPredicates</span> <span class="o">=</span> <span class="n">DataAbilityUtils</span><span class="o">.</span><span class="na">createRdbPredicates</span><span class="o">(</span><span class="n">predicates</span><span class="o">,</span> <span class="s">&#34;users&#34;</span><span class="o">);</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">rdbStore</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">value</span><span class="o">,</span> <span class="n">rdbPredicates</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div><h2 id="useraddslice">UserAddSlice</h2>
<p>核心代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserAddSlice</span> <span class="kd">extends</span> <span class="n">AbilitySlice</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">DataAbilityHelper</span> <span class="n">dataAbilityHelper</span><span class="o">;</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onStart</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">onStart</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">setUIContent</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Layout_user_add</span><span class="o">);</span>
        <span class="n">dataAbilityHelper</span> <span class="o">=</span> <span class="n">DataAbilityHelper</span><span class="o">.</span><span class="na">creator</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="c1">//获取组件对象
</span><span class="c1"></span>        <span class="n">Button</span> <span class="n">btn_add</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">findComponentById</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Id_btn_add</span><span class="o">);</span>
        <span class="n">TextField</span> <span class="n">tf1</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextField</span><span class="o">)</span> <span class="n">findComponentById</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Id_textField1</span><span class="o">);</span>
        <span class="n">TextField</span> <span class="n">tf2</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextField</span><span class="o">)</span> <span class="n">findComponentById</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Id_textField2</span><span class="o">);</span>
        <span class="n">TextField</span> <span class="n">tf3</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextField</span><span class="o">)</span> <span class="n">findComponentById</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Id_textField3</span><span class="o">);</span>
        <span class="c1">//绑定事件监听器
</span><span class="c1"></span>        <span class="n">btn_add</span><span class="o">.</span><span class="na">setClickedListener</span><span class="o">(</span><span class="n">component</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="n">String</span> <span class="n">userName</span> <span class="o">=</span> <span class="n">tf1</span><span class="o">.</span><span class="na">getText</span><span class="o">();</span>
            <span class="n">String</span> <span class="n">userTel</span> <span class="o">=</span> <span class="n">tf2</span><span class="o">.</span><span class="na">getText</span><span class="o">();</span>
            <span class="n">String</span> <span class="n">userAddr</span> <span class="o">=</span> <span class="n">tf3</span><span class="o">.</span><span class="na">getText</span><span class="o">();</span>
            <span class="c1">//构造VB
</span><span class="c1"></span>            <span class="n">ValuesBucket</span> <span class="n">valuesBucket</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ValuesBucket</span><span class="o">();</span>
            <span class="n">valuesBucket</span><span class="o">.</span><span class="na">putString</span><span class="o">(</span><span class="s">&#34;userName&#34;</span><span class="o">,</span><span class="n">userName</span><span class="o">);</span>
            <span class="n">valuesBucket</span><span class="o">.</span><span class="na">putString</span><span class="o">(</span><span class="s">&#34;userTel&#34;</span><span class="o">,</span><span class="n">userTel</span><span class="o">);</span>
            <span class="n">valuesBucket</span><span class="o">.</span><span class="na">putString</span><span class="o">(</span><span class="s">&#34;userAddr&#34;</span><span class="o">,</span><span class="n">userAddr</span><span class="o">);</span>
            <span class="c1">//插入数据
</span><span class="c1"></span>            <span class="k">try</span><span class="o">{</span>
                <span class="n">Uri</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">Uri</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="s">&#34;dataability:///com.example.address_book.DataBaseAbility/users&#34;</span><span class="o">);</span>
                <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">dataAbilityHelper</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="n">uri</span><span class="o">,</span><span class="n">valuesBucket</span><span class="o">);</span>
                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------&gt;&gt;&gt;&gt;&gt;&gt;&#34;</span><span class="o">+</span><span class="n">i</span><span class="o">);</span>
            <span class="o">}</span><span class="k">catch</span> <span class="o">(</span><span class="n">DataAbilityRemoteException</span> <span class="n">e</span><span class="o">){</span>
                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">});</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><ul>
<li>
<p>数据库的相关操作要依靠dataAbilityHelper。</p>
</li>
<li>
<p>从TextField组件中获取输入的信息。</p>
</li>
<li>
<p>设置监听器，将获得的信息插入数据表。</p>
</li>
<li>
<p>插入数据通过ValuesBucket储存，指数据表的一行。</p>
</li>
</ul>
<h2 id="userlistslice">UserListSlice</h2>
<p>核心代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserListSlice</span> <span class="kd">extends</span> <span class="n">AbilitySlice</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">DataAbilityHelper</span> <span class="n">dataAbilityHelper</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onStart</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">onStart</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">setUIContent</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Layout_user_list</span><span class="o">);</span>

        <span class="n">Text</span> <span class="n">text</span> <span class="o">=</span> <span class="o">(</span><span class="n">Text</span><span class="o">)</span> <span class="n">findComponentById</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Id_infoText</span><span class="o">);</span>
        <span class="n">text</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&#34;&#34;</span><span class="o">);</span>
        <span class="n">dataAbilityHelper</span> <span class="o">=</span> <span class="n">DataAbilityHelper</span><span class="o">.</span><span class="na">creator</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="c1">//查询所有联系⼈信息
</span><span class="c1"></span>        <span class="n">Uri</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">Uri</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="s">&#34;dataability:///com.example.address_book.DataBaseAbility/users&#34;</span><span class="o">);</span>
        <span class="n">String</span><span class="o">[]</span> <span class="n">colums</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;userId&#34;</span><span class="o">,</span><span class="s">&#34;userName&#34;</span><span class="o">,</span><span class="s">&#34;userTel&#34;</span><span class="o">,</span><span class="s">&#34;userAddr&#34;</span><span class="o">};</span>
        <span class="n">DataAbilityPredicates</span> <span class="n">dataAbilityPredicates</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DataAbilityPredicates</span><span class="o">();</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="n">dataAbilityHelper</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="n">uri</span><span class="o">,</span><span class="n">colums</span><span class="o">,</span><span class="n">dataAbilityPredicates</span><span class="o">);</span>
            <span class="c1">//从rs中获取查询结果
</span><span class="c1"></span>            <span class="kt">int</span> <span class="n">rowCount</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getRowCount</span><span class="o">();</span>
            <span class="k">if</span><span class="o">(</span><span class="n">rowCount</span><span class="o">&gt;</span><span class="n">0</span><span class="o">){</span>
                <span class="n">rs</span><span class="o">.</span><span class="na">goToFirstRow</span><span class="o">();</span>
                <span class="k">do</span><span class="o">{</span>
                    <span class="kt">int</span> <span class="n">userId</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span> <span class="n">0</span><span class="o">);</span>
                    <span class="n">String</span> <span class="n">userName</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="n">1</span><span class="o">);</span>
                    <span class="n">String</span> <span class="n">userTel</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="n">2</span><span class="o">);</span>
                    <span class="n">String</span> <span class="n">userAddr</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="n">3</span><span class="o">);</span>
                    <span class="n">String</span> <span class="n">info</span> <span class="o">=</span> <span class="s">&#34; [&#34;</span><span class="o">+</span><span class="n">userId</span><span class="o">+</span><span class="s">&#34;,&#34;</span><span class="o">+</span><span class="n">userName</span><span class="o">+</span><span class="s">&#34;,&#34;</span><span class="o">+</span><span class="n">userTel</span><span class="o">+</span><span class="s">&#34;,&#34;</span><span class="o">+</span><span class="n">userAddr</span><span class="o">+</span><span class="s">&#34;]&#34;</span><span class="o">;</span>
                    <span class="n">text</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span> <span class="n">text</span><span class="o">.</span><span class="na">getText</span><span class="o">()+</span><span class="n">info</span> <span class="o">);</span>
                <span class="o">}</span><span class="k">while</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">goToNextRow</span><span class="o">());</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">DataAbilityRemoteException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><ul>
<li>通过调用查询接口来查询。</li>
<li>ResultSet为查询结果集，类似于指针，指向结果的第一行。</li>
</ul>
<h2 id="结束语">结束语</h2>
<h3 id="项目源码">项目源码</h3>
<p><a href="https://github.com/leeshy-tech/HarmonyOS_example/tree/main/address_book" target="_blank" rel="noopener noreffer">https://github.com/leeshy-tech/HarmonyOS_example/tree/main/address_book</a></p>
<h3 id="参考文献">参考文献</h3>
<p><a href="https://developer.harmonyos.com/cn/docs/documentation/doc-guides/database-relational-overview-0000000000030046" target="_blank" rel="noopener noreffer">HarmonyOS文档——关系型数据库</a></p>
<p><a href="https://www.bilibili.com/video/BV1DM4y1G7MN" target="_blank" rel="noopener noreffer">HarmonyOS 2.0应用开发实战教程丨锋迷商城项目</a></p>
]]></description>
</item>
<item>
    <title>鸿蒙开发实践——ServiceAbility</title>
    <link>https://leeshy-tech.github.io/harmonyos_serviceability/</link>
    <pubDate>Sat, 29 Jan 2022 21:38:06 &#43;0800</pubDate><author>saili@bupt.edu.cn (Leeshy)</author><guid>https://leeshy-tech.github.io/harmonyos_serviceability/</guid>
    <description><![CDATA[<h1 id="serviceability实践">ServiceAbility实践</h1>
<h2 id="项目简介">项目简介</h2>
<h3 id="项目结构">项目结构</h3>
<pre tabindex="0"><code>├─ entry.src.main
	├─ com.example.serviceability
        ├─slice
            └─ MainAbilitySlice
        ├─ MainAbility	
        ├─ MyService
        └─ MyApplication
	├─ resources.base.layout
        └─ ability_main.xml
    └─ config.json
</code></pre><h3 id="效果">效果</h3>
<p>按钮1开启MyService。</p>
<p>按钮2连接到MyService。</p>
<p>按钮3断开与MyService的连接。</p>
<p>按钮4关闭MyService。</p>
<p>服务运行时会在状态栏显示。</p>
<p>不同的点击顺序，命令行输出的提示信息不同。</p>
<h2 id="铺垫">铺垫</h2>
<p>在MyService里的每个生命周期函数里都加一句sout来显示各个方法执行的顺序。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyService</span> <span class="kd">extends</span> <span class="n">Ability</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">HiLogLabel</span> <span class="n">LABEL_LOG</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HiLogLabel</span><span class="o">(</span><span class="n">3</span><span class="o">,</span> <span class="n">0xD001100</span><span class="o">,</span> <span class="s">&#34;Demo&#34;</span><span class="o">);</span>

    <span class="c1">//在每个生命周期函数内加一句sout调试
</span><span class="c1"></span>    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onStart</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">onStart</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
        <span class="n">HiLog</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="n">LABEL_LOG</span><span class="o">,</span> <span class="s">&#34;MyService::onStart&#34;</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;--------------------onStart&#34;</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onBackground</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">onBackground</span><span class="o">();</span>
        <span class="n">HiLog</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">LABEL_LOG</span><span class="o">,</span> <span class="s">&#34;MyService::onBackground&#34;</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;--------------------onBackground&#34;</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onStop</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">onStop</span><span class="o">();</span>
        <span class="n">HiLog</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">LABEL_LOG</span><span class="o">,</span> <span class="s">&#34;MyService::onStop&#34;</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;--------------------onStop&#34;</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCommand</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">restart</span><span class="o">,</span> <span class="kt">int</span> <span class="n">startId</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;--------------------onCommand&#34;</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">IRemoteObject</span> <span class="nf">onConnect</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;--------------------onConnect&#34;</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="n">LocalRemoteObject</span><span class="o">()</span> <span class="o">{};</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onDisconnect</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;--------------------onDisconnect&#34;</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><h2 id="开启和关闭serviceability">开启和关闭ServiceAbility</h2>
<blockquote>
<p>此部分和”页面导航“里开启Ability的操作如出一辙，也就是说，我们只是在开启和关闭Ability，至于它是什么类型，无所谓。</p>
</blockquote>
<p>核心代码：</p>
<p>​	MainAbilitySlice的onStart方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="c1">//按钮1开启MyService
</span><span class="c1"></span><span class="n">Button</span> <span class="n">btn1</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">findComponentById</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Id_btn1</span><span class="o">);</span>
<span class="n">btn1</span><span class="o">.</span><span class="na">setClickedListener</span><span class="o">(</span><span class="n">component</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="n">Intent</span> <span class="n">intent1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">();</span>
    <span class="n">Operation</span> <span class="n">operation</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">.</span><span class="na">OperationBuilder</span><span class="o">()</span>
            <span class="o">.</span><span class="na">withDeviceId</span><span class="o">(</span><span class="s">&#34;&#34;</span><span class="o">)</span>
            <span class="o">.</span><span class="na">withBundleName</span><span class="o">(</span><span class="s">&#34;com.example.serviceability&#34;</span><span class="o">)</span>
            <span class="o">.</span><span class="na">withAbilityName</span><span class="o">(</span><span class="s">&#34;com.example.serviceability.MyService&#34;</span><span class="o">)</span>
            <span class="o">.</span><span class="na">build</span><span class="o">();</span>
    <span class="n">intent1</span><span class="o">.</span><span class="na">setOperation</span><span class="o">(</span><span class="n">operation</span><span class="o">);</span>
    <span class="k">this</span><span class="o">.</span><span class="na">startAbility</span><span class="o">(</span><span class="n">intent1</span><span class="o">);</span>
<span class="o">});</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="c1">//按钮4关闭MyService
</span><span class="c1"></span><span class="n">Button</span> <span class="n">btn4</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">findComponentById</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Id_btn4</span><span class="o">);</span>
<span class="n">btn4</span><span class="o">.</span><span class="na">setClickedListener</span><span class="o">(</span><span class="n">component</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="n">Intent</span> <span class="n">intent3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">();</span>
    <span class="n">Operation</span> <span class="n">operation</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">.</span><span class="na">OperationBuilder</span><span class="o">()</span>
            <span class="o">.</span><span class="na">withDeviceId</span><span class="o">(</span><span class="s">&#34;&#34;</span><span class="o">)</span>
            <span class="o">.</span><span class="na">withBundleName</span><span class="o">(</span><span class="s">&#34;com.example.serviceability&#34;</span><span class="o">)</span>
            <span class="o">.</span><span class="na">withAbilityName</span><span class="o">(</span><span class="s">&#34;com.example.serviceability.MyService&#34;</span><span class="o">)</span>
            <span class="o">.</span><span class="na">build</span><span class="o">();</span>
    <span class="n">intent3</span><span class="o">.</span><span class="na">setOperation</span><span class="o">(</span><span class="n">operation</span><span class="o">);</span>
    <span class="k">this</span><span class="o">.</span><span class="na">stopAbility</span><span class="o">(</span><span class="n">intent3</span><span class="o">);</span>
<span class="o">});</span>
</code></pre></div><ul>
<li>通过id获取Button对象，设置事件监听器。</li>
<li>调用<strong>startAbility</strong>和<strong>stopAbility</strong>方法，在intent对象的Operation属性里指定开启哪台<strong>设备</strong>的哪个<strong>应用</strong>的哪个<strong>Ability</strong>。</li>
</ul>
<h2 id="建立连接">建立连接</h2>
<p>核心代码：</p>
<p>​	MainAbilitySlice的onStart方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="c1">//按钮2连接到MyService
</span><span class="c1"></span><span class="n">Button</span> <span class="n">btn2</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">findComponentById</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Id_btn2</span><span class="o">);</span>

<span class="n">IAbilityConnection</span> <span class="n">connection</span> <span class="o">=</span> <span class="k">new</span> <span class="n">IAbilityConnection</span><span class="o">()</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onAbilityConnectDone</span><span class="o">(</span><span class="n">ElementName</span> <span class="n">elementName</span><span class="o">,</span> <span class="n">IRemoteObject</span> <span class="n">iRemoteObject</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;----------------------连接MyService成功&#34;</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onAbilityDisconnectDone</span><span class="o">(</span><span class="n">ElementName</span> <span class="n">elementName</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;----------------------连接MyService失败&#34;</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">};</span>

<span class="n">btn2</span><span class="o">.</span><span class="na">setClickedListener</span><span class="o">(</span><span class="n">component</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="n">Intent</span> <span class="n">intent2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">();</span>
    <span class="n">Operation</span> <span class="n">operation</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">.</span><span class="na">OperationBuilder</span><span class="o">()</span>
            <span class="o">.</span><span class="na">withDeviceId</span><span class="o">(</span><span class="s">&#34;&#34;</span><span class="o">)</span>
            <span class="o">.</span><span class="na">withBundleName</span><span class="o">(</span><span class="s">&#34;com.example.serviceability&#34;</span><span class="o">)</span>
            <span class="o">.</span><span class="na">withAbilityName</span><span class="o">(</span><span class="s">&#34;com.example.serviceability.MyService&#34;</span><span class="o">)</span>
            <span class="o">.</span><span class="na">build</span><span class="o">();</span>
    <span class="n">intent2</span><span class="o">.</span><span class="na">setOperation</span><span class="o">(</span><span class="n">operation</span><span class="o">);</span>
    <span class="k">this</span><span class="o">.</span><span class="na">connectAbility</span><span class="o">(</span><span class="n">intent2</span><span class="o">,</span><span class="n">connection</span><span class="o">);</span>
<span class="o">});</span>
</code></pre></div><ul>
<li>
<p>通过id获取Button对象，设置事件监听器。</p>
</li>
<li>
<p>新建连接对象，重写onAbilityConnectDone和onAbilityDisconnectDone方法，每个方法里都写一句sout用于调试。</p>
<ul>
<li>onAbilityConnectDone：连接成功建立后执行。</li>
<li>onAbilityDisconnectDone：连接建立失败后执行。</li>
</ul>
</li>
<li>
<p>调用connectAbility方法，传递intent和connect对象。</p>
</li>
</ul>
<p>​	MyService：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="nd">@Override</span>
<span class="kd">public</span> <span class="n">IRemoteObject</span> <span class="nf">onConnect</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;--------------------onConnect&#34;</span><span class="o">);</span>
    <span class="k">return</span> <span class="k">new</span> <span class="n">LocalRemoteObject</span><span class="o">()</span> <span class="o">{};</span>
<span class="o">}</span>
</code></pre></div><ul>
<li>注意返回语句，返回一个LocalRemoteObject对象。</li>
</ul>
<p>试图与Service建立连接时，触发onConnect方法，它返回一个LocalRemoteObject对象，在这个实例中它返回的是MyService这个Ability，触发回调函数onAbilityConnectDone或者onAbilityDisconnectDone。</p>
<h2 id="关闭连接">关闭连接</h2>
<p>核心代码：</p>
<p>MainAbilitySlice的onStart方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="c1">//按钮3断开与MyService的连接
</span><span class="c1"></span><span class="n">Button</span> <span class="n">btn3</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">findComponentById</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Id_btn3</span><span class="o">);</span>
<span class="n">btn3</span><span class="o">.</span><span class="na">setClickedListener</span><span class="o">(</span><span class="n">component</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="n">connection</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">disconnectAbility</span><span class="o">(</span><span class="n">connection</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">});</span>
</code></pre></div><ul>
<li>若connection对象存在，就调用<strong>disconnectAbility</strong>方法即可。</li>
</ul>
<h2 id="前台service">前台Service</h2>
<p>前台Service会始终保持正在运行的图标在系统状态栏显示。</p>
<p>核心代码：</p>
<p>MyService的onStart方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="c1">// 创建通知，其中1005为notificationId
</span><span class="c1"></span><span class="n">NotificationRequest</span> <span class="n">request</span> <span class="o">=</span> <span class="k">new</span> <span class="n">NotificationRequest</span><span class="o">(</span><span class="n">1005</span><span class="o">);</span>
<span class="n">NotificationRequest</span><span class="o">.</span><span class="na">NotificationNormalContent</span> <span class="n">content</span> <span class="o">=</span> <span class="k">new</span> <span class="n">NotificationRequest</span><span class="o">.</span><span class="na">NotificationNormalContent</span><span class="o">();</span>
<span class="n">content</span><span class="o">.</span><span class="na">setTitle</span><span class="o">(</span><span class="s">&#34;title&#34;</span><span class="o">).</span><span class="na">setText</span><span class="o">(</span><span class="s">&#34;text&#34;</span><span class="o">);</span>
<span class="n">NotificationRequest</span><span class="o">.</span><span class="na">NotificationContent</span> <span class="n">notificationContent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">NotificationRequest</span><span class="o">.</span><span class="na">NotificationContent</span><span class="o">(</span><span class="n">content</span><span class="o">);</span>
<span class="n">request</span><span class="o">.</span><span class="na">setContent</span><span class="o">(</span><span class="n">notificationContent</span><span class="o">);</span>

<span class="c1">// 绑定通知，1005为创建通知时传入的notificationId
</span><span class="c1"></span><span class="n">keepBackgroundRunning</span><span class="o">(</span><span class="n">1005</span><span class="o">,</span> <span class="n">request</span><span class="o">);</span>
</code></pre></div><p>这段进行一个简单的Ctrl+C、V就行，注意以下几个点：</p>
<ul>
<li>
<p>1005这个notificationId不能与其他的服务重复</p>
</li>
<li>
<p>title和text在图中对应：</p>
<p></p>
</li>
</ul>
<p>config.json中还要申请常驻后台权限：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="s2">&#34;reqPermissions&#34;</span><span class="err">:</span> <span class="p">[</span>
  <span class="p">{</span><span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;ohos.permission.KEEP_BACKGROUND_RUNNING&#34;</span><span class="p">}</span>
<span class="p">]</span>
</code></pre></div><p>位置如图所示：</p>
<p></p>
<h2 id="生命周期分析">生命周期分析</h2>
<p>整个执行过程如图所示：</p>
<p></p>
<ul>
<li>
<p>启动：</p>
<ul>
<li>
<p>若MyService已建立，执行onCommand。</p>
<p></p>
</li>
<li>
<p>若未建立，执行onStart和onCommand。</p>
<p></p>
</li>
</ul>
</li>
<li>
<p>连接：</p>
<ul>
<li>
<p>若MyService已建立，则执行onConnect。</p>
<p></p>
</li>
<li>
<p>若未建立，则执行onStart和onConnect（红字忽略）。</p>
<p></p>
</li>
</ul>
</li>
<li>
<p>断开连接：当连接存在，且</p>
<ul>
<li>
<p>MyService是手动创建的，不是由连接唤起的，只执行onDisconnect</p>
<p></p>
</li>
<li>
<p>MyService是由该连接唤起的，执行onDisconnect、onBackground、onStop。</p>
<p></p>
</li>
</ul>
</li>
<li>
<p>关闭：当MyService没有被连接时，才能关闭，执行onBackground和onStop。</p>
<p></p>
</li>
</ul>
<h2 id="结束语">结束语</h2>
<h3 id="项目源码">项目源码</h3>
<p><a href="https://github.com/leeshy-tech/HarmonyOS_example/tree/main/ServiceAbility" target="_blank" rel="noopener noreffer">https://github.com/leeshy-tech/HarmonyOS_example/tree/main/ServiceAbility</a></p>
<h3 id="参考文献">参考文献</h3>
<p><a href="https://www.bilibili.com/video/BV1DM4y1G7MN" target="_blank" rel="noopener noreffer">HarmonyOS 2.0应用开发实战教程丨锋迷商城项目</a></p>
<p><a href="https://developer.harmonyos.com/cn/docs/documentation/doc-guides/ability-service-concept-0000000000044457" target="_blank" rel="noopener noreffer">HarmonyOS文档——ServiceAbility</a></p>
]]></description>
</item>
<item>
    <title>鸿蒙开发实践——页面导航</title>
    <link>https://leeshy-tech.github.io/harmonyos_pagetopage/</link>
    <pubDate>Fri, 28 Jan 2022 23:32:06 &#43;0800</pubDate><author>saili@bupt.edu.cn (Leeshy)</author><guid>https://leeshy-tech.github.io/harmonyos_pagetopage/</guid>
    <description><![CDATA[<h1 id="页面导航">页面导航</h1>
<h2 id="项目简介">项目简介</h2>
<h3 id="项目结构">项目结构</h3>
<pre tabindex="0"><code>├─ entry.src.main
	├─ com.example.page_to_page
        ├─slice
            ├─ AnotherAbilitySlice
            ├─ MainAbilitySlice
            └─ SecondAbilitySlice
        ├─ AnotherAbility	
        ├─ MainAbility
        └─ MyApplication
	└─ resources.base.layout
        ├─ ability_another.xml
        ├─ ability_main.xml
        └─ ability_second.xml
</code></pre><h3 id="效果">效果</h3>
<p>点击按钮一，从MainAbilitySlice跳转到SecondAbilitySlice。</p>
<p>点击按钮二，从MainAbilitySlice跳转到SecondAbilitySlice，并传递参数字符串。</p>
<p>点击按钮三，从MainAbility的MainAbilitySlice跳转到AnotherAbility的AnotherAbilitySlice。</p>
<p></p>
<h2 id="intent">intent</h2>
<blockquote>
<p><a href="https://developer.harmonyos.com/cn/docs/documentation/doc-guides/ability-intent-0000000000038799" target="_blank" rel="noopener noreffer">HarmonyOS文档——intent</a></p>
</blockquote>
<p>intent是对象之间传递信息的载体，Slice之间的导航、传参以及Ability之间的导航都是基于intent。Intent的构成元素包括Operation与Parameters。Operation是执行的操作，Parameters则是携带的参数。</p>
<h2 id="slice间导航">Slice间导航</h2>
<p>核心代码：</p>
<p>MainAbilitySlice的onStart方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="n">Button</span> <span class="n">btn1</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">findComponentById</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Id_btn1</span><span class="o">);</span>
<span class="n">btn1</span><span class="o">.</span><span class="na">setClickedListener</span><span class="o">(</span><span class="n">listener</span><span class="o">-&gt;</span><span class="n">present</span><span class="o">(</span><span class="k">new</span> <span class="n">SecondAbilitySlice</span><span class="o">(),</span><span class="k">new</span> <span class="n">Intent</span><span class="o">()));</span>
</code></pre></div><ul>
<li>通过id获取按钮对象。</li>
<li>给按钮绑定事件监听器，执行present方法。</li>
<li>这里只是导航，没有其他操作，所以传递一个默认intent即可。</li>
</ul>
<h2 id="slice间传参">Slice间传参</h2>
<p>核心代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="n">Button</span> <span class="n">btn2</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">findComponentById</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Id_btn2</span><span class="o">);</span>
<span class="n">btn2</span><span class="o">.</span><span class="na">setClickedListener</span><span class="o">(</span><span class="n">listener</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="n">Intent</span> <span class="n">intent1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">();</span>
    <span class="n">intent1</span><span class="o">.</span><span class="na">setParam</span><span class="o">(</span><span class="s">&#34;my_string&#34;</span><span class="o">,</span><span class="s">&#34;从MainAbilitySlice传参&#34;</span><span class="o">);</span>
    <span class="k">this</span><span class="o">.</span><span class="na">present</span><span class="o">(</span><span class="k">new</span> <span class="n">SecondAbilitySlice</span><span class="o">(),</span><span class="n">intent1</span><span class="o">);</span>
<span class="o">});</span>
</code></pre></div><p>跟导航部分思路相同。</p>
<p>传参的关键是构造intent对象的Parameters属性，使用setParam方法存储键值对。setParam方法有很多重载，包括int，string等等，但是没有对象类型，也就是传参不能传对象。</p>
<h2 id="pageability间导航">PageAbility间导航</h2>
<p>核心代码：</p>
<p>MainAbilitySlice类的onStart方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="n">Button</span> <span class="n">btn3</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">findComponentById</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Id_btn3</span><span class="o">);</span>
<span class="n">btn3</span><span class="o">.</span><span class="na">setClickedListener</span><span class="o">(</span><span class="n">listener</span> <span class="o">-&gt;</span> <span class="n">navigateToAnotherPage</span><span class="o">(</span><span class="n">listener</span><span class="o">));</span>
</code></pre></div><p>设置监听器的逻辑相同，不过这次我们让监听器执行我们的自定义函数navigateToAnotherPage。</p>
<p>MainAbilitySlice类新增:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">navigateToAnotherPage</span><span class="o">(</span><span class="n">Component</span> <span class="n">component</span><span class="o">){</span>
        <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">();</span>
        <span class="n">Operation</span> <span class="n">operation</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">.</span><span class="na">OperationBuilder</span><span class="o">()</span>
                <span class="o">.</span><span class="na">withDeviceId</span><span class="o">(</span><span class="s">&#34;&#34;</span><span class="o">)</span>						<span class="c1">//空字符串为本机
</span><span class="c1"></span>                <span class="o">.</span><span class="na">withBundleName</span><span class="o">(</span><span class="s">&#34;com.example.page_to_page&#34;</span><span class="o">)</span><span class="c1">//本应用的标识
</span><span class="c1"></span>                <span class="o">.</span><span class="na">withAbilityName</span><span class="o">(</span><span class="s">&#34;com.example.page_to_page.AnotherAbility&#34;</span><span class="o">)</span><span class="c1">//想启动的Ability
</span><span class="c1"></span>                <span class="o">.</span><span class="na">build</span><span class="o">();</span>

        <span class="n">intent</span><span class="o">.</span><span class="na">setOperation</span><span class="o">(</span><span class="n">operation</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">startAbility</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre></div><ul>
<li>使用OperationBuilder构建一个Operation，设置给intent。</li>
<li>将intent传给监听器</li>
</ul>
<p>页面跳转的核心是intent对象的Operation属性，这里构建Operation有三个参数DeviceId、BundleName、AbilityName，因为鸿蒙可以启动任意设备的任意应用的任意Ability，可能这就是万物互联吧。</p>
<h2 id="结束语">结束语</h2>
<h3 id="项目源码">项目源码</h3>
<p><a href="https://github.com/leeshy-tech/HarmonyOS_example/tree/main/page_to_page" target="_blank" rel="noopener noreffer">https://github.com/leeshy-tech/HarmonyOS_example/tree/main/page_to_page</a></p>
<h3 id="参考文献">参考文献</h3>
<p><a href="https://www.bilibili.com/video/BV1DM4y1G7MN" target="_blank" rel="noopener noreffer">HarmonyOS 2.0应用开发实战教程丨锋迷商城项目</a></p>
<p><a href="https://developer.harmonyos.com/cn/docs/documentation/doc-guides/ability-intent-0000000000038799" target="_blank" rel="noopener noreffer">HarmonyOS文档——intent</a></p>
]]></description>
</item>
<item>
    <title>鸿蒙开发笔记——开发工具DevEco Studio</title>
    <link>https://leeshy-tech.github.io/harmonyos_studioconfig/</link>
    <pubDate>Fri, 28 Jan 2022 17:21:06 &#43;0800</pubDate><author>saili@bupt.edu.cn (Leeshy)</author><guid>https://leeshy-tech.github.io/harmonyos_studioconfig/</guid>
    <description><![CDATA[<h1 id="deveco-studio">DevEco Studio</h1>
<blockquote>
<p>HUAWEI DevEco Studio（获取工具请<a href="https://developer.harmonyos.com/cn/develop/deveco-studio" target="_blank" rel="noopener noreffer">点击链接下载</a>，以下简称DevEco Studio）是基于IntelliJ IDEA Community开源版本打造，面向华为终端全场景多设备的一站式集成开发环境（IDE），为开发者提供工程模板创建、开发、编译、调试、发布等E2E的HarmonyOS应用/服务开发</p>
</blockquote>
<h2 id="配置">配置</h2>
<p>DevEco是基于IDEA打造的，所以二者非常相似，有些配置不会的话可以直接google IDEA的相关配置。</p>
<h3 id="界面风格">界面风格</h3>
<blockquote>
<p>将界面风格改为暗黑模式</p>
</blockquote>
<ul>
<li>
<p>打开设置：file&gt;settings</p>
</li>
<li>
<p>Appearance &amp; Behavior &gt; Appearance</p>
</li>
<li>
<p>Theme：改为Darcula，点击OK。</p>
<p></p>
</li>
</ul>
<h3 id="字体">字体</h3>
<ul>
<li>
<p>打开设置：file&gt;settings</p>
</li>
<li>
<p>Editor &gt; Font</p>
</li>
<li>
<p>Font：字体风格，我个人比较喜欢Inconsolata ; Size：字号 ; Line height：行距</p>
</li>
</ul>
<p></p>
<h3 id="注释颜色">注释颜色</h3>
<blockquote>
<p>初始的注释颜色非常浅，还是灰色，所以想调成亮一点的绿色。</p>
</blockquote>
<ul>
<li>
<p>打开设置：file&gt;settings</p>
</li>
<li>
<p>Editor &gt; Color Scheme &gt; Language Default</p>
</li>
<li>
<p>点开Comments，其中Block comment是块注释，Line comment是行注释，尽量二者颜色统一吧，颜色栏是可以复制的。</p>
</li>
</ul>
<p></p>
<h3 id="输入联想大小写不敏感">输入联想——大小写不敏感</h3>
<blockquote>
<p>初始的输入联想是大小写敏感的，Str才能补全成String，设置大小写不敏感，使str也能补全成String。</p>
</blockquote>
<ul>
<li>打开设置：file&gt;settings</li>
<li>Editor &gt; General &gt; Code Completion</li>
<li>去掉右侧Match case的勾</li>
</ul>
<p></p>
<p>效果如下：</p>
<p></p>
<h3 id="自动引包优化">自动引包优化</h3>
<ul>
<li>
<p>打开设置：file&gt;settings</p>
</li>
<li>
<p>Editor &gt; General &gt; Auto import</p>
</li>
<li>
<p>在右侧勾上如图的两句话。</p>
<p></p>
</li>
</ul>
<h3 id="汉化">汉化</h3>
<blockquote>
<p>编辑器设中文其实意义不大，汉化部分很少，都是一些基础的单词，但是我看到中文有一种莫名的安心感，所以还是汉化了。</p>
</blockquote>
<ul>
<li>打开设置：file&gt;settings</li>
<li>Plugins</li>
<li>搜索chinese，在installed里找到Chinese (Simplified) ，点击enable。</li>
<li>注意你会在Marketplace里找到Chinese (Simplified) Language Pack，它是IDEA的插件，适配效果没有内置的好。</li>
</ul>
<p></p>
<h2 id="项目结构">项目结构</h2>
<h2 id="调试方法">调试方法</h2>
<p>鸿蒙项目有两种调试方式：previewer和在设备运行</p>
<h4 id="previewer">Previewer</h4>
<p>previewer本质上是个页面预览器，预览的页面是工作区前台的Page。位置在：</p>
<p></p>
<h4 id="在设备运行">在设备运行</h4>
<p>设备有很多种，本地模拟器、远程模拟器、远程真机等等（<a href="https://developer.harmonyos.com/cn/docs/documentation/doc-guides/run_simulator-0000001053303709" target="_blank" rel="noopener noreffer">细节可以看官方文档</a>），都是将整个项目完整的打包成应用在设备上运行。推荐使用远程模拟器，因为本地模拟器会占用相当大一部分的本机资源。在右上角打开设备管理器即可进行管理。</p>
<p></p>
<h3 id="选择调试方式">选择调试方式</h3>
<p>设备：不管是远程还是本地，使用上都会有一定的卡顿，并且项目具有默认显示页面，调试非默认页面时，需要保证跳转逻辑等等无误。</p>
<p>预览器：工作区打开什么文件就默认预览什么文件，不需要考虑其他页面或者Ability的逻辑，但是，预览器是高度阉割的，某些逻辑不能很好的在预览器运行，比如我昨天遇到一个报错`[ClassCastException: java.lang.Object cannot be cast to java.lang.String，在预览器中运行就会报这个错误无法启动预览器，但是在设备中运行就正常。所以要灵活选择调试方式。当然，不提供页面服务的Ability的肯定要在设备上测试。</p>
<h2 id="结束语">结束语</h2>
<h3 id="参考文献">参考文献</h3>
]]></description>
</item>
<item>
    <title>程序报错总结——HarmonyOS</title>
    <link>https://leeshy-tech.github.io/harmonyos_application_error/</link>
    <pubDate>Thu, 27 Jan 2022 22:27:06 &#43;0800</pubDate><author>saili@bupt.edu.cn (Leeshy)</author><guid>https://leeshy-tech.github.io/harmonyos_application_error/</guid>
    <description><![CDATA[<h3 id="1">1</h3>
<div class="details admonition bug open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-bug fa-fw"></i>Bug<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">不可转换的类型；无法将 &lsquo;ohos.agp.components.Component&rsquo; 转换为 &lsquo;ohos.ai.cv.text.Text&rsquo;</div>
        </div>
    </div>
<p>原因：使用Tab键补全Text时，Studio自动引库引到了错误的库<code>import ohos.ai.cv.text.Text;</code>，实际应当是<code>import ohos.agp.components.Text;</code>。</p>
<p></p>
<h3 id="2">2</h3>
<div class="details admonition bug open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-bug fa-fw"></i>Bug<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">java.lang.NullPointerException: Attempt to invoke virtual method &lsquo;void ohos.agp.components.Button.setClickedListener(ohos.agp.components.Component$ClickedListener)&rsquo; on a null object reference</div>
        </div>
    </div>
<p>原因：在写xml文件时，误把注释写成了//，应该是<code>&lt;!-- --&gt;</code>。这里它不会直接报错，而是说我获得的按键对象为空，说明xml构建出了问题。</p>
<p></p>
]]></description>
</item>
<item>
    <title>论文笔记——On Scalability of SDN</title>
    <link>https://leeshy-tech.github.io/on_scalability_of_sdn_note/</link>
    <pubDate>Tue, 18 Jan 2022 23:09:06 &#43;0800</pubDate><author>saili@bupt.edu.cn (Leeshy)</author><guid>https://leeshy-tech.github.io/on_scalability_of_sdn_note/</guid>
    <description><![CDATA[<h2 id="论文概况">论文概况</h2>
<p><a href="https://ieeexplore.ieee.org/abstract/document/6461198" target="_blank" rel="noopener noreffer">https://ieeexplore.ieee.org/abstract/document/6461198</a><br>
IEEE Communications Magazine  <br>
Volume 51 Issue 2</p>
<h2 id="摘要">摘要</h2>
<p>在本文中，我们解构了软件定义网络中的可扩展性问题，并认为它们不是SDN所独有的。我们探讨了在不同环境中经常出现的问题，讨论了SDN设计空间中可扩展性的权衡，并介绍了一些关于SDN可扩展性的最新研究。此外，我们还列举了在可扩展性方面的重要机遇和挑战。</p>
<h2 id="引言">引言</h2>
<p>普遍认为SDN中的控制是集中的，这导致了对SDN可伸缩性和弹性的关注。毕竟，无论控制器的能力如何，中央控制器都不会随着网络的增长而扩展(增加交换机、流量、带宽等的数量)，并且在提供相同的服务保证的同时也无法处理所有传入的请求。此外，由于大多数早期的SDN提议都是基于流的，额外的流启动延迟成为一个问题。  <br>
我们认为SDN的可扩展性没有固有的瓶颈;我们认为这些可扩展性限制并不局限于SDN;传统的控制协议设计也面临着同样的挑战。虽然这并没有解决这些问题，但这表明我们在SDN中不需要比在传统网络中更担心可扩展性。</p>
<h2 id="sdn中可扩展性的根源">SDN中可扩展性的根源</h2>
<p>SDN与传统数据网络的根本区别在于控制与转发平面的分离。这种解耦导致了一些有趣的特性。  <br>
然而，这种解耦也有它自己的陷阱。在这两个平面之间定义一个标准的API是绝对重要的。从技术上讲，这个API应该能够处理各种体系结构的需求，并且应该能够促进这两个平面的独立演化。此外，所有或大多数交换机供应商应该采用相同的标准API，以使其有用；否则，网络将与特定的供应商绑定，会阻碍网络的快速变化和创新。将传统的本地控制功能移动到远程控制器可能会导致新的瓶颈。它还可能导致信令开销。  <br>
在接下来的内容中，我们首先讨论SDN控制器的可扩展性，概述为什么它一直受到关注，以及最近在这个领域的工作。然后，我们回顾一些其他经常提到的SDN可扩展性问题，包括流程设置开销和故障恢复能力。我们认为，尽管这些问题不是SDN特有的，但它们可以通过另一种设计来缓解(其中一些设计现在很常见)。</p>
<h2 id="控制器可扩展性">控制器可扩展性</h2>
<p>一种可能的SDN设计是将所有的控制功能推到一个集中式控制器上。控制器有可能成为网络操作中的瓶颈，随着网络规模的增长，更多的事件和请求会被发送到控制器，并且在某个时刻，控制器无法处理所有传入的请求。缓解这种担忧的一种方法是在多核系统中提高并行性，并提高IO性能。第二种方法是减少转发到控制器的请求数量，比如DevoFlow通过底层网络约束，牺牲细粒度流级可见性（ fine-grained flow-level visibility）换来了可扩展性。<br>
或者，还可以将控制功能的状态和/或计算分配到多个控制器上。提供一个严格一致的集中视图可能会阻碍响应时间和吞吐量。在保持可用性和分区容差的同时实现强一致性并不总是可行的。因此，选择一个合适的一致性水平是SDN中一个重要的设计权衡。 <br>
有一些解决方案，我们可以物理地分布控制平面元素，同时保持网络范围的视图。例如，Onix就是一个分布式控制平台，它促进了分布式控制平面的实现。它为控制应用程序提供了一组通用api，以方便访问分布在Onix实例上的网络状态(NIB)。另一方面，HyperFlow在多个控制器实例之间同步网络状态，使控制应用程序(在每个控制器实例上运行)产生控制整个网络的错觉。这保持了在中央控制器上开发控制平面的简单性，同时减轻了与中央控制器相关的可伸缩性问题，尽管这是针对满足某些特性的一组更受限制的控制应用程序。<br>
Kandoo[9]采用了一种不同的方法来分配控制平面。它定义了一个操作范围，使具有不同要求的应用程序能够共存：本地作用域的应用程序（即，可以使用交换机的本地状态进行操作的应用程序）部署在数据路径附近，以处理频繁的请求并保护控制平面的其他部分免受负载。另一方面，根控制器负责需要网络范围状态的应用程序，同时也充当本地控制器之间需要的任何协调的中介。<br>
一个有趣的观察结果是，SDN中的控制平面可扩展性挑战（例如，收敛性和一致性要求）与传统网络设计中所面临的挑战并没有本质上的不同。SDN本身既不太可能消除控制平面设计的复杂性，也不太可能使其或多或少具有可扩展性。 <br>
与传统网络不同，在SDN中，我们不需要反复解决基本但具有挑战性的问题，如拓扑发现、状态分布和恢复力。</p>
<h2 id="其他sdn可扩展性问题">其他SDN可扩展性问题</h2>
<h3 id="流启动开销">流启动开销</h3>
<p>让我们回顾一下流设置过程来解释瓶颈，并展示一个好的设计如何可以避免它们：</p>
<ul>
<li>包到达但是没有匹配到流规则</li>
<li>交换机产生一个流请求给控制器</li>
<li>控制器返回一个新的流转发规则</li>
<li>交换机更新流表</li>
</ul>
<p>前三个步骤和最后一个步骤的性能部分取决于交换机能力和资源(管理CPU、内存等)【？这里为什么要说前三个和最后一个】。以及其软件堆栈的性能。第三步中的延迟是由控制器的资源以及控制程序的性能来决定。最后，交换机的FIB更新时间导致了完成流程设置过程的延迟。 <br>
目前支持OpenFlow的软交换机性能远好于硬件交换机，原因是交换机上缺乏资源（管理CPU），对交换机芯片组和管理CPU之间的高频通信的支持不足，以及不佳的软件实现。可以预见，FIB更新时间将成为开关侧流设置延迟的主要因素。
While we argue that controllers and, in the near future, switches would be able to sustain sufficient throughput with negligible latency for reactive flow setup, in the end the control logic determines the scalability of a reactive design. A control program installing an end-to-end path on a per-flow basis does not scale, because the per switch memory is fixed but the number of forwarding entries in the data path grows with the number of active flows in the network. However,  the control program may install aggregate rules matching a large number of micro-flows (thereby facing the same scalability challenges as a proactive design), or proactively install rules in the network core to provide end-to-end connectivity and identify quality of service (QoS) classes, while classifying and reactively labeling flows at the edge.  A viable solution to the scalability challenges of the proactive designs in the former class due to data path memory scarcity is proposed in DIFANE [5]; while the scalability  the latter class follows from the observation that the fanout of an edge switch and thus the number of flows initiated there is bounded (just add edge controllers as the network grows in size).  【没看懂】</p>
<h3 id="故障恢复">故障恢复</h3>
<p>早期的系统为单中心控制的设计树立了榜样，因此对故障的恢复能力一直是一个主要问题。一个状态同步的从控制器将足以从控制器故障中恢复，但一个网络分区将留下一半的网络无脑。在多控制器网络中，如果有适当的控制器发现机制，交换机总是可以发现一个存在于其分区中的控制器。因此，在一个可伸缩的发现机制下，控制器故障不会对SDN的可伸缩性构成挑战。 
响应于链路失效的收敛有五个步骤。交换机检测到变化。然后交换机通知控制器。在收到通知后，控制程序计算修复操作，并将更新推到受影响的数据路径元素，这些元素反过来更新它们的转发表。在传统网络中，链路故障通知会在整个网络中泛滥，而在SDN中，该信息直接发送到控制器。因此，SDN网络中的信息传播时延并不比传统网络差。另外，SDN的一个优点是，计算是在更有能力的控制机器上进行的，而不是在所有交换机的弱管理cpu上进行的，无论它们是否受到故障的影响。 <br>
请注意，上述参数建立在隐含的假设之上，即故障的交换机或链路不影响交换机-控制器通信信道。如果有一个出现故障的链路或交换机是控制网络本身的一部分，则需要首先修复控制网络本身。因此，在这种角落的情况下，收敛速度可能比传统网络要慢。<br>
总的来说，SDN中的故障恢复过程并不比传统网络中的更差。因此，存在类似的可伸缩性问题，并且在传统网络中用于最小化停机时间的相同技术也适用于SDN。</p>
<h2 id="不同的网络设置中的可伸缩性">不同的网络设置中的可伸缩性</h2>
<p>采用一种不同的方法，解释不同类型网络中的可伸缩性模式和陷阱。</p>
<h3 id="数据中心">数据中心</h3>
<p>一个典型的数据中心网络有数万个交换元件，并且可以快速增长。在该规模的任何网络中生成的控制事件的绝对数量足以使任何集中式控制器过载。解决这个问题的一种方法是主动在交换机上安装规则，在它们进入控制平面之前有效地消除大多数控制请求。当然，这里的成本是控制器精度和反应性的损失。</p>
<p>当应用程序需要精确的流量统计和/或响应性时，可以将应用程序部署在交换机附近。例如，只要最小化对全局状态的访问，就可以将频繁的事件委托给运行在终端主机上的进程。考虑到整个数据中心网络的处理资源可用性，可以使用像Kandoo[9]这样的解决方案达到任意可伸缩性级别。分布式控制器(如HyperFlow或Onix)也可以是数据中心网络的合理解决方案。考虑到这种网络中的低延迟，状态和流设置的同步延迟将是最小的，对于大多数应用程序来说是可以接受的。</p>
<h3 id="服务提供商网络">服务提供商网络</h3>
<p>通常，服务提供商网络没有数据中心网络那么多的交换机/路由器；然而，这种网络中的节点通常是在地理上分布的。这些网络的大直径加剧了控制器的可伸缩性问题、流设置和状态收敛延迟以及一致性要求。我们可以利用网络的物理分布将其划分为单独的区域；每个分区都可以由一个独立的控制器控制，这些控制器只能交换所需的状态变化事件，有效地向外部控制器隐藏了大部分事件。考虑到这种网络中固有的延迟，所有的控制应用程序都应该是容忍延迟的，并且有较弱的一致性要求。</p>
<p>除了高延迟外，服务提供商网络通常比其他网络有更多的流量。因此，这里也关注数据路径资源限制。流的聚合是一个简单的解决方案，它以控制中的粒度为代价。我们注意到，这些问题也存在于传统的网络中，而这并不是SDN所独有的。</p>
<h2 id="机遇和挑战">机遇和挑战</h2>
<p>传统上，网络的可伸缩性是基于性能指标来研究的，也就是说，当我们沿着给定的维度扩展网络时，特定的性能指标是如何变化的。在实践中，还有其他正交的方面深刻地影响系统如何适应增长。例如,可管理性(如何方便地管理网络,在大尺度状态下添加,删除,或修改网络元素)和功能可伸缩性(是否方便将新功能添加到网络)与网络可伸缩性、性能一样重要，不应被忽视。关于行为和编程抽象、测试和验证以及SDN可扩展性的初步结果表明，我们认为SDN在这一领域提供了一个重要的机遇。显然，在我们能够充分发挥SDN的潜力之前，我们在这些方面都面临着重大挑战。</p>
<h3 id="行为和编程抽象">行为和编程抽象</h3>
<h3 id="测试和验证">测试和验证</h3>
<h3 id="可延展性">可延展性</h3>
<h2 id="结论">结论</h2>
<p>自SDN引入以来，可伸缩性一直是一个主要问题。目前关于SDN可伸缩性的研究表明：</p>
<ul>
<li>这些担忧既不是由SDN引起的，也不是由SDN所独有的。</li>
<li>这些问题大多可以得到解决，而不会失去SDN的好处。</li>
</ul>
<p>在这个领域，通常被忽视的是SDN对网络增长的其他限制因素的影响，如网络规划和管理复杂性。软件定义的网络增加了一种灵活性，可以大规模地适应网络编程和管理。传统的网络在这一领域历来都失败过。最近在这个方向上的尝试非常有希望，尽管未来仍面临许多挑战。</p>
]]></description>
</item>
<item>
    <title>论文笔记——A Survey of SDN</title>
    <link>https://leeshy-tech.github.io/a_survey_of_sdn_note/</link>
    <pubDate>Tue, 11 Jan 2022 21:46:06 &#43;0800</pubDate><author>saili@bupt.edu.cn (Leeshy)</author><guid>https://leeshy-tech.github.io/a_survey_of_sdn_note/</guid>
    <description><![CDATA[<h2 id="论文概况">论文概况</h2>
<p><a href="https://ieeexplore.ieee.org/abstract/document/6739370" target="_blank" rel="noopener noreffer">https://ieeexplore.ieee.org/abstract/document/6739370</a> <br>
IEEE Communications Surveys &amp; Tutorials  <br>
Volume 16 Issue 3</p>
<h2 id="摘要">摘要</h2>
<p>本文综述了可编程网络的最新进展，重点介绍了SDN。我们提供了可编程网络的历史视角，从早期的想法到最近的发展。然后介绍了SDN网络的体系结构和OpenFlow标准，讨论了当前基于SDN的协议和服务的实现和测试的替代方案，考察了当前和未来的SDN应用，并探讨了基于SDN模式的有前景的研究方向。</p>
<h2 id="1-引言">1 引言</h2>
<p>传统网络出现的问题：网络管理和性能调优困难，网络僵化。
可编程网络具有革命性，比如软件定义网络，网络设备成为简单的包转发设备，可以通过开放的接口进行编程。
第二节：早期可编程网络 <br>
第三节：SDN及其体系结构，以及OpenFlow协议。  <br>
第四节：开发和测试SDN的平台和工具。<br>
第五节：在数据中心和无线网络的应用。 <br>
第六节：面临的挑战和未来发展的方向。</p>
<h2 id="2-早期可编程网络">2 早期可编程网络</h2>
<p>描述了一些SDN和OpenFlow概念的前身，在早期的一些项目中已经有了关于可编程网络和数控平面分离的思想。</p>
<h2 id="3-sdn体系结构">3 SDN体系结构</h2>
<p>路由器和交换机通常是封闭的系统，只有很少的提供给供应商的接口。适配新版本的协议（比如Ipv6）非常困难，更不用说部署全新的协议和服务。网络僵化效应主要是由于设备的数据和控制平面紧密耦合，新的app或功能的部署需要直接实现在物理设施中。解决网络僵化的一个手段是使用中间设备，比如CDN（内容交付网络）。<br>
软件定义网络将转发硬件和控制逻辑分离，可以更容易地部署新协议和应用程序。</p>
<h3 id="a-当前sdn架构">A 当前SDN架构</h3>
<p>目前有两种SDN架构：ForCES和OpenFlow      <br>
</p>
<ul>
<li>ForCES将单个设备中的控制元素与转发元素分开，意图实现在单一网络设备中将转发硬件与第三方控制相结合。它定义了两个逻辑实体，转发元素FE和控制元素CE，它们通过ForCES协议通信，FE负责使用底层硬件来提供每个数据包的处理。CE执行控制和信令功能。ForCES还有一个重要功能块LFB（逻辑功能块），它安装在FE上，通过CE进行控制，实现FE的配置和数据包处理。</li>
<li>OpenFlow完全将控制平面从网络设备上剥离，转发设备基于流表进行转发，流表控制着转发规则。没有匹配流表时按照“table-miss”流表项执行相应的动作，比如丢弃、转发给控制器。控制平面与转发平面通过OpenFlow协议进行通信，远程控制器可以添加、删除或更新交换机的流表项。</li>
<li>ForCES和OpenFlow的模型不同，但是可以实现相似的功能。</li>
<li>OpenFlow得到了各界的大力支持，以至于被认为是SDN的官方标准。</li>
</ul>
<h3 id="b-转发设备">B 转发设备</h3>
<p>底层网络中，转发设备有路由器、交换机、无线接入点等。但是在SDN中，控制逻辑和算法都由控制器维护，基本转发硬件均被称为switches——交换机。<br>
规则空间是OpenFlow可扩展性的瓶颈，在尊重网络策略和约束的同时，优化使用规则空间来服务于一定数量的流条目是一个具有挑战性和重要的课题。</p>
<h3 id="c-控制器">C 控制器</h3>
<p>单个控制器能够处理惊人数量的新流请求，并且应该能够管理除最大的网络之外的所有网络。<br>
交换机控制延迟对网络的整体行为有重大影响，因为每个交换机在从控制器收到插入流表中适当规则的消息之前不能转发数据。这个间隔可能会随着链路延迟而增加，并显著影响网络应用程序的性能。 <br>
控制建模对网络的可扩展性影响很大。 <br>
集中式和分布式：软件定义的网络可能具有集中式或分布式的控制平面。OpenFlow允许多个控制器连接到一台交换机上，这将允许备份控制器在出现故障时接管。软件定义的网络还可以具有一定程度的逻辑去中心化，具有多个逻辑控制器。<br>
粒度控制：传统网络的基本元素是包。在软件定义网络中，网络元素是远程控制的，开销是由数据平面和控制平面之间的通信引起的。控制器对每个包做决策会增加额外的延迟，对流的第一个包所做的决策可以应用于该流的所有后续包，通过将流分组可以进一步减少开销。
被动控制和主动控制：这部分没看懂 P1624。</p>
<h3 id="d-南向接口控制器交换机">D 南向接口：控制器——交换机</h3>
<p>OpenFlow本身就是控制器——交换机交互的一种实现。</p>
<h3 id="e-北向接口控制器服务">E 北向接口：控制器——服务</h3>
<p>目前还没有公认的针对北向交互的标准，而且它们更有可能在特定应用程序的特殊基础上实现。</p>
<h3 id="f-标准化工作">F 标准化工作</h3>
<h2 id="4-sdn开发工具">4 SDN开发工具</h2>
<h3 id="a-仿真和仿真工具">A 仿真和仿真工具</h3>
<p>mininet,NS-3</p>
<h3 id="b-可用软交换机平台">B 可用软交换机平台</h3>
<p></p>
<h3 id="c-实体交换机">C 实体交换机</h3>
<p>目前在商品网络硬件中实现的SDN主要技术是OpenFlow标准。<br>
</p>
<h3 id="d-可用控制器平台">D 可用控制器平台</h3>
<p><br>
其中有两个特殊用途的控制器：Flowvisor、RouteFlow <br>
Flowvisor：充当交换机和多个控制器之间的透明代理，它能够创建网络片，将每个片的控制委托给不同的控制器，促进了片之间的隔离。<br>
RouteFlow：它由一个OpenFlow控制器应用程序、一个独立的服务器和一个虚拟网络环境组成，它可以复制物理基础设施的连接并运行IP路由引擎。路由引擎根据所配置的路由协议(如OSPF、BGP)，将转发信息库(FIB)生成到LinuxIP表中。</p>
<h3 id="e-代码验证和调试">E 代码验证和调试</h3>
<p>NICE：自动化的测试工具，用于通过模型检查和符号执行来帮助发现OpenFlow程序中的bug。<br>
Anteater：试图检查数据平面中存在的网络不变量，如连通性或一致性。这种方法的主要优点是它与协议无关；它还将捕获由错误的交换机固件或与控制平面通信不一致而导致的错误。<br>
VeriFlow：进一步提出了一个驻留在控制器和转发元素之间的实时验证工具。能够停止在到达网络之前会导致异常行为的规则。 <br>
OFRewind：允许以不同的粒度记录网络事件（控制和数据），然后再回放以重现特定的场景，从而提供定位和排除导致网络异常的事件的机会。   <br>
ndb：为SDN实现了断点和数据包回溯。<br>
STS：是一个由软件定义的网络故障排除模拟器。它是用python编写的，并且依赖于POX。它模拟了给定网络中的设备，允许进行测试用例，并识别产生给定错误的输入集。</p>
<h2 id="5-sdn应用">5 SDN应用</h2>
<h3 id="a-企业网络">A 企业网络</h3>
<p>校园网也算是特殊的企业网络。适当的管理在企业环境中至关重要，SDN可以通过编程方式执行和调整网络策略，以及帮助监控网络活动和调整网络性能。使用SDN实现的中间设备包括NAT，防火墙，负载平衡器和网络访问控制。对于更复杂的中间设备，直接实现导致性能下降，可以使用SDN提供统一控制和管理。</p>
<h3 id="b-数据中心">B 数据中心</h3>
<p>在大规模数据中心中能源消耗有很重要的成本，ElasticTree是一种电源管理器，利用SDN来寻找满足当前流量条件的最小功率网络的子集。B4是谷歌提出的SDN概念应用于数据中心环境中的实际例子，它是一个连接谷歌全球数据中心的广域网。B4被证明是高效的，而且工作经验表明，控制平面到数据平面通信和硬件编程开销造成的瓶颈是今后工作中需要考虑的重要问题。</p>
<h3 id="c-基于基础设施的无线接入网">C 基于基础设施的无线接入网</h3>
<p>OpenRoads：设想了一种软件定义蜂窝网络。  <br>
Odin：在企业无线局域网环境中引入了可编程性，它在控制器上构建一个访问点抽象，将关联状态与物理访问点分离，实现主动移动管理和负载平衡。 <br>
OpenRadio：专注于部署可编程无线数据平面，在PHY和MAC层而不是第三层，提供灵活性，旨在提供一个模块化接口，能够处理使用不同协议的流量子集，基于决策平面和转发平面分离的思想，操作员可以表示由处理平面模块(如FFT模块、维特比解码等)组装而来的决策平面规则和相应的动作。</p>
<h3 id="d-光网络">D 光网络</h3>
<p>将SDN和OpenFlow标准应用于光传输网络的好处包括：提高光传输网络控制和管理灵活性，支持部署第三方管理和控制系统，以及通过利用虚拟化和SDN部署新的服务。   <br>
文献[88]-[93]</p>
<h3 id="e-家庭和小型企业">E 家庭和小型企业</h3>
<p>随着低成本网络设备的广泛可用性，这些环境变得越来越复杂和普遍，对更仔细的网络管理和更严格的安全性的需求也相应地增加了。但是，在每个家庭和办公室都有一个专门的网络管理员是不现实的。   <br>
Calvert建议将控制器作为“家庭网络数据记录器”，创建可用于故障排除或其他目的日志。  <br>
Feamster建议外包第三方专家，通过远程控制可编程交换机和分布式网络监控和推理算法，来检测可能的安全问题。   <br>
文献[94]-[97]</p>
<h2 id="5-研究所面临的挑战和未来的发展方向">5 研究所面临的挑战和未来的发展方向</h2>
<h3 id="a-控制器和交换机设计">A 控制器和交换机设计</h3>
<p>可扩展性、性能、鲁棒性、安全性
DIFANE：流被主动推到交换机上，试图减少向控制器的请求数量。   <br>
Devoflow：建议处理交换机中的短寿命流和控制器中的长寿流，以减少流设置延迟和控制器开销。   <br>
[28]：主张用一系列规则匹配记录来替换ASIC上的计数器，并在CPU中处理它们，以允许高效访问计数器。    <br>
FLARE：专注于“深度可编程网络”的新型网络节点模型，它为数据平面、控制平面以及它们之间的接口提供了可编程性。    <br>
为了提高可扩展性，特别是为了可靠性和鲁棒性，人们已经认识到逻辑集中的控制器必须是物理分布的。</p>
<h3 id="b-软件定义互联网">B 软件定义互联网</h3>
<p>目前许多关于SDN的工作都是在单个管理域的上下文中检查或提出解决方案。然而，那些管理本质上是分散的环境，比如互联网，需要一个逻辑分布的控制平面。</p>
<h3 id="c-控制器服务交互">C 控制器——服务交互</h3>
<p>目前南向接口定义的相当好，但是北向接口却没有统一的标准，一种可能的解释是，北向接口完全是在软件中定义的，而南向接口必须支持硬件实现。     <br>
如果我们认为控制器是一个“网络操作系统”，那么应该有一个明确定义的接口，应用程序可以访问底层硬件（交换机），与其他应用程序共存和交互，并利用系统服务（例如拓扑发现、转发），而不需要应用程序开发人员知道控制器的实现细节。 <br>
此外，北向的API应该允许应用程序对同一流应用不同的策略(例如，通过目的地进行转发和通过源IP进行监控)。</p>
<h3 id="d-虚拟化和云服务">D 虚拟化和云服务</h3>
<h3 id="e-以信息为中心的网络">E 以信息为中心的网络</h3>
<p>信息中心网络(ICN)是针对未来互联网架构提出的一种新的范式，它旨在提高内容交付的效率和内容可用性。他们的驱动动机是，当前的互联网是信息驱动的，但网络技术仍然专注于基于位置的寻址和主机对主机的通信的想法。通过提出一种处理命名数据而不是命名主机的体系结构，内容分发可以直接实现到网络结构中，而不是依赖于目前用于将内容映射到单个位置的复杂映射、可用性和安全机制。    <br>
ICN中信息处理和转发的分离与SDN中数据平面和控制平面的解耦相一致。然后，问题就变成了如何将ICN和SDN结合起来。</p>
<h3 id="f-异构网络支持">F 异构网络支持</h3>
<p>未来网络面临的一个主要挑战是资源的有效利用；在无线多跳自组网中尤其如此，因为可用的无线容量本质上是有限的。这是由于许多因素，包括共享物理介质的使用、无线信道损坏和受管理基础设施的缺乏。自组织网络缺乏专用资源，而且连接性的变化使容量共享变得困难。底层网络的异构特性（例如，物理介质、拓扑结构、稳定性）和节点（例如，缓冲区大小、功率限制、移动性）在考虑路由和资源分配时也增加了另一个重要的因素。   <br>
迄今为止的SDN技术，如OpenFlow，主要针对基于基础设施的网络。它们促进了一种不适合在无基础设施环境中出现的分散、中断和延迟级别的集中控制机制。虽然之前的工作已经研究了SDN在无线环境中的使用，但其范围主要集中在基于基础设施的部署。</p>
<h2 id="7-结束语">7 结束语</h2>
<p>在本文中，我们提供了一个可编程网络的概述，并在此背景下，考察了软件定义网络(SDN)的新兴领域。我们来看看可编程网络的历史，从早期的想法到最近的发展。我们特别详细描述了SDN体系结构以及OpenFlow[2]标准。我们介绍了当前的SDN实现和测试平台，并检查了基于SDN范式开发的网络服务和应用程序。最后，我们讨论了SDN所支持的未来发展方向，从支持异构网络到信息中心网络(ICN)。</p>
<h2 id="语句摘录">语句摘录</h2>
<blockquote>
<p>As a result, network management and performance tuning is quite challenging and thus error-prone.<br>
因此，网络管理和性能调优非常具有挑战性，所以很容易出错。</p>
</blockquote>
<blockquote>
<p>Because of its huge deployment base and the fact it is considered part of our society’s critical infrastructure (just like transportation and power grids), the Internet has become extremely difficult to evolve both in terms of its physical infrastructure as well as its protocols and performance.<br>
由于其庞大的部署基础，且被视为我们社会关键基础设施(就像交通和电网)的一部分，所以互联网在其物理基础设施、协议和性能方面的发展已经变得极其困难。</p>
</blockquote>
<blockquote>
<p>As SDN becomes more widely adopted and protocols such as OpenFlow are further defined, new solutions are proposed and new challenges arise.<br>
随着SDN被广泛采用，并且OpenFlow等协议被进一步定义，新的解决方案被提出，新的挑战出现.</p>
</blockquote>
<blockquote>
<p>The Internet has revolutionized the way we, as individuals and as a society, live, work, conduct business, socialize, get entertainment, etc. As a result, the Internet is now considered part of our society’s critical infrastructure much like the power, water, and transportation grids.<br>
互联网已经彻底改变了我们作为个人和社会、生活、工作、做生意、社交、获得娱乐等方面的方式。因此，互联网现在被认为是我们社会关键基础设施的一部分，就像电力、水和交通电网一样。</p>
</blockquote>
]]></description>
</item>
<item>
    <title>SDN自学习交换机工作原理分析</title>
    <link>https://leeshy-tech.github.io/simple_switch_analyse/</link>
    <pubDate>Mon, 10 Jan 2022 17:56:06 &#43;0800</pubDate><author>saili@bupt.edu.cn (Leeshy)</author><guid>https://leeshy-tech.github.io/simple_switch_analyse/</guid>
    <description><![CDATA[<h2 id="自学习交换机">自学习交换机</h2>
<p>交换机上电启动时，帧交换表为空，随着各主机间的通信，通过自学习算法自动逐渐建立帧交换表。帧交换表是mac地址和端口号的对应关系，交换机端口是固定的，连接的设备是可变的，所以只有建立起帧交换表之后才能明确某目的mac地址的数据包该向哪个端口转发。</p>
<p>SDN的自学习交换机跟传统交换机不一样的点有：</p>
<ol>
<li>帧交换表是由控制器来维护的，比如ryu里的数据结构：mac_to_port[dpid][mac] = port，控制器维护所有与之相连的交换机的帧交换表。</li>
<li>自学习的过程中可能会有流表的变化。</li>
</ol>
<h2 id="ping命令过程">ping命令过程</h2>
<p>ping命令使用ICMP传输协议，用于测试两主机之间的网络连通性。<br>
局域网ping命令的执行过程：<br>
网络模型为：h1  &mdash;-  s1  &mdash;-  h2，两台主机连接到同一个交换机。
假设h1 ping h2</p>
<ul>
<li>首先h1查询自己的mac地址表，若有h2对应的mac地址，就直接设为目的mac，否则发送一个ARP广播包，目的mac设为ff:ff:ff:ff。</li>
<li>交换机收到ARP后，如果交换机中有h2对应的mac地址，就返回给h1，否则向所有端口发送ARP广播。</li>
<li>h2收到ARP报文后，返回ARP应答报文，告诉h1自己的mac地址，同时学习到h1的mac地址。</li>
<li>h1收到应答后，学习到h2的mac地址，封装ICMP报文给h2。</li>
<li>h2收到报文后应答，ping完成。</li>
</ul>
<h2 id="实验分析">实验分析</h2>
<h3 id="实验内容">实验内容</h3>
<ul>
<li>通过ryu控制器实现一个SDN自学习交换机simple_switch.py，分析博客：<a href="http://localhost:1313/simple_switch_note/" target="_blank" rel="noopener noreffer">ryu源码解读——simple_switch.py</a>。</li>
<li>使用OVS搭建网络模型：h1  &mdash;-  s1  &mdash;-  h2，将s1连接到控制器。</li>
<li>h1 ping h2，观察PacketIn消息。</li>
<li>查看s1的流表变化。</li>
</ul>
<p>这里不用mininet平台搭建网络的原因是：mininet主机会定时检查与交换机的连接，导致出现很多的冗余PacketIn消息，不利于观察。</p>
<h3 id="实验结果">实验结果</h3>
<p><br>
当h1 ping h2时，出现3条PacketIn消息，之后再ping，不再出现PacketIn消息。<br>
使用<code>ovs-ofctl dump-flows s1</code>命令观察流表，结果如下：  <br>
<br>
执行完ping命令后多了两条流表。</p>
<h3 id="流程分析">流程分析</h3>
<p>日志的输出格式是：packet in &lt;交换机标号&gt; &lt;源mac&gt; &lt;目的mac&gt; &lt;输入端口&gt;<br>
h1：mac地址mac1 = 3e:3b:50:01:23:e6，连接到s1的1号端口。 <br>
h2：mac地址mac2 = d6:07:97:03:df:5b，连接到s1的2号端口。</p>
<ol>
<li>h1 ping h2，h1发送一个目的mac为ff:ff:ff:ff的ARP包，s1流表为空，发送PacketIn消息。</li>
<li>控制器学习到<code>mac1--端口1</code>，查找不到h2连接的端口，发送PacketOut消息指示s1广播这个ARP包。</li>
<li>s1广播，h2收到并学习到h1的mac地址，发送<code>&lt;src = mac2，dst = mac1&gt;</code>的ARP应答报文，s1流表为空，发送PacketIn消息。</li>
<li>控制器学习到<code>mac2--端口2</code>，查找到mac1的对应端口为1，此时下发一条流表<code>in_port=2,output:1</code>，发送PacketOut消息指示s1把这个应答报文转发到端口1。</li>
<li>h1收到应答报文，学习到h2的mac地址，发送<code>&lt;src = mac1，dst = mac2&gt;</code>的ICMP报文。</li>
<li>此时s1中只有一条流表<code>in_port=2,output:1</code>，仍然发送PacketIn消息。</li>
<li>控制器查找到mac2的对应端口为2，下发一条流表<code>in_port=1,output:2</code>，发送PacketOut消息指示s1把这个报文转发到端口2。</li>
<li>之后略</li>
</ol>
<p>所以，整个过程中一共上传了三次PacketIn消息，分别是<code>ma1 ff:ff:ff:ff 1</code>，<code>mac2 mac1 2</code>，<code>mac1 mac2 1</code>。<br>
过程结束s1中有两条流表，分别是<code>in_port=2,src=mac2,dst=mac1,action=output:1</code>,<code>in_port=1,src=mac1,dst=mac2,action=output:2</code>。 
有了这两条流表之后，s1完全按照流表转发，不会产生PacketIn消息和新的流表。</p>
<h2 id="结束语">结束语</h2>
<h3 id="总结">总结</h3>
<p>要始终用流表的思想看待整个过程，PacketIn消息产生的原因是没有匹配的流表。</p>
<h3 id="参考文献">参考文献</h3>
<p><a href="https://blog.51cto.com/wanicy/335207" target="_blank" rel="noopener noreffer">Ping过程 详解 </a><br>
<a href="http://localhost:1313/simple_switch_note/" target="_blank" rel="noopener noreffer">ryu源码解读——simple_switch.py</a></p>
]]></description>
</item>
</channel>
</rss>
