<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - Leeshy&#39;s Blog | To be humble</title>
        <link>https://leeshy-tech.github.io/posts/</link>
        <description>所有文章 | Leeshy&#39;s Blog | To be humble</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>saili@bupt.edu.cn (Leeshy)</managingEditor>
            <webMaster>saili@bupt.edu.cn (Leeshy)</webMaster><lastBuildDate>Mon, 07 Mar 2022 21:41:06 &#43;0800</lastBuildDate><atom:link href="https://leeshy-tech.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Ryu——安装</title>
    <link>https://leeshy-tech.github.io/ryu_install/</link>
    <pubDate>Mon, 07 Mar 2022 21:41:06 &#43;0800</pubDate><author>saili@bupt.edu.cn (Leeshy)</author><guid>https://leeshy-tech.github.io/ryu_install/</guid>
    <description><![CDATA[<h1 id="ryu安装">Ryu安装</h1>
<h2 id="安装git">安装git</h2>
<p><code>sudo apt install git</code></p>
<h2 id="安装python3">安装python3</h2>
<blockquote>
<p>时代变了，不装不行。</p>
</blockquote>
<ul>
<li>
<p>下载</p>
<p><code>sudo apt install python3</code></p>
</li>
<li>
<p>查看python3的位置和版本号，用于第四步</p>
<p><code>whereis python3</code></p>
</li>
<li>
<p>删除原来python2的软连接</p>
<p><code>sudo rm /usr/bin/python</code></p>
</li>
<li>
<p>建立新的软连接</p>
<p><code>sudo ln -s /usr/bin/python3.9 /usr/bin/python</code></p>
</li>
<li>
<p>查看版本</p>
<p><code>python --version</code></p>
</li>
</ul>
<h2 id="安装ryu">安装Ryu</h2>
<ul>
<li>
<p>更新pip</p>
<p><code>sudo pip install --upgrade pip</code></p>
</li>
<li>
<p>克隆源代码</p>
<p><code>git clone git://github.com/faucetsdn/ryu.git</code></p>
</li>
<li>
<p>进入ryu目录</p>
<p><code>cd ryu</code></p>
</li>
<li>
<p>安装依赖</p>
<p><code>sudo pip install -r tools/pip-requires</code></p>
</li>
<li>
<p>安装ryu</p>
<p><code>sudo python setup.py install</code></p>
</li>
</ul>
<h2 id="测试">测试</h2>
<ul>
<li>
<p>进入ryu/ryu/app目录</p>
<p><code>cd ryu/ryu/app</code></p>
</li>
<li>
<p>运行simple_switch.py</p>
<p><code>ryu-manager app/simple_switch.py</code></p>
<p>出现以下输出为正常：</p>
<pre tabindex="0"><code>loading app app/simple_switch.py
loading app ryu.controller.ofp_handler
instantiating app app/simple_switch.py of SimpleSwitch
instantiating app ryu.controller.ofp_handler of OFPHandler
</code></pre></li>
</ul>
<h2 id="参考文献">参考文献</h2>
<p><a href="https://blog.csdn.net/sexyluna/article/details/105740519" target="_blank" rel="noopener noreffer">Ubuntu将默认python版本改为python3</a></p>
<p><a href="https://github.com/leeshy-tech/ryu" target="_blank" rel="noopener noreffer">https://github.com/leeshy-tech/ryu</a></p>
]]></description>
</item>
<item>
    <title>mininet-wifi——安装</title>
    <link>https://leeshy-tech.github.io/mininet-wifi_install/</link>
    <pubDate>Mon, 07 Mar 2022 20:53:06 &#43;0800</pubDate><author>saili@bupt.edu.cn (Leeshy)</author><guid>https://leeshy-tech.github.io/mininet-wifi_install/</guid>
    <description><![CDATA[<h1 id="安装mininet-wifi">安装mininet-wifi</h1>
<p>mininet学了快半年了，还是安装七八次才能装上，人麻了，怒写一篇博客。平台：Ubuntu20.04。</p>
<h2 id="安装git">安装git</h2>
<p><code>sudo apt install git</code></p>
<h2 id="安装python3">安装python3</h2>
<p>mininet在python2和python3环境下都是能正常运行的，但是，apt中一些python2的包已经升级到3了，比如python-matplotlib，你不升级python3，mininet-wifi就会安装它，但是apt里又没有，只会一直报错。你再怎么更新源，也找不到这个玩意，因为它已经变成python3-matplotlib了。所以还是要安装python3。</p>
<ul>
<li>
<p>下载</p>
<p><code>sudo apt install python3</code></p>
</li>
<li>
<p>查看python3的位置和版本号，用于第四步</p>
<p><code>whereis python3</code></p>
</li>
<li>
<p>删除原来python2的软连接</p>
<p><code>sudo rm /usr/bin/python</code></p>
</li>
<li>
<p>建立新的软连接</p>
<p><code>sudo ln -s /usr/bin/python3.9 /usr/bin/python</code></p>
</li>
<li>
<p>查看版本</p>
<p><code>python --version</code></p>
</li>
</ul>
<h2 id="安装mininet-wifi-1">安装mininet-wifi</h2>
<h3 id="有梯子或者有git代理">有梯子，或者有git代理</h3>
<ul>
<li>
<p>克隆源代码</p>
<p><code>git clone https://github.com/intrig-unicamp/mininet-wifi</code></p>
</li>
<li>
<p>查看安装可选项</p>
<p><code>sudo mininet-wifi/util/install.sh -h</code></p>
</li>
<li>
<p>选择一些项安装（默认就按这个）</p>
<p><code>sudo mininet-wifi/util/install.sh -Wlnfv</code></p>
</li>
</ul>
<h3 id="无代理">无代理</h3>
<p>这里主要是指以https无法正常访问github的情况，需要把所有的git网址改为git://开头，因为install.sh里会有下载其他库的git命令，所以直接运行install.sh会报git超时，需要提前把相关库下好。</p>
<ul>
<li>
<p>克隆</p>
<p><code>git clone git://github.com/intrig-unicamp/mininet-wifi</code></p>
<p><code>git clone git://github.com/ramonfontes/mac80211_hwsim_mgmt</code></p>
<p><code>git clone git://github.com/mininet/mininet</code></p>
<p><code>git clone git://github.com/vchakour/wmediumd</code></p>
</li>
<li>
<p>选择一些项安装（默认就按这个）</p>
<p><code>sudo mininet-wifi/util/install.sh -Wlnfv</code></p>
</li>
</ul>
<h2 id="运行">运行</h2>
<ul>
<li>
<p>运行，这句正常运行就说明下载成功。</p>
<p><code>sudo mn --wifi</code></p>
</li>
<li>
<p>退出</p>
<p><code>exit</code></p>
</li>
<li>
<p>清理</p>
<p><code>sudo mn -c</code></p>
</li>
</ul>
<h2 id="参考文献">参考文献</h2>
<p><a href="https://github.com/intrig-unicamp/mininet-wifi" target="_blank" rel="noopener noreffer">https://github.com/intrig-unicamp/mininet-wifi</a></p>
<p><a href="https://blog.csdn.net/sexyluna/article/details/105740519" target="_blank" rel="noopener noreffer">Ubuntu将默认python版本改为python3</a></p>
]]></description>
</item>
<item>
    <title>论文笔记——Wireless SDN Mobile Ad Hoc Network:from Theory to Practice.</title>
    <link>https://leeshy-tech.github.io/paper_wireless_sdn_mobile/</link>
    <pubDate>Thu, 03 Mar 2022 14:18:06 &#43;0800</pubDate><author>saili@bupt.edu.cn (Leeshy)</author><guid>https://leeshy-tech.github.io/paper_wireless_sdn_mobile/</guid>
    <description><![CDATA[<h1 id="wireless-sdn-mobile-ad-hoc-networkfrom-theory-to-practice">Wireless SDN Mobile Ad Hoc Network:from Theory to Practice.</h1>
<h2 id="论文概况">论文概况</h2>
<p><a href="https://ieeexplore.ieee.org/abstract/document/7996340" target="_blank" rel="noopener noreffer">https://ieeexplore.ieee.org/abstract/document/7996340</a></p>
<p><a href="https://ieeexplore.ieee.org/xpl/conhome/7985734/proceeding" target="_blank" rel="noopener noreffer">2017 IEEE International Conference on Communications (ICC)</a></p>
<p>自翻：<a href="https://github.com/leeshy-tech/PaperTranslate/blob/main/wireless_SDN_mobile.md" target="_blank" rel="noopener noreffer">https://github.com/leeshy-tech/PaperTranslate/blob/main/wireless_SDN_mobile.md</a></p>
<h2 id="重要的名词">重要的名词</h2>
<p>D2D （device to device） MANET （移动自组织网络）   VANET（车辆自组织网络）</p>
<p>本地流量：信息流的源和目的距离很近的数据连接。</p>
<h2 id="引言">引言</h2>
<p>根据思科[1]最近的一份报告，通过无线网络传输的数据流量正在不断增加，不久将超过有线流量。在未来的5G场景中，无线流量的模式将对本地流量产生越来越大的需求。</p>
<p>使用当前的网络标准，即使是本地数据也要通过蜂窝网络传输到一个集中的实体，然后再重新分发。对于本地流量的交换来说，这种方法显然不是最优的。一种更有前途的方法依赖于设备到设备(D2D)技术[4]，其中设备可以在MANET或者VANET[6]中以分布式方式组织。</p>
<p>在没有集中控制的情况下，每个节点必须独立行动，做出路由决策，并在移动网络中动态地适应快速变化的拓扑结构。前人提出了一些解决方案：</p>
<ul>
<li>按需距离矢量(AODV)协议，它仅在需要时才寻找路由路径，适合流量偶发的场景。</li>
<li>优化的链路状态路由（OLSR）协议，当几个源-目的对之间的流量比较正常的情况下，预先定义网络中每个可能的节点对之间的路由的主动协议。</li>
<li>区域路由（ZRP）协议，将网络划分为多个集群，如果源节点和目的节点在同一个集群中，则使用OLSR等主动路由策略;否则，采用反应性策略，如AODV。</li>
</ul>
<p>OLSR的主要问题：它需要节点之间频繁的控制消息交换，以维护每个节点上更新的网络拓扑。ZRP能够显著减少控制消息的数量，因为更新的拓扑信息只需要在每个集群中的节点之间进行维护，但是当一个包被发送到一个属于不同集群的节点时，会引入显著的延迟，因为新的路径应该以响应式的方式搜索。</p>
<p>在节点具有移动性的条件下，必须在减少开销（网络中交换的控制信息）和完全掌握网络拓扑之间做出权衡，如果要设计更好的传输路线，则要更频繁地交换控制信息，不仅耗费了更多的带宽资源，而且也增加了设备的处理压力。</p>
<p>为了适应这种网络不断变化的移动特性，我们参考SDN范例，将数据平面（包括节点之间本地交换的所有数据流量）与控制平面（包括所有的控制报文和本地路由决策）隔开。他们实现的结构是，设备中有两个用于 DP （data plane）和 CP（control plane） 的无线接口，设备以星形拓扑结构与集中式单元CU连接，CU以集中的方式做出路由决策，几乎实时地了解拓扑。这个框架的两个主要优点：</p>
<ul>
<li>ad hoc网络中引入的开销是最小的,每个节点只需要知道它的邻居并且把该信息传给CU。</li>
<li>根本上减少了每个节点的复杂性,因为路由算法运行在CU。</li>
</ul>
<h2 id="sdn-manet的结构">SDN MANET的结构</h2>
<ul>
<li>
<p>DP MAC协议：采用了ieee802.11的P2P模式独立基本服务集(IBSS)[16]，这是ieee802.11的特设模式标准，根据我们的方法的需要，将交换能力完全控制给上层。</p>
</li>
<li>
<p>SDN协议：OpenFlow。</p>
</li>
<li>
<p>无线交换机：Open vSwitch (OVS)。</p>
</li>
<li>
<p>控制器：ON开发的Open Network Operating System (ONOS)。</p>
</li>
<li>
<p>平台：Rasp berry Pi(树莓派)Model B+，Linux操作系统</p>
</li>
</ul>
<h2 id="实现细节">实现细节</h2>
<h3 id="修改mac头">修改MAC头</h3>
<p>为了实现SDN架构，需要修改交换机设备的Linux内核，允许CU直接控制节点的路由。</p>
<p></p>
<p>图中左侧为标准 Linux 内核协议栈中从物理层 (PHY) 到应用层 (APP) 的逻辑数据流，</p>
<p>以太网帧通过铜缆（在 PHY 层）到达设备，并被发送到以太网驱动程序（在 MAC 层），在删除 PHY 标头并将它们发送到以太网堆栈之前检查它们的完整性。 在以太网堆栈中，在将数据包发送到路由所在的 NET 层之前，MAC 标头也被删除。</p>
<p>如果从无线接口接收到 Wi-Fi 数据包，则数据包首先被发送到 Wi-Fi 驱动程序，在那里去除 PHY 包头，然后由特定模块处理，将 Wi-Fi 数据包转换为以太网数据包，随后被发送到以太网堆栈。</p>
<p>在 SDN 块中，数据报可以根据从 SDN 控制器接收到的规则进行修改。 特别是，为了控制路由路径，SDN控制器强加的规则涉及修改相应数据报的MAC头。 在这些修改之后，数据报将被发送回 SDN 网桥，并转发到以太网堆栈进行与左侧情况相同的处理。</p>
<h3 id="多跳过程分析">多跳过程分析</h3>
<p>如图所示，涉及从源节点（S）到目的地 (D)的两跳传输。 数据包由 S 生成。它首先传输到辅助节点 (H)，然后由 H 中继到 D。</p>
<p></p>
<ul>
<li>数据包由主机 S (hS) 生成，它在 IP 报头和 MAC 报头中指定目标主机 D (hD) 的地址。 hS 不知道到达 hD 所需的任何路由信息。 它只是通过有线信道将数据包传输到节点 S (sS) 的交换机，该交换机负责无线传输它。</li>
<li>sS 正在运行 SDN 模块，该模块根据从 SDN 控制器接收到的指令修改 MAC 层的源地址和目标地址。 MAC头中的源和目的地分别变成sS和sH（节点H的交换机）。 然后，数据包可以被 sS 发送，也可以被 sH 接收。</li>
<li>由于数据包中的目的MAC地址为sH，因此数据包由sH进一步处理，并向sS发回确认（ACK）。sH 执行类似的过程，修改目的MAC地址，数据包可以被转发到目的节点（sD）的交换机。</li>
<li>最后，sD 根据来自 SDN 控制器的另一条规则，将源 MAC 地址和目标 MAC 地址分别修改为 hS 和 hD。 这个过程，称为 MAC 恢复，是必要的，以便 hD 识别数据包是由 hS 发送的，而不需要来自 SDN 框架的任何进一步信息。</li>
</ul>
<blockquote>
<p>对于大多数 Wi-Fi 适配器，如果 固件的MAC 和目的地不匹配，则固件中会丢弃数据包，因此修改 MAC 地址是多跳传送数据包的必要步骤。</p>
</blockquote>
<h2 id="平台测试性能比较">平台测试：性能比较</h2>
<h3 id="网络设置">网络设置</h3>
<p></p>
<p>实验场景由具有三个 SDN 节点的 SDN MANET 组成，标记为 S、H 和 D，如上一节所示，部署如图所示。每个节点由一个 RPi Model B+ 和一个 Wi -Fi 适配器（Ralink RT5370 USB）组成，DP 中的传输使用 IEEE 802.11g ad-hoc 模式。 三个 SDN 节点配备了 OVS-2.4.0，并连接到运行 ONOS 控制器的 CU 和我们的 MANET 应用程序 [12]。</p>
<p>第二个网络名为 OLSR MANET，它使用相同位置和相同拓扑的相同三个节点（S、H 和 D）进行比较。 实际上，在第二个网络中，节点没有配备我们的 SDN 框架，但它们正在运行分布式路由策略 OLSR。</p>
<p>在这两个网络中，数据流量都是在节点 S 使用流量生成器 iPerf3 [35] 生成的，该流量生成器会创建一个随机 TCP 流，流向目的地节点 D。实验时间为 N 秒，时间间隔为 1秒。 对于每个间隔 τn，n = 1,&hellip;,N，端到端吞吐量以每秒比特 (bps) 为单位测量为：
$$
T\left(\tau_{n}\right)=\frac{\text { TCP } \text { RWND } \times 8}{\text { RTT }}
$$
其中 TCP RWND 是间隔 τi 期间 TCP 会话的平均接收窗口大小，RTT 是平均往返时间，即从发送的 TCP 段的第一个比特传输到接收到该 TCP 段的 TCP ACK的最后一个比特所经过的时间。</p>
<p>为了比较 SDN MANET 和 OLSR MANET 在拓扑突然变化的情况下的行为，我们改变了图a的全连接拓扑为图b的多跳拓扑（S和D之间没有直接连接）。实现的方法是，在节点的 MAC 层设计一个模块来模拟 S 和 D 之间的链路故障，该模块可以拒绝来自 S 的所有数据包（对于 节点 D），或来自 D（对于节点 S）。 这样，我们可以在我们的实验中完美地控制 S 和 D 之间的链路何时发生故障，或者何时重新启动。</p>
<p>对于 SDN MANET 和 OLSR MANET，每个实验重复 M = 20 次。 结果中显示的平均吞吐量为：
$$
\bar{T}\left(\tau_{n}\right)=\frac{\sum_{m=1}^{M} T_{m}\left(\tau_{n}\right)}{M}
$$
其中 Tm(τn) 是第 m 次实验在时间间隔 τn 期间获得的吞吐量。</p>
<h3 id="链路断开实验">链路断开实验</h3>
<p></p>
<p>在时间 t = 10，S 和 D 之间的直接链路发生故障。 SDN控制器立即收到此事件的通知，并迅速做出反应，将新的SDN规则强加给节点S和H。这样，节点S将所有发往D的数据包发送给H，H将这些数据包转发给D。 SDN MANET 的吞吐量立即恢复到初始吞吐量的一半，因为从 S 到 D 的新路径现在有两跳。</p>
<p>OLSR MANET 能够识别链路故障并通过仅在 t = 25 时将路径更改为 D 来对其做出反应，延迟约 15 秒，从而导致严重的吞吐量中断。 这个结果是意料之中的，因为 OLSR 有一个完全分布式的路由算法，它需要大量时间来更新。</p>
<h3 id="连接实验">连接实验</h3>
<p></p>
<p>在第二个实验中，我们观察了当初始拓扑是图b中的拓扑时，SDN MANET 和 OLSR MANET 经历的平均吞吐量，即 S 和 D 之间的两跳路径。 在 t = 10 时，S 和 D 之间的直接链接也被激活，如图a所示。 正如预期的那样，我们观察到，在 SDN MANET 的情况下，网络能够迅速对拓扑的变化做出反应，并且吞吐量在 t &gt; 10 时几乎翻了一番。另一方面，OLSR MANET 的延迟约为 20 秒。</p>
<h3 id="快速变化拓扑实验">快速变化拓扑实验</h3>
<p></p>
<p>在第三个实验中，有一系列连续的拓扑变化。 在 t = 0 时，拓扑是图a中的拓扑（S 和 D 之间有直接链路），然后在 t = 30 时，拓扑变为图b中的拓扑（两跳） ，然后在 t = 60 时再次切换到图a，最后在 t = 90 时切换到图b。</p>
<p>同样在这种情况下，实验重复 20 次，结果取所有试验的平均值。 对于每个拓扑变化，我们观察到 SDN MANET 如何能够几乎立即对拓扑变化做出反应，而 OLSR MANET 对变化的反应有一定的延迟，正如预期的那样，会导致显著的吞吐量损失。</p>
<h2 id="结论">结论</h2>
<p>在这项工作中，我们提出了一个 SDN MANET 的实际实现，它提供了 D2D 数据传输的所有优点，同时具有集中网络管理的灵活性。</p>
<p>为了展示 SDN MANET 的优势以及所提供的所有软件的有效性，我们将我们的 SDN MANET 与以分布式方式管理的 ad hoc 网络进行了比较。 我们用几个简单的例子强调了我们方法的显着优势，特别是对于快速变化的网络拓扑。</p>
<p>在未来的工作中，我们计划处理大规模的 SDN MANET，解决可能出现的可扩展性问题。</p>
]]></description>
</item>
<item>
    <title>鸿蒙开发实践——用户登陆及个人主页</title>
    <link>https://leeshy-tech.github.io/harmonyos_userlogin/</link>
    <pubDate>Sun, 20 Feb 2022 21:57:06 &#43;0800</pubDate><author>saili@bupt.edu.cn (Leeshy)</author><guid>https://leeshy-tech.github.io/harmonyos_userlogin/</guid>
    <description><![CDATA[<h1 id="用户登录">用户登录</h1>
<h2 id="项目简介">项目简介</h2>
<h3 id="项目结构">项目结构</h3>
<pre tabindex="0"><code>└─ entry
	├─src.main
        ├─ java.com.example.users
            ├─beans
                ├─ Account				API请求体
                └─ LoginMsg				API返回体
            ├─slice
                ├─ UserInfoAbilitySlice		个人主页Slice
                └─ MainAbilitySlice			主页面Slice
            ├─utils
                ├─ DataBaseUtil				数据库操作类
                ├─ HttpRequestUtil			API调用类
                └─ LoadImageUtil			网络图片加载到image组件
            ├─ LocalDBAbility			本地数据库的DataAbility
            ├─ MainAbility
            └─ MyApplication
        └─ resources.base.layout
        	├─ ability_userinfo.xml			个人页面布局文件
            └─ ability_main.xml				主页面布局文件
 	└─ build.gradle							添加外部依赖
</code></pre><h3 id="效果">效果</h3>
<p></p>
<h2 id="项目逻辑">项目逻辑</h2>
<p>此项目的重点是token，它存储在本地数据库，扮演类似浏览器中cookie的角色。</p>
<h3 id="登陆页">登陆页</h3>
<ul>
<li>首页获取用户的账号和密码，点击按钮向后端发送http请求。</li>
<li>登陆成功，则将后端返回的token存入本地数据库，并导航到个人页面。</li>
<li>登陆不成功，则使用ToastDialog组件显示提示信息，账号错误或密码错误。</li>
</ul>
<h3 id="个人页">个人页</h3>
<p>个人页面高度精简，只显示用户头像。</p>
<ul>
<li>导航到此页，说明用户一定已经登陆。</li>
<li>查询本地数据库，获得token。</li>
<li>向后端发送请求，获取用户头像的url。</li>
<li>将url加载到image组件。</li>
</ul>
<p>当用户退出APP，清理后台后，仍然能记住登陆状态，导航回个人主页，不用重新登陆。</p>
<h2 id="后端接口">后端接口</h2>
<p>代码：<a href="https://github.com/leeshy-tech/API_userLogin/blob/main/user_login_token.py" target="_blank" rel="noopener noreffer">https://github.com/leeshy-tech/API_userLogin/blob/main/user_login_token.py</a></p>
<p>博客：<a href="https://leeshy-tech.github.io/pythonapi_simplelogin2/" target="_blank" rel="noopener noreffer">Python实践——后端接口实现(2)</a></p>
<h2 id="准备">准备</h2>
<p>这些都是之前的博客详细说过的部分，不再赘述。</p>
<h3 id="添加依赖">添加依赖</h3>
<p><code>implementation ('com.alibaba:fastjson:1.2.47')</code></p>
<h3 id="本地数据库的dataabilitylocaldbability">本地数据库的DataAbility——LocalDBAbility</h3>
<p>把之前写过的照抄过来，改一下数据库名、表名、建表sql语句即可。</p>
<h3 id="请求体和返回体类accountloginmsg">请求体和返回体类——Account，LoginMsg</h3>
<p>根据后端接口的格式建立的类。</p>
<h3 id="网络图片加载loadimageutil">网络图片加载——LoadImageUtil</h3>
<p>将网络图片加载到image组件，copy之前的项目。</p>
<h3 id="api调用类httprequestutil">API调用类——HttpRequestUtil</h3>
<p>发送HTTP请求的封装类，这个之前没讲过，照抄会用即可。</p>
<h2 id="databaseutil">DataBaseUtil</h2>
<p>为了尽可能的简化主体代码，把从数据库里查询token，和插入token的操作封装成这个类。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="c1">//数据库查询、插入 帮助类
</span><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DataBaseUtil</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Uri</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">Uri</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="s">&#34;dataability:///com.example.users.LocalDBAbility/user_info&#34;</span><span class="o">);</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">getToken</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">){</span>
        <span class="n">String</span> <span class="n">value</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

        <span class="n">DataAbilityHelper</span> <span class="n">dataAbilityHelper</span> <span class="o">=</span> <span class="n">DataAbilityHelper</span><span class="o">.</span><span class="na">creator</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
        <span class="n">String</span><span class="o">[]</span> <span class="n">colums</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;token&#34;</span><span class="o">};</span>
        <span class="n">DataAbilityPredicates</span> <span class="n">predicates</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DataAbilityPredicates</span><span class="o">();</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="n">dataAbilityHelper</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="n">uri</span><span class="o">,</span> <span class="n">colums</span><span class="o">,</span> <span class="n">predicates</span><span class="o">);</span>
            <span class="k">if</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">getRowCount</span><span class="o">()</span> <span class="o">&gt;</span><span class="n">0</span><span class="o">){</span>
                <span class="n">rs</span><span class="o">.</span><span class="na">goToFirstRow</span><span class="o">();</span>
                <span class="n">value</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="n">0</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">DataAbilityRemoteException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">setToken</span><span class="o">(</span><span class="n">String</span> <span class="n">token</span><span class="o">,</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
        <span class="n">ValuesBucket</span> <span class="n">valuesBucket</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ValuesBucket</span><span class="o">();</span>
        <span class="n">valuesBucket</span><span class="o">.</span><span class="na">putString</span><span class="o">(</span><span class="s">&#34;token&#34;</span><span class="o">,</span><span class="n">token</span><span class="o">);</span>
        <span class="n">DataAbilityHelper</span> <span class="n">dataAbilityHelper</span> <span class="o">=</span> <span class="n">DataAbilityHelper</span><span class="o">.</span><span class="na">creator</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">i</span> <span class="o">=</span> <span class="n">dataAbilityHelper</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="n">uri</span><span class="o">,</span> <span class="n">valuesBucket</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">DataAbilityRemoteException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><h2 id="mainabilityslice">MainAbilitySlice</h2>
<p>onStart方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="kd">super</span><span class="o">.</span><span class="na">onStart</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
<span class="kd">super</span><span class="o">.</span><span class="na">setUIContent</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Layout_ability_main</span><span class="o">);</span>

<span class="n">String</span> <span class="n">token_s</span> <span class="o">=</span>  <span class="n">DataBaseUtil</span><span class="o">.</span><span class="na">getToken</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
<span class="c1">//如果本地数据库没有token，说明用户还没有登陆
</span><span class="c1"></span><span class="k">if</span> <span class="o">(</span><span class="n">token_s</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">Button</span> <span class="n">btn_login</span> <span class="o">=</span> <span class="n">findComponentById</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Id_login_btn</span><span class="o">);</span>
    <span class="n">TextField</span> <span class="n">tf_userid</span> <span class="o">=</span> <span class="n">findComponentById</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Id_login_id_textfield</span><span class="o">);</span>
    <span class="n">TextField</span> <span class="n">tf_userPwd</span> <span class="o">=</span> <span class="n">findComponentById</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Id_login_pwd_textfield</span><span class="o">);</span>

    <span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="s">&#34;http://8.136.83.196:8899/users/login&#34;</span><span class="o">;</span>
    <span class="n">btn_login</span><span class="o">.</span><span class="na">setClickedListener</span><span class="o">(</span><span class="n">component</span> <span class="o">-&gt;</span> <span class="o">{</span>
        <span class="c1">//开新线程
</span><span class="c1"></span>        <span class="n">TaskDispatcher</span> <span class="n">globalTaskDispatcher</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getGlobalTaskDispatcher</span><span class="o">(</span><span class="n">TaskPriority</span><span class="o">.</span><span class="na">DEFAULT</span><span class="o">);</span>
        <span class="c1">//异步
</span><span class="c1"></span>        <span class="n">globalTaskDispatcher</span><span class="o">.</span><span class="na">asyncDispatch</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="n">String</span> <span class="n">user_id</span> <span class="o">=</span> <span class="n">tf_userid</span><span class="o">.</span><span class="na">getText</span><span class="o">();</span>
            <span class="n">String</span> <span class="n">user_pwd</span> <span class="o">=</span> <span class="n">tf_userPwd</span><span class="o">.</span><span class="na">getText</span><span class="o">();</span>
            <span class="c1">//发送http请求，并获得数据
</span><span class="c1"></span>            <span class="n">Account</span> <span class="n">account</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Account</span><span class="o">(</span><span class="n">user_id</span><span class="o">,</span> <span class="n">user_pwd</span><span class="o">);</span>
            <span class="n">String</span> <span class="n">account_json</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">.</span><span class="na">toJSONString</span><span class="o">(</span><span class="n">account</span><span class="o">);</span>
            <span class="n">String</span> <span class="n">login_msg</span> <span class="o">=</span> <span class="n">HttpRequestUtil</span><span class="o">.</span><span class="na">sendPostRequest</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">url</span><span class="o">,</span> <span class="n">account_json</span><span class="o">);</span>
            <span class="n">LoginMsg</span> <span class="n">login_msg_obj</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">.</span><span class="na">parseObject</span><span class="o">(</span><span class="n">login_msg</span><span class="o">,</span> <span class="n">LoginMsg</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
            <span class="n">String</span> <span class="n">token</span> <span class="o">=</span> <span class="n">login_msg_obj</span><span class="o">.</span><span class="na">getToken</span><span class="o">();</span>
            <span class="n">String</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">login_msg_obj</span><span class="o">.</span><span class="na">getMsg</span><span class="o">();</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">token</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">//将token存入本地数据库，并跳到个人页
</span><span class="c1"></span>                <span class="n">DataBaseUtil</span><span class="o">.</span><span class="na">setToken</span><span class="o">(</span><span class="n">token</span><span class="o">,</span> <span class="k">this</span><span class="o">);</span>
                <span class="n">present</span><span class="o">(</span><span class="k">new</span> <span class="n">UserInfoAbilitySlice</span><span class="o">(),</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">());</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="c1">//返回主线程进行UI重绘，原因是show方法不能在子线程中运行
</span><span class="c1"></span>                <span class="n">getUITaskDispatcher</span><span class="o">().</span><span class="na">asyncDispatch</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
                    <span class="nd">@Override</span>
                    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
                        <span class="k">new</span> <span class="n">ToastDialog</span><span class="o">(</span><span class="n">getContext</span><span class="o">()).</span><span class="na">setText</span><span class="o">(</span><span class="n">msg</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
                    <span class="o">}</span>
                <span class="o">});</span>
            <span class="o">}</span>
        <span class="o">});</span>
    <span class="o">});</span>
<span class="o">}</span>
<span class="c1">//如果本地数据库有token，说明已经登陆，就跳到个人页
</span><span class="c1"></span><span class="k">else</span><span class="o">{</span>
    <span class="n">present</span><span class="o">(</span><span class="k">new</span> <span class="n">UserInfoAbilitySlice</span><span class="o">(),</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div><ul>
<li>进来先进行一个判断，若本地数据库里有token，则直接跳转到个人页，为了应对APP被杀死后重启的情况。</li>
<li>按钮监听，获取输入框的信息，向后端发送请求，获得token和msg。</li>
<li>若token不为空，则存到本地数据库，并跳转到个人页。</li>
<li>若token为空，则建立一个ToastDialog组件，显示msg。ToastDialog组件专门用于显示提示信息，它存在几秒后自动消失。</li>
</ul>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>注意<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">建立Toast Dialog组件这里，重绘UI的操作只能在主线程里运行，在这里指show方法，如果直接写<code>new ToastDialog(getContext()).setText(msg).show();</code>是不行的，因为此时我们正在新建的线程里，这个任务要扔回到主线程，所以才有了以下的代码块。</div>
        </div>
    </div>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="n">getUITaskDispatcher</span><span class="o">().</span><span class="na">asyncDispatch</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">new</span> <span class="n">ToastDialog</span><span class="o">(</span><span class="n">getContext</span><span class="o">()).</span><span class="na">setText</span><span class="o">(</span><span class="n">msg</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">});</span>
</code></pre></div><p>onActive方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">super</span><span class="o">.</span><span class="na">onActive</span><span class="o">();</span>
<span class="c1">//程序重新返回前台调用
</span><span class="c1">//若已经登陆，则导航到个人页
</span><span class="c1"></span><span class="n">String</span> <span class="n">token_s</span> <span class="o">=</span>  <span class="n">DataBaseUtil</span><span class="o">.</span><span class="na">getToken</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
<span class="k">if</span> <span class="o">(</span><span class="n">token_s</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
    <span class="n">present</span><span class="o">(</span><span class="k">new</span> <span class="n">UserInfoAbilitySlice</span><span class="o">(),</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div><p>当页面从后台返回前台时，调用的是onActive方法，比如用户在导航到个人页之后，点了一下退出键，就会返回默认页，我们不想让他再发一次http请求，检查token，若存在，直接将其导航回个人页。</p>
<h2 id="userinfoabilityslice">UserInfoAbilitySlice</h2>
<p>onStart方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="kd">super</span><span class="o">.</span><span class="na">onStart</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
<span class="kd">super</span><span class="o">.</span><span class="na">setUIContent</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Layout_ability_userinfo</span><span class="o">);</span>
<span class="c1">//能导航到此页说明用户已经登陆，向服务器请求用户的头像
</span><span class="c1"></span><span class="n">String</span> <span class="n">token</span> <span class="o">=</span> <span class="n">DataBaseUtil</span><span class="o">.</span><span class="na">getToken</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
<span class="n">Image</span> <span class="n">image</span> <span class="o">=</span> <span class="n">findComponentById</span><span class="o">(</span><span class="n">ResourceTable</span><span class="o">.</span><span class="na">Id_image</span><span class="o">);</span>
<span class="k">if</span> <span class="o">(</span><span class="n">token</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
    <span class="c1">//建新线程
</span><span class="c1"></span>    <span class="n">TaskDispatcher</span> <span class="n">globalTaskDispatcher</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getGlobalTaskDispatcher</span><span class="o">(</span><span class="n">TaskPriority</span><span class="o">.</span><span class="na">DEFAULT</span><span class="o">);</span>
    <span class="c1">//异步
</span><span class="c1"></span>    <span class="n">globalTaskDispatcher</span><span class="o">.</span><span class="na">asyncDispatch</span><span class="o">(()-&gt;{</span>
        <span class="c1">//发送请求，更新image组件
</span><span class="c1"></span>        <span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="s">&#34;http://8.136.83.196:8899/users/info&#34;</span><span class="o">;</span>
        <span class="n">String</span> <span class="n">img_url</span> <span class="o">=</span> <span class="n">HttpRequestUtil</span><span class="o">.</span><span class="na">sendPostRequestWithToken</span><span class="o">(</span><span class="k">this</span><span class="o">,</span><span class="n">url</span><span class="o">,</span><span class="n">token</span><span class="o">);</span>
        <span class="n">LoadImageUtil</span><span class="o">.</span><span class="na">loadImg</span><span class="o">(</span><span class="k">this</span><span class="o">,</span><span class="n">img_url</span><span class="o">,</span><span class="n">image</span><span class="o">);</span>
    <span class="o">});</span>
<span class="o">}</span>
</code></pre></div><ul>
<li>导航到此页时，从本地数据库中取出token，向后端发送。</li>
<li>后端返回头像的url。</li>
<li>将url显示到image组件。</li>
</ul>
<h2 id="一些瑕疵">一些瑕疵</h2>
<ol>
<li>没有退出登陆键，这个很容易实现，点击按钮，把token删掉即可，我懒得写了。</li>
<li>个人页太简单，懒就一个字。</li>
</ol>
<h2 id="结束语">结束语</h2>
<h3 id="源码">源码</h3>
<p><a href="https://github.com/leeshy-tech/HarmonyOS_example/tree/main/Users" target="_blank" rel="noopener noreffer">https://github.com/leeshy-tech/HarmonyOS_example/tree/main/Users</a></p>
<h3 id="参考文献">参考文献</h3>
<p><a href="https://www.bilibili.com/video/BV1DM4y1G7MN" target="_blank" rel="noopener noreffer">HarmonyOS 2.0应用开发实战教程丨锋迷商城项目</a></p>
<p><a href="https://developer.harmonyos.com/cn/docs/documentation/doc-guides/document-outline-0000001064589184" target="_blank" rel="noopener noreffer">HarmonyOS文档</a></p>
]]></description>
</item>
<item>
    <title>Python实践——后端接口实现(2)</title>
    <link>https://leeshy-tech.github.io/pythonapi_simplelogin2/</link>
    <pubDate>Sun, 20 Feb 2022 20:11:06 &#43;0800</pubDate><author>saili@bupt.edu.cn (Leeshy)</author><guid>https://leeshy-tech.github.io/pythonapi_simplelogin2/</guid>
    <description><![CDATA[<h1 id="增加token验证">增加token验证</h1>
<p>书接上文</p>
<h2 id="token是什么">token是什么</h2>
<p>简单来说，token可以认为是身份令牌，当用户登陆成功之后，获得这个令牌，当需要向服务器请求一些私密资源时，便可以提交这个令牌，以证明自己是合法用户。</p>
<h2 id="token生成及解析">token生成及解析</h2>
<p>使用pyjwt这个库：<code>pip install pyjwt</code></p>
<h3 id="核心代码">核心代码：</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">jwt</span>
<span class="c1"># 加密算法</span>
<span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s2">&#34;alg&#34;</span><span class="p">:</span><span class="s2">&#34;HS256&#34;</span><span class="p">,</span>
    <span class="s2">&#34;typ&#34;</span><span class="p">:</span><span class="s2">&#34;JWT&#34;</span>
<span class="p">}</span>
<span class="c1"># 密钥</span>
<span class="n">SECRET_KEY</span> <span class="o">=</span> <span class="s2">&#34;leeshy&#34;</span>
<span class="s1">&#39;&#39;&#39;生成一个token&#39;&#39;&#39;</span>
<span class="k">def</span> <span class="nf">token_encode</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">user_id</span><span class="p">:</span>
        <span class="n">payload</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s2">&#34;user_id&#34;</span><span class="p">:</span><span class="n">user_id</span>
        <span class="p">}</span>
        <span class="n">token</span> <span class="o">=</span> <span class="n">jwt</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">payload</span><span class="o">=</span><span class="n">payload</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">SECRET_KEY</span><span class="p">,</span><span class="n">algorithm</span><span class="o">=</span><span class="s1">&#39;HS256&#39;</span><span class="p">,</span><span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">token</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="kc">None</span>

<span class="s1">&#39;&#39;&#39;解码token&#39;&#39;&#39;</span>
<span class="k">def</span> <span class="nf">token_decode</span><span class="p">(</span><span class="n">token</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">payload</span> <span class="o">=</span> <span class="n">jwt</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="n">jwt</span><span class="o">=</span><span class="n">token</span><span class="p">,</span><span class="n">key</span><span class="o">=</span><span class="n">SECRET_KEY</span><span class="p">,</span><span class="n">verify</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span><span class="n">algorithms</span><span class="o">=</span><span class="s1">&#39;HS256&#39;</span><span class="p">)</span>
    <span class="n">info</span> <span class="o">=</span> <span class="n">payload</span><span class="p">[</span><span class="s2">&#34;user_id&#34;</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">info</span>
</code></pre></div><ul>
<li>headers声明加密算法</li>
<li>SECRET_KEY密钥是编码解码的关键</li>
<li>payload项中，有一些官方声明项，除官方声明项外还可以存一些自定义信息。</li>
</ul>
<h2 id="用户登陆">用户登陆</h2>
<p>如果登陆成功，就返回信息和token，如果不成功，就只返回提示信息。</p>
<p>较上一个版本只有一点改变，核心代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;生成一个返回体&#39;&#39;&#39;</span>
<span class="k">def</span> <span class="nf">response_body_login</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span><span class="n">user_id</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
    <span class="n">response_msg</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s2">&#34;msg&#34;</span><span class="p">:</span><span class="n">msg</span><span class="p">,</span>
        <span class="s2">&#34;token&#34;</span><span class="p">:</span><span class="n">token_encode</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">jsonify</span><span class="p">(</span><span class="n">response_msg</span><span class="p">)</span>

<span class="nd">@app</span><span class="o">.</span><span class="n">route</span><span class="p">(</span><span class="s1">&#39;/users/login&#39;</span><span class="p">,</span><span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;POST&#39;</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">users_login</span><span class="p">():</span>
    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s2">&#34;POST&#34;</span><span class="p">:</span>
        <span class="n">user_id</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">json</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;user_id&#34;</span><span class="p">)</span>
        <span class="n">user_password</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">json</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;user_password&#34;</span><span class="p">)</span>

        <span class="k">for</span> <span class="n">user_dict</span> <span class="ow">in</span> <span class="n">users_list</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">user_dict</span><span class="p">[</span><span class="s2">&#34;user_id&#34;</span><span class="p">]</span> <span class="o">==</span> <span class="n">user_id</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">user_dict</span><span class="p">[</span><span class="s2">&#34;user_password&#34;</span><span class="p">]</span> <span class="o">==</span> <span class="n">user_password</span><span class="p">:</span>
                    <span class="k">return</span> <span class="n">response_body_login</span><span class="p">(</span><span class="s2">&#34;success&#34;</span><span class="p">,</span><span class="n">user_id</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span> 
                    <span class="k">return</span> <span class="n">response_body_login</span><span class="p">(</span><span class="s2">&#34;password error&#34;</span><span class="p">)</span>

        <span class="k">return</span> <span class="n">response_body_login</span><span class="p">(</span><span class="s2">&#34;id not exist&#34;</span><span class="p">)</span>
</code></pre></div><ul>
<li>规定的请求体格式是application/json</li>
</ul>
<h2 id="请求用户信息">请求用户信息</h2>
<p>用户向服务端提供token，验证成功则返回用户头像的url。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nd">@app</span><span class="o">.</span><span class="n">route</span><span class="p">(</span><span class="s1">&#39;/users/info&#39;</span><span class="p">,</span><span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;POST&#39;</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">users_info</span><span class="p">():</span>
    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s2">&#34;POST&#34;</span><span class="p">:</span>
        <span class="n">token</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">headers</span><span class="p">[</span><span class="s2">&#34;token&#34;</span><span class="p">]</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">user_id</span> <span class="o">=</span> <span class="n">token_decode</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="k">return</span> <span class="s2">&#34;token error&#34;</span>

        <span class="k">for</span> <span class="n">user_dict</span> <span class="ow">in</span> <span class="n">users_headphotos</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">user_dict</span><span class="p">[</span><span class="s2">&#34;user_id&#34;</span><span class="p">]</span> <span class="o">==</span> <span class="n">user_id</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">user_dict</span><span class="p">[</span><span class="s2">&#34;user_headphoto&#34;</span><span class="p">]</span>

        <span class="k">return</span> <span class="s2">&#34;no headphoto&#34;</span>
</code></pre></div><ul>
<li>token要放在请求头里，所以通过request.headers取得。</li>
</ul>
<h2 id="请求体格式">请求体格式</h2>
<p>在前端向后端发送请求时，必须在请求头部分声明请求体格式。</p>
<p>例如：<code>connection.setRequestProperty(&quot;Content-Type&quot;,&quot;application/json;charset=utf-8&quot;);</code></p>
<p>这个格式是由后端决定的，否则后端无法取到对应的信息。</p>
<h3 id="applicationx-www-form-urlencoded">application/x-www-form-urlencoded</h3>
<p>这是最常见的 POST 提交数据的方式，提交时按照键值对<code>key1=val1&amp;key2=val2</code>的方式进行编码。</p>
<p>版本1时，就使用了这种方法调试，所以后端代码对应的是：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">user_id</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">form</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;user_id&#34;</span><span class="p">)</span>
<span class="n">user_password</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">form</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;user_password&#34;</span><span class="p">)</span>
</code></pre></div><h3 id="applicationjson">application/json</h3>
<p>指示服务端消息主体是序列化的JSON字符串。</p>
<p>本次使用的调试方式是json，所以后端代码对应：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">user_id</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">json</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;user_id&#34;</span><span class="p">)</span>
<span class="n">user_password</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">json</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;user_password&#34;</span><span class="p">)</span>
</code></pre></div><h2 id="调试">调试</h2>
<p></p>
<p></p>
<h2 id="结束语">结束语</h2>
<h3 id="源码">源码</h3>
<p><a href="https://github.com/leeshy-tech/API_userLogin" target="_blank" rel="noopener noreffer">https://github.com/leeshy-tech/API_userLogin</a></p>
<h3 id="参考文献">参考文献</h3>
<p><a href="https://www.cnblogs.com/wbl001/p/12050751.html" target="_blank" rel="noopener noreffer">【记录】form-data与x-www-form-urlencoded的区别 </a></p>
]]></description>
</item>
<item>
    <title>Python实践——后端接口实现</title>
    <link>https://leeshy-tech.github.io/pythonapi_simplelogin/</link>
    <pubDate>Tue, 15 Feb 2022 16:30:06 &#43;0800</pubDate><author>saili@bupt.edu.cn (Leeshy)</author><guid>https://leeshy-tech.github.io/pythonapi_simplelogin/</guid>
    <description><![CDATA[<h1 id="自己动手写一个api">自己动手写一个API</h1>
<h2 id="相关概念">相关概念</h2>
<h3 id="端口port">端口Port</h3>
<p>这里端口指的是网络端口，利用IP+端口号可以唯一的定位一台主机上的某个应用程序，可以认为端口是APP之间交换数据的“门”，要想与某APP进行通信，就需要知道它运行在哪个主机的哪个端口上。</p>
<p>我们要写一个API，实质上是写了一个完成特定功能的应用程序，它的接口暴露在外，以供其他程序员调用。</p>
<h3 id="url-uniform-resource-locator">URL (Uniform Resource Locator)</h3>
<p>统一资源定位符，是互联网上标准资源的地址。而互联网上的每个文件都有唯一的一个的URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它。格式为<code>protocol :// ip[:port] / path / [;parameters][?query]#fragment</code></p>
<p>一个应用程序可以暴露多个接口，比如用户登陆、用户注册，url可以是/user/userlogin、/user/usersignup。</p>
<h3 id="httphttpspostget">HTTP、HTTPS、POST、GET</h3>
<p>超文本传输协议（HTTP）的设计目的是保证客户端与服务器之间的通信。客户端（浏览器）向服务器提交 HTTP 请求；服务器向客户端返回响应。响应包含关于请求的状态信息以及可能被请求的内容。</p>
<p>HTTPS 经由 HTTP 进行通信，但利用 SSL/TLS 来加密数据包，更加安全。</p>
<p>POST和GET都是HTTP协议的请求方法，除了它们还有HEAD、PUT等方法。</p>
<ul>
<li>
<p>GET方法将查询字符串放在请求的URL中：</p>
<p>/test/demo_form.php?name1=value1&amp;name2=value2</p>
</li>
<li>
<p>POST方法将查询字符串放在HTTP消息主体中：</p>
<pre tabindex="0"><code>POST /test/demo_form.php HTTP/1.1
Host: runoob.com
name1=value1&amp;name2=value2
</code></pre></li>
</ul>
<p>总的来说，POST方法更加安全，详细区别可参考结尾文章。</p>
<h3 id="json">JSON</h3>
<p>JSON: <strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation(JavaScript 对象表示法)</p>
<p>它采用完全独立于编程语言的文本格式来存储和表示数据。JSON 解析器和 JSON 库支持许多不同的编程语言。 目前非常多的动态（PHP，JSP，.NET）编程语言都支持JSON。</p>
<p>将API看作函数，请求体就是参数，响应体就是返回值，按照JSON格式设计请求体和响应体，前后端程序就能通过JSON解析器互相沟通。</p>
<h2 id="准备">准备</h2>
<h3 id="安装库">安装库</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="n">pip</span> <span class="n">install</span> <span class="n">flask</span><span class="p">,</span><span class="n">flask_cors</span><span class="p">,</span><span class="n">gevent</span>
</code></pre></div><h3 id="功能设计">功能设计</h3>
<p>设计一个简单的用户登陆功能，前端提供账号密码，服务端返回提示消息。</p>
<ul>
<li>账号密码正确，返回success</li>
<li>密码错误，返回password error</li>
<li>账号不存在，返回id not exist</li>
</ul>
<h3 id="参数">参数</h3>
<p>协议：HTTP（HTTPS会涉及到一些复杂的设置，下次再说。）</p>
<p>方法：POST</p>
<p>请求体示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>    
    <span class="err">{</span><span class="nt">&#34;user_id&#34;</span><span class="p">:</span><span class="s2">&#34;2019210777&#34;</span><span class="p">}</span><span class="err">,</span>
    <span class="p">{</span><span class="nt">&#34;user_password&#34;</span><span class="p">:</span><span class="s2">&#34;123456&#34;</span><span class="p">}</span>
<span class="err">}</span>
</code></pre></div><p>响应体示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="err">{</span><span class="nt">&#34;msg&#34;</span><span class="p">:</span><span class="s2">&#34;success&#34;</span><span class="p">}</span>
<span class="err">}</span>
</code></pre></div><h2 id="核心代码">核心代码</h2>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>关于端口<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">程序里的端口号自主选择，不与其他服务冲突即可。如果冲突会报错：地址(&lsquo;0.0.0.0&rsquo;,port)已被使用，被使用的不是IP地址，而是端口号。要么更换端口，要么杀死该端口的服务（Google相关的命令即可）。</div>
        </div>
    </div>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span><span class="n">request</span><span class="p">,</span><span class="n">jsonify</span>
<span class="kn">from</span> <span class="nn">flask_cors</span> <span class="kn">import</span> <span class="n">CORS</span>
<span class="kn">from</span> <span class="nn">gevent</span> <span class="kn">import</span> <span class="n">pywsgi</span>

<span class="n">port</span> <span class="o">=</span> <span class="mi">8899</span>
<span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>
<span class="n">CORS</span><span class="p">(</span><span class="n">app</span><span class="p">,</span><span class="n">resource</span><span class="o">=</span><span class="sa">r</span><span class="s1">&#39;/*&#39;</span><span class="p">)</span>

<span class="n">users_list</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s2">&#34;user_id&#34;</span><span class="p">:</span><span class="s2">&#34;2019210777&#34;</span><span class="p">,</span><span class="s2">&#34;user_password&#34;</span><span class="p">:</span><span class="s2">&#34;123456&#34;</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;user_id&#34;</span><span class="p">:</span><span class="s2">&#34;2019210778&#34;</span><span class="p">,</span><span class="s2">&#34;user_password&#34;</span><span class="p">:</span><span class="s2">&#34;123456&#34;</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;user_id&#34;</span><span class="p">:</span><span class="s2">&#34;2019210779&#34;</span><span class="p">,</span><span class="s2">&#34;user_password&#34;</span><span class="p">:</span><span class="s2">&#34;123456&#34;</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;user_id&#34;</span><span class="p">:</span><span class="s2">&#34;2019210780&#34;</span><span class="p">,</span><span class="s2">&#34;user_password&#34;</span><span class="p">:</span><span class="s2">&#34;123456&#34;</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;user_id&#34;</span><span class="p">:</span><span class="s2">&#34;2019210781&#34;</span><span class="p">,</span><span class="s2">&#34;user_password&#34;</span><span class="p">:</span><span class="s2">&#34;123456&#34;</span><span class="p">}</span>
<span class="p">]</span>

<span class="s1">&#39;&#39;&#39;生成一个返回体&#39;&#39;&#39;</span>
<span class="k">def</span> <span class="nf">response_body</span><span class="p">(</span><span class="n">msg</span><span class="p">):</span>
    <span class="n">response_msg</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="s2">&#34;msg&#34;</span><span class="p">:</span><span class="n">msg</span><span class="p">}</span>
    <span class="p">]</span>
    <span class="k">return</span> <span class="n">jsonify</span><span class="p">(</span><span class="n">response_msg</span><span class="p">)</span>

<span class="nd">@app</span><span class="o">.</span><span class="n">route</span><span class="p">(</span><span class="s1">&#39;/login&#39;</span><span class="p">,</span><span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;POST&#39;</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">func</span><span class="p">():</span>
    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s2">&#34;POST&#34;</span><span class="p">:</span>
        <span class="n">user_id</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">form</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;user_id&#34;</span><span class="p">)</span>
        <span class="n">user_password</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">form</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;user_password&#34;</span><span class="p">)</span>

        <span class="k">for</span> <span class="n">user_dict</span> <span class="ow">in</span> <span class="n">users_list</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">user_dict</span><span class="p">[</span><span class="s2">&#34;user_id&#34;</span><span class="p">]</span> <span class="o">==</span> <span class="n">user_id</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">user_dict</span><span class="p">[</span><span class="s2">&#34;user_password&#34;</span><span class="p">]</span> <span class="o">==</span> <span class="n">user_password</span><span class="p">:</span>
                    <span class="k">return</span> <span class="n">response_body</span><span class="p">(</span><span class="s2">&#34;success&#34;</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span> 
                    <span class="k">return</span> <span class="n">response_body</span><span class="p">(</span><span class="s2">&#34;password error&#34;</span><span class="p">)</span>

        <span class="k">return</span> <span class="n">response_body</span><span class="p">(</span><span class="s2">&#34;id not exist&#34;</span><span class="p">)</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
    <span class="n">server</span> <span class="o">=</span> <span class="n">pywsgi</span><span class="o">.</span><span class="n">WSGIServer</span><span class="p">((</span><span class="s1">&#39;0.0.0.0&#39;</span><span class="p">,</span><span class="n">port</span><span class="p">),</span><span class="n">app</span><span class="p">)</span>
    <span class="n">server</span><span class="o">.</span><span class="n">serve_forever</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;end&#34;</span><span class="p">)</span>
</code></pre></div><h2 id="调试">调试</h2>
<p>使用Postman进行调试，新建一个请求，填入相关参数。</p>
<p></p>
<p></p>
<h2 id="部署">部署</h2>
<h3 id="为什么要部署">为什么要部署</h3>
<p>写好这个API之后，我尝试写了一个鸿蒙应用来调用，但是始终连接超时，原因如下：</p>
<p>鸿蒙模拟器应当是运行在华为的某台服务器上，它与我的电脑不在同一局域网内，我的电脑的局域网IP，它肯定是访问不到的。</p>
<p>而我用Postman调试，自己访问自己，处于局域网内，所以是没有问题的。</p>
<p>要是想在局域网外进行访问，还是要部署到有公网IP的服务器上。</p>
<h3 id="云服务器">云服务器</h3>
<p>我使用的是阿里云服务器</p>
<ul>
<li>
<p>防火墙设置</p>
<p>默认情况下，8899端口的进出流量是不能通过阿里云防火墙的，我们新建一条安全组规则。</p>
<p></p>
<p></p>
</li>
<li>
<p>运行代码</p>
<p>远程到服务器，执行以下命令：</p>
<p>安装git：<code>yum install git</code></p>
<p>下载代码：<code>git clone https://github.com/leeshy-tech/API_userLogin</code></p>
<p>进入目录：<code>cd API_userLogin</code></p>
<p>执行代码：<code>python user_login.py</code></p>
</li>
<li>
<p>调试</p>
<p>在Postman里，url里的IP改为服务器的公网IP，发送请求，调试成功。</p>
<p></p>
<p>服务器也有相应的输出：</p>
<p></p>
</li>
</ul>
<h2 id="结束语">结束语</h2>
<h3 id="项目源码">项目源码</h3>
<p><a href="https://github.com/leeshy-tech/API_userLogin" target="_blank" rel="noopener noreffer">https://github.com/leeshy-tech/API_userLogin</a></p>
<h3 id="参考文献">参考文献</h3>
<p><a href="https://www.runoob.com/tags/html-httpmethods.html" target="_blank" rel="noopener noreffer">HTTP 方法：GET 对比 POST_菜鸟教程</a></p>
<p><a href="https://www.runoob.com/json/json-tutorial.html" target="_blank" rel="noopener noreffer">JSON教程_菜鸟教程</a></p>
<p><a href="https://www.bilibili.com/video/BV1TJ411G7po?spm_id_from=333.999.0.0" target="_blank" rel="noopener noreffer">https://www.bilibili.com/video/BV1TJ411G7po?spm_id_from=333.999.0.0</a></p>
<p><a href="https://www.cnblogs.com/tuspring/p/14340457.html" target="_blank" rel="noopener noreffer">使用nodejs编写api接口并部署到服务器上</a></p>
]]></description>
</item>
<item>
    <title>鸿蒙开发实践——调用API</title>
    <link>https://leeshy-tech.github.io/harmonyos_api/</link>
    <pubDate>Sat, 12 Feb 2022 16:46:06 &#43;0800</pubDate><author>saili@bupt.edu.cn (Leeshy)</author><guid>https://leeshy-tech.github.io/harmonyos_api/</guid>
    <description><![CDATA[<h2 id="项目简介">项目简介</h2>
<h3 id="项目结构">项目结构</h3>
<pre tabindex="0"><code>└─ entry
	├─src.main
        ├─ java.com.example.api
            ├─beans
                ├─ requestBody				API请求体
                └─ returnBody				API返回体
            ├─slice
                └─ MainAbilitySlice			主页面Slice
            ├─utils
                ├─ baiduApi					百度API调用
                ├─ HttpRequestUtil			一般API调用，本项目没用到，但是很重要
                └─ LoadImageUtil			网络图片加载到image组件
            ├─ MainAbility
            └─ MyApplication
        └─ resources.base.layout
            └─ ability_main.xml				主页面布局文件
 	└─ build.gradle							添加外部依赖
</code></pre><h3 id="效果">效果</h3>
<p>单击按钮，将输入框内的文字转换为二维码显示在下方。</p>
<p>用手机扫码，解码的信息与文字相同。</p>
<p></p>
<h2 id="铺垫">铺垫</h2>
<h3 id="http">HTTP</h3>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>注意<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">本项目中调用API使用的是https方式，这部分仅作笔记。</div>
        </div>
    </div>
<p>在鸿蒙应⽤中默认只允许访问https接⼝，如果要访问http接⼝，需要在config.json的deviceConfig项中添加如下配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="s2">&#34;deviceConfig&#34;</span><span class="err">:</span> <span class="p">{</span>
  <span class="nt">&#34;default&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;network&#34;</span><span class="p">:</span> <span class="p">{</span>
      <span class="nt">&#34;cleartextTraffic&#34;</span><span class="p">:</span> <span class="kc">true</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><h3 id="json">JSON</h3>
<p>API请求体的传入和响应体的解析需要JSON格式的字符串、把JSON字符串转换为对象，虽然也可以用转义符等方式实现，但还是用外部依赖比较方便，常用的依赖有Gson、FastJson、Jackson，本项目使用的是FastJson。</p>
<p>借助转义符传递JSON be like：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="n">String</span> <span class="n">jsonBody</span> <span class="o">=</span> <span class="s">&#34;{\n  \&#34;data\&#34; : \&#34;https://apis.baidu.com/\&#34;,\n&#34;</span> <span class="o">+</span>
        <span class="s">&#34;  \&#34;size\&#34; : 20,\n&#34;</span> <span class="o">+</span>
        <span class="s">&#34;  \&#34;level\&#34; : \&#34;L\&#34;,\n&#34;</span> <span class="o">+</span>
        <span class="s">&#34;  \&#34;format\&#34; : \&#34;jpg\&#34;,\n&#34;</span> <span class="o">+</span>
        <span class="s">&#34;  \&#34;logo\&#34; : \&#34;https://apisown-test.bj.bcebos.com/qr-code-api-store.png\&#34;\n}&#34;</span><span class="o">;</span>
</code></pre></div><p>我的老天，它实在是太丑陋了。</p>
<h3 id="引入外部依赖">引入外部依赖</h3>
<p>添加依赖库fastjson，以及百度的依赖库api-explorer-sdk。</p>
<p>在entry &gt; build.gradle中添加：<code>implementation ('com.baidubce:api-explorer-sdk:1.0.3.1','com.alibaba:fastjson:1.2.47')</code></p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>技巧<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">添加外部依赖的方法，详见：<a href="https://leeshy-tech.github.io/harmonyos_outerdependency/" target="_blank" rel="noopener noreffer">鸿蒙开发笔记——引入外部依赖</a></div>
        </div>
    </div>
<h2 id="api调用">API调用</h2>
<p>API的功能是将字符串转化为二维码图片，这里选用的是<a href="https://apis.baidu.com/store/detail/581576df-bc52-4e4a-8a3a-2abd6035e7ae" target="_blank" rel="noopener noreffer">百度的API</a>，原因是：有例程。对于我这种啥都没学扎实的人来说，能降低点难度最好。</p>
<h3 id="api需要注意的点">API需要注意的点</h3>
<ol>
<li>调用方式：HTTP or HTTPS? POST？GET？DELETE？</li>
<li>请求体参数。</li>
<li>响应体参数：取决于你如何取到你想要的返回值。</li>
<li>认证密钥。</li>
</ol>
<p>从该API的介绍中我们看到：http和https均可，POST方式，有认证密钥，请求体和响应体参数示例如下：</p>
<p></p>
<h3 id="核心代码">核心代码</h3>
<ol>
<li>
<p>请求体和响应体各写成一个类：requestBody 、returnBody</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="c1">//API的请求体，共五个参数
</span><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">requestBody</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">data</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">size</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">level</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">format</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">logo</span><span class="o">;</span>

   <span class="o">...</span>
<span class="o">}</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"> <span class="c1">//API的响应体类，只有一个参数
</span><span class="c1"></span> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">returnBody</span> <span class="o">{</span>
     <span class="kd">private</span> <span class="n">String</span> <span class="n">imageUrl</span><span class="o">;</span>

     <span class="o">...</span>
 <span class="o">}</span>
</code></pre></div></li>
<li>
<p>调用API的过程封装成类的函数：baiduApi.sendRequest(requestBody request_body)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="c1">//百度API的请求代码，由示例代码更改而来：https://apis.baidu.com/store/detail/581576df-bc52-4e4a-8a3a-2abd6035e7ae
</span><span class="c1"></span><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">sendRequest</span><span class="o">(</span><span class="n">requestBody</span> <span class="n">request_body</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">//填入自己的accessKey，secretKey，否则项目无法正常运行。
</span><span class="c1"></span>    <span class="n">String</span> <span class="n">accessKey</span> <span class="o">=</span> <span class="s">&#34;accessKey&#34;</span><span class="o">;</span>
    <span class="n">String</span> <span class="n">secretKey</span> <span class="o">=</span> <span class="s">&#34;secretKey&#34;</span><span class="o">;</span>

    <span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="n">String</span> <span class="n">path</span> <span class="o">=</span> <span class="s">&#34;http://qrcode.api.bdymkt.com/qrcode/generate&#34;</span><span class="o">;</span>
    <span class="n">ApiExplorerRequest</span> <span class="n">request</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ApiExplorerRequest</span><span class="o">(</span><span class="n">HttpMethodName</span><span class="o">.</span><span class="na">POST</span><span class="o">,</span> <span class="n">path</span><span class="o">);</span>
    <span class="n">request</span><span class="o">.</span><span class="na">setCredentials</span><span class="o">(</span><span class="n">accessKey</span><span class="o">,</span> <span class="n">secretKey</span><span class="o">);</span>

    <span class="c1">// 设置header参数
</span><span class="c1"></span>    <span class="n">request</span><span class="o">.</span><span class="na">addHeaderParameter</span><span class="o">(</span><span class="s">&#34;Content-Type&#34;</span><span class="o">,</span> <span class="s">&#34;application/json;charset=UTF-8&#34;</span><span class="o">);</span>

    <span class="c1">// 设置jsonBody参数
</span><span class="c1"></span>    <span class="n">String</span> <span class="n">objStr</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">.</span><span class="na">toJSONString</span><span class="o">(</span><span class="n">request_body</span><span class="o">);</span>
    <span class="n">request</span><span class="o">.</span><span class="na">setJsonBody</span><span class="o">(</span><span class="n">objStr</span><span class="o">);</span>

    <span class="n">ApiExplorerClient</span> <span class="n">client</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ApiExplorerClient</span><span class="o">(</span><span class="k">new</span> <span class="n">AppSigner</span><span class="o">());</span>

    <span class="k">try</span> <span class="o">{</span>
        <span class="n">ApiExplorerResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">sendRequest</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
        <span class="c1">// 返回结果格式为Json字符串
</span><span class="c1"></span>        <span class="n">result</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">getResult</span><span class="o">();</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></li>
</ol>
<h2 id="按键监听">按键监听</h2>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>注意<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">本部分参考官方文档 &gt; Ability框架 &gt; 线程管理</div>
        </div>
    </div>
<p>这里的按键监听与之前稍有不同，原因是调用API是一个耗时的工作，它不能在主线程中运行，需要在按键监听器中使用新的线程。</p>
<h3 id="核心代码-1">核心代码</h3>
<p>MainAbilitySlice的onStart方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="c1">//设置按键监听
</span><span class="c1"></span><span class="n">btn1</span><span class="o">.</span><span class="na">setClickedListener</span><span class="o">(</span><span class="n">component</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="c1">//开一个新线程
</span><span class="c1"></span>    <span class="n">TaskDispatcher</span> <span class="n">globalTaskDispatcher</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getGlobalTaskDispatcher</span><span class="o">(</span><span class="n">TaskPriority</span><span class="o">.</span><span class="na">DEFAULT</span><span class="o">);</span>
    <span class="c1">//异步
</span><span class="c1"></span>    <span class="n">globalTaskDispatcher</span><span class="o">.</span><span class="na">asyncDispatch</span><span class="o">(()-&gt;{</span>
        <span class="c1">//调用API生成二维码图片（网络地址）
</span><span class="c1"></span>        <span class="c1">//返回字符串格式：{&#34;imageUrl&#34;:&#34;https://bj.bcebos.com/qr-code/22021215e07535dcaa53.jpg&#34;}
</span><span class="c1"></span>        <span class="n">String</span> <span class="n">string</span> <span class="o">=</span> <span class="n">tf1</span><span class="o">.</span><span class="na">getText</span><span class="o">();</span>
        <span class="n">requestBody</span> <span class="n">request_body</span> <span class="o">=</span> <span class="k">new</span> <span class="n">requestBody</span><span class="o">(</span><span class="n">string</span><span class="o">,</span><span class="n">20</span><span class="o">,</span><span class="s">&#34;L&#34;</span><span class="o">,</span><span class="s">&#34;jpg&#34;</span><span class="o">,</span>
                <span class="s">&#34;https://apisown-test.bj.bcebos.com/qr-code-api-store.png&#34;</span><span class="o">);</span>
        <span class="n">String</span> <span class="n">request_result</span> <span class="o">=</span> <span class="n">baiduApi</span><span class="o">.</span><span class="na">sendRequest</span><span class="o">(</span><span class="n">request_body</span><span class="o">);</span>
        <span class="c1">//将JSON字符串转换为类，取出imageUrl
</span><span class="c1"></span>        <span class="n">returnBody</span> <span class="n">returndata</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">.</span><span class="na">parseObject</span><span class="o">(</span><span class="n">request_result</span><span class="o">,</span> <span class="n">returnBody</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">String</span> <span class="n">image_url</span> <span class="o">=</span> <span class="n">returndata</span><span class="o">.</span><span class="na">getImageUrl</span><span class="o">();</span>
        <span class="c1">//将网络图片显示到image组件
</span><span class="c1"></span>        <span class="n">LoadImageUtil</span><span class="o">.</span><span class="na">loadImg</span><span class="o">(</span><span class="k">this</span><span class="o">,</span><span class="n">image_url</span><span class="o">,</span><span class="n">image1</span><span class="o">);</span>
    <span class="o">});</span>
<span class="o">});</span>
</code></pre></div><p>在新线程的异步方法里写入监听逻辑：调用API并将返回的网络图片url显示到image组件。</p>
<h2 id="网络图片显示">网络图片显示</h2>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>注意<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">本部分参考官方文档 &gt; 媒体 &gt; 图像 &gt; 位图操作开发指导 &amp; 图像解码开发指导。</div>
        </div>
    </div>
<p>当我们API调用成功之后，我们就需要显示这个图片，但是image组件的setImageElement()方法的输入参数类型只能是Element，而Element类型是鸿蒙的本地数据文件管理类型，也就是说通过这个方法只能让image组件显示本地的图片，我们获得的网络图片地址在这里是不能用的。</p>
<p></p>
<p>我们需要自己写接口来实现网络图片的显示：LoadImageUtil.loadImg(Context context, String netImgUrl, Image image)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="c1">//将网络图片加载到context的image组件里
</span><span class="c1"></span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">loadImg</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">String</span> <span class="n">netImgUrl</span><span class="o">,</span> <span class="n">Image</span> <span class="n">image</span><span class="o">){</span>
    <span class="c1">//创建一个新线程
</span><span class="c1"></span>    <span class="n">TaskDispatcher</span> <span class="n">globalTaskDispatcher</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getGlobalTaskDispatcher</span><span class="o">(</span><span class="n">TaskPriority</span><span class="o">.</span><span class="na">DEFAULT</span><span class="o">);</span>
    <span class="n">globalTaskDispatcher</span><span class="o">.</span><span class="na">asyncDispatch</span><span class="o">(()-&gt;{</span>
        <span class="n">HttpURLConnection</span> <span class="n">connection</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="k">try</span><span class="o">{</span>
            <span class="c1">//建立与网络图片之间的http连接
</span><span class="c1"></span>            <span class="n">URL</span> <span class="n">url</span> <span class="o">=</span> <span class="k">new</span> <span class="n">URL</span><span class="o">(</span><span class="n">netImgUrl</span><span class="o">);</span>
            <span class="n">connection</span> <span class="o">=</span> <span class="o">(</span><span class="n">HttpURLConnection</span><span class="o">)</span> <span class="n">url</span><span class="o">.</span><span class="na">openConnection</span><span class="o">();</span>
            <span class="n">connection</span><span class="o">.</span><span class="na">connect</span><span class="o">();</span>
            <span class="c1">//从连接中获取输入流
</span><span class="c1"></span>            <span class="n">InputStream</span> <span class="n">inputStream</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">();</span>
            <span class="c1">//根据数据流将图片数据缓存到ImageSouce对象，创建图片对象
</span><span class="c1"></span>            <span class="n">ImageSource</span> <span class="n">imageSource</span> <span class="o">=</span> <span class="n">ImageSource</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">inputStream</span><span class="o">,</span><span class="k">new</span> <span class="n">ImageSource</span><span class="o">.</span><span class="na">SourceOptions</span><span class="o">());</span>
            <span class="c1">//图片数据解码的参数
</span><span class="c1"></span>            <span class="n">ImageSource</span><span class="o">.</span><span class="na">DecodingOptions</span> <span class="n">decodingOptions</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ImageSource</span><span class="o">.</span><span class="na">DecodingOptions</span><span class="o">();</span>
            <span class="n">decodingOptions</span><span class="o">.</span><span class="na">desiredPixelFormat</span> <span class="o">=</span> <span class="n">PixelFormat</span><span class="o">.</span><span class="na">ARGB_8888</span><span class="o">;</span>
            <span class="c1">//PixelMap对象就表示一个图片
</span><span class="c1"></span>            <span class="n">PixelMap</span> <span class="n">pixelmap</span> <span class="o">=</span> <span class="n">imageSource</span><span class="o">.</span><span class="na">createPixelmap</span><span class="o">(</span><span class="n">decodingOptions</span><span class="o">);</span>
            <span class="c1">//将图片载入到组件中：在鸿蒙应用中将图片载入到组件，推荐在一个独立的UI线程中完成
</span><span class="c1"></span>            <span class="n">context</span><span class="o">.</span><span class="na">getUITaskDispatcher</span><span class="o">().</span><span class="na">asyncDispatch</span><span class="o">(()-&gt;{</span>
                <span class="n">image</span><span class="o">.</span><span class="na">setPixelMap</span><span class="o">(</span><span class="n">pixelmap</span><span class="o">);</span>
                <span class="n">pixelmap</span><span class="o">.</span><span class="na">release</span><span class="o">();</span><span class="c1">//释放图片
</span><span class="c1"></span>            <span class="o">});</span>
        <span class="o">}</span><span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">){</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">});</span>
<span class="o">}</span>
</code></pre></div><p>主要思路：</p>
<ul>
<li>建立网络连接获得图片数据</li>
<li>图片数据解码</li>
<li>转换成位图对象pixelmap</li>
<li>通过image.setPixelMap(pixelmap)方法载入图片</li>
</ul>
<h2 id="结束语">结束语</h2>
<h3 id="项目地址">项目地址</h3>
<p><a href="https://github.com/leeshy-tech/HarmonyOS_example/tree/main/Api" target="_blank" rel="noopener noreffer">https://github.com/leeshy-tech/HarmonyOS_example/tree/main/Api</a></p>
<h3 id="参考文献">参考文献</h3>
<p><a href="https://www.w3cschool.cn/fastjson/fastjson-demo1.html" target="_blank" rel="noopener noreffer">Fastjson 使用实例</a></p>
<p><a href="https://www.runoob.com/w3cnote/java-json-instro.html" target="_blank" rel="noopener noreffer">Java 中 JSON 的使用</a></p>
<p><a href="https://apis.baidu.com/store/detail/581576df-bc52-4e4a-8a3a-2abd6035e7ae" target="_blank" rel="noopener noreffer">百度智能云——二维码生成识别</a></p>
<p><a href="https://developer.harmonyos.com/cn/docs/documentation/doc-guides/document-outline-0000001064589184" target="_blank" rel="noopener noreffer">HarmonyOS文档</a></p>
<p><a href="https://www.bilibili.com/video/BV1DM4y1G7MN" target="_blank" rel="noopener noreffer">HarmonyOS 2.0应用开发实战教程丨锋迷商城项目</a></p>
]]></description>
</item>
<item>
    <title>鸿蒙开发笔记——引入外部依赖</title>
    <link>https://leeshy-tech.github.io/harmonyos_outerdependency/</link>
    <pubDate>Sat, 12 Feb 2022 14:21:06 &#43;0800</pubDate><author>saili@bupt.edu.cn (Leeshy)</author><guid>https://leeshy-tech.github.io/harmonyos_outerdependency/</guid>
    <description><![CDATA[<h2 id="gradle">Gradle</h2>
<p>简单的说，Gradle是一个构建工具，它是用来帮助我们构建app的，构建包括编译、打包等过程。我们可以为Gradle指定构建规则，然后它就会根据我们的“命令”自动为我们构建app。Studio中默认就使用Gradle来完成应用的构建。在创建工程时，Studio自动帮我们生成了一些通用构建规则，很多时候我们甚至完全不用修改这些规则就能完成我们app的构建。</p>
<p>有些时候，我们会有一些个性化的构建需求，比如我们引入了第三方库，或者我们想要在通用构建过程中做一些其他的事情，这时我们就要自己在系统默认构建规则上做一些修改。这时候我们就要自己向Gradle”下命令“了，这时候我们就需要用Gradle能听懂的话了，也就是Groovy。Groovy是一种基于JVM的动态语言，关于它的具体介绍，感兴趣的同学可以文末参考”延伸阅读“部分给出的链接。</p>
<h2 id="依赖坐标">依赖坐标</h2>
<h3 id="什么是依赖坐标">什么是依赖坐标</h3>
<p>依赖坐标的概念来源于Maven，俗称 gav：指的是使用下面三个向量子仓库中唯一定位一个 Maven 工程。</p>
<ol>
<li>
<p>groupid:公司或组织域名倒序</p>
<p><!-- raw HTML omitted -->com.ys.maven<!-- raw HTML omitted --></p>
</li>
<li>
<p>artifactid:模块名，也是实际项目的名称</p>
<p><!-- raw HTML omitted -->Maven_05<!-- raw HTML omitted --></p>
</li>
<li>
<p>version:当前项目的版本</p>
<p><!-- raw HTML omitted -->0.0.1-SNAPSHOT<!-- raw HTML omitted --></p>
</li>
</ol>
<h3 id="如何获取依赖坐标">如何获取依赖坐标</h3>
<ol>
<li>
<p><a href="https://mvnrepository.com/" target="_blank" rel="noopener noreffer">https://mvnrepository.com/</a> 在mvnrepository官网查询</p>
<p></p>
<p>单击版本号，可以看到它的坐标信息：</p>
<p></p>
</li>
<li>
<p>各种提示：</p>
<p>比如我现在要调用百度公司的API，示例代码提示我要引用百度的依赖：</p>
<p></p>
<p>那么就获取了坐标信息。</p>
</li>
</ol>
<h2 id="在鸿蒙应用中引用依赖">在鸿蒙应用中引用依赖</h2>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>注意<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">虽然我们在坐标依赖部分一直在说Maven，但是在DevEco Studio中使用的还是gradle，这点要分清楚。</div>
        </div>
    </div>
<ol>
<li>
<p>打开entry &gt; build.gradle：</p>
<p></p>
</li>
<li>
<p>在dependencies一栏添加如下语句：<code>implementation ('依赖坐标1','依赖坐标2','依赖坐标3')</code></p>
<p>依赖坐标 = <code>groupid:artifactid:version</code></p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="n">dependencies</span> <span class="o">{</span>
 <span class="n">implementation</span> <span class="nf">fileTree</span><span class="o">(</span><span class="nl">dir:</span> <span class="s1">&#39;libs&#39;</span><span class="o">,</span> <span class="nl">include:</span> <span class="o">[</span><span class="s1">&#39;*.jar&#39;</span><span class="o">,</span> <span class="s1">&#39;*.har&#39;</span><span class="o">])</span>
 <span class="n">testImplementation</span> <span class="s1">&#39;junit:junit:4.13.1&#39;</span>
 <span class="n">ohosTestImplementation</span> <span class="s1">&#39;com.huawei.ohos.testkit:runner:2.0.0.200&#39;</span>
 <span class="n">implementation</span> <span class="o">(</span><span class="s1">&#39;com.google.code.gson:gson:2.8.8&#39;</span><span class="o">,</span><span class="s1">&#39;com.baidubce:api-explorer-sdk:1.0.3.1&#39;</span><span class="o">)</span>
<span class="o">}</span>
</code></pre></div></li>
<li>
<p>打开gradle页面，刷新。</p>
<p></p>
<p></p>
</li>
<li>
<p>左侧工程目录能看到加入的依赖</p>
<p></p>
</li>
<li>
<p>由此，在工程中能够正常使用外部依赖。</p>
<p></p>
</li>
</ol>
<h2 id="结束语">结束语</h2>
<h3 id="参考文献">参考文献</h3>
<p><a href="https://www.cnblogs.com/Bonker/p/5619458.html" target="_blank" rel="noopener noreffer">十分钟理解Gradle</a></p>
<p><a href="https://mvnrepository.com/" target="_blank" rel="noopener noreffer">https://mvnrepository.com/</a></p>
<p><a href="https://www.cnblogs.com/ysocean/p/7451054.html" target="_blank" rel="noopener noreffer">Maven详解（五）&mdash;&mdash; 坐标的概念以及依赖管理</a></p>
<p><a href="https://www.bilibili.com/video/BV1DM4y1G7MN" target="_blank" rel="noopener noreffer">HarmonyOS 2.0应用开发实战教程丨锋迷商城项目</a></p>
]]></description>
</item>
<item>
    <title>模拟开关——CD4066、CD4051</title>
    <link>https://leeshy-tech.github.io/analogue_switch/</link>
    <pubDate>Wed, 09 Feb 2022 22:15:06 &#43;0800</pubDate><author>saili@bupt.edu.cn (Leeshy)</author><guid>https://leeshy-tech.github.io/analogue_switch/</guid>
    <description><![CDATA[<h1 id="模拟开关">模拟开关</h1>
<p>模拟开关，英文名Analog switches；主要是完成信号链路中的信号切换功能。采用MOS管的开关方式实现了对信号链路关断或者打开；由于其功能类似于开关，而用模拟器件的特性实现，成为模拟开关。</p>
<h2 id="什么时候用继电器">什么时候用继电器</h2>
<p>继电器利用了电生磁原理，通电时电磁铁吸附开关使开关断开，常常应用于电子设计中作为电控开关。模拟开关是集成电路芯片，体积小、寿命高，而且能够实现较为复杂的功能，比如单刀双掷、单刀四掷、四开关集成等等。所以常见场景下还是模拟开关最为适合。</p>
<p>但是，集成电路芯片就决定了它有限制使用条件，信号电压、电流、频率均有一些限制，在大功率、高频场景下，可能模拟开关无法胜任，就需要使用继电器。</p>
<h2 id="四双向模拟开关cd4066">四双向模拟开关CD4066</h2>
<p>CD4066 的引脚功能如图所示。每个封装内部有 4 个独立的模拟开关，每个模拟开关 有输入、输出、控制三个端子，其中输入端和输出端可互换。当控制端加高电平时，开关导通；当控制端加低电平时开关截止。模拟开关导通时，导通电阻为几十欧姆；模拟开关截止时，呈现很高的阻抗，可以看成为开路。模拟开关可传输数字信号和模拟信号，可传输的模拟信号的上限频率为 40MHz。各开关间的串扰很小，典型值为－50dB。</p>
<p></p>
<p>当模拟开关的电源电压采用双电源时，例如 =﹢5V， =﹣5V(均对地0V而言)，则输入电压对称于0V的正、负信号电压(﹢5V～﹣5V)均能传输。这时要求控制信号C=“1”为+5V，C=“0”为-5V，否则只能传输正极性的信号电压。</p>
<h2 id="单八路模拟开关cd4051">单八路模拟开关CD4051</h2>
<p>CD4051 的引脚功能如图所示。CD4051 相当于一个单刀八掷开关，开关接通哪一通道，由输入的 3 位地址码 ABC 来决定。</p>
<p></p>
<p>真值表：</p>
<p></p>
<h2 id="同系列器件">同系列器件</h2>
<h3 id="双四路模拟开关cd4052">双四路模拟开关CD4052</h3>
<p></p>
<h3 id="三组二路模拟开关-cd4053">三组二路模拟开关 CD4053</h3>
<p></p>
<h3 id="十六路模拟开关-cd4067单刀十六掷">十六路模拟开关 CD4067——单刀十六掷</h3>
<h2 id="结束语">结束语</h2>
<h3 id="参考文献">参考文献</h3>
<p><a href="https://www.chip37.com/scp/CD4066" target="_blank" rel="noopener noreffer">https://www.chip37.com/scp/CD4066</a></p>
<p><a href="http://www.elecfans.com/dianzichangshi/20171209598886_a.html" target="_blank" rel="noopener noreffer">http://www.elecfans.com/dianzichangshi/20171209598886_a.html</a></p>
<h3 id="datasheet">datasheet</h3>
<p><a href="https://github.com/leeshy-tech/Electronic-Design/tree/main/analog_switches" target="_blank" rel="noopener noreffer">https://github.com/leeshy-tech/Electronic-Design/tree/main/analog_switches</a></p>
]]></description>
</item>
<item>
    <title>鸿蒙开发笔记——Ability</title>
    <link>https://leeshy-tech.github.io/harmonyos_ability/</link>
    <pubDate>Tue, 08 Feb 2022 21:26:06 &#43;0800</pubDate><author>saili@bupt.edu.cn (Leeshy)</author><guid>https://leeshy-tech.github.io/harmonyos_ability/</guid>
    <description><![CDATA[<h1 id="ability">Ability</h1>
<div class="details admonition quote open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-quote-right fa-fw"></i>HarmonyOS文档<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Ability是应用所具备能力的抽象，也是应用程序的重要组成部分。一个应用可以具备多种能力，HarmonyOS支持应用以Ability为单位进行部署。Ability可以分为FA（Feature Ability）和PA（Particle Ability）两种类型，每种类型为开发者提供了不同的模板，以便实现不同的业务功能。</div>
        </div>
    </div>
<p>总的来说，Ability是功能相似的内容的集合，这种划分便于应用的编程组织，FA提供与用户交互的能力，只包含PageAbility，PA没有可视化界面，包括ServiceAbility和DataAbility。</p>
<h2 id="配置">配置</h2>
<p>一个应用中所有的Ability必须在config.json中注册。</p>
<p>如果通过新建Ability来创建Ability，Studio会自动注册，不需要手动更改config.json。</p>
<p>但如果通过新建Java类来创建，则需要在config.json添加相关的配置信息。</p>
<p></p>
<p>同样，当删除Ability时，需要删除config.json中对应的配置信息，否则会出现一些问题。</p>
<h2 id="生命周期">生命周期</h2>
<p>PageAbility和ServiceAbility具有复杂的生命周期，创建、隐藏到后台、从后台呼出等等都会执行相关的生命周期函数，其中onStart方法最常用，当Ability创建时调用onStart方法，所以UI的绑定、按钮事件响应器等等都需要在onStart方法中实现。</p>
<p></p>
<h2 id="intent">Intent</h2>
<div class="details admonition quote open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-quote-right fa-fw"></i>HarmonyOS文档<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Intent是对象之间传递信息的载体。例如，当一个Ability需要启动另一个Ability时，或者一个AbilitySlice需要导航到另一个AbilitySlice时，可以通过Intent指定启动的目标同时携带相关数据。</div>
        </div>
    </div>
<p>Intent是页面跳转及传参的关键，他包括Operation与Parameters两个属性，不传参时只需要构造默认intent，例如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="n">btn1</span><span class="o">.</span><span class="na">setClickedListener</span><span class="o">(</span><span class="n">component</span> <span class="o">-&gt;</span> <span class="o">{</span>
 	<span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">();</span>
 	<span class="k">this</span><span class="o">.</span><span class="na">present</span><span class="o">(</span><span class="k">new</span> <span class="n">SecondAbilitySlice</span><span class="o">(),</span><span class="n">intent</span><span class="o">);</span>
 <span class="o">});</span>
</code></pre></div><p>参数通过Parameters来传递：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="n">btn1</span><span class="o">.</span><span class="na">setClickedListener</span><span class="o">(</span><span class="n">component</span> <span class="o">-&gt;</span> <span class="o">{</span>
     <span class="n">Intent</span> <span class="n">intent1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">();</span>
     <span class="n">intent1</span><span class="o">.</span><span class="na">setParam</span><span class="o">(</span><span class="s">&#34;productId&#34;</span><span class="o">,</span><span class="s">&#34;101&#34;</span><span class="o">);</span>
     <span class="k">this</span><span class="o">.</span><span class="na">present</span><span class="o">(</span><span class="k">new</span> <span class="n">SecondAbilitySlice</span><span class="o">(),</span><span class="n">intent1</span><span class="o">);</span>
 <span class="o">});</span>
</code></pre></div><p>通过设置Operation可以启动任意<strong>设备</strong>的任意<strong>应用</strong>的任意<strong>Ability</strong>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">();</span>
<span class="c1">// 通过Intent中的OperationBuilder类构造operation对象，指定设备标识（空串表示当前设备）、应用包名、Ability名称
</span><span class="c1"></span><span class="n">Operation</span> <span class="n">operation</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">.</span><span class="na">OperationBuilder</span><span class="o">()</span>
        <span class="o">.</span><span class="na">withDeviceId</span><span class="o">(</span><span class="s">&#34;&#34;</span><span class="o">)</span>
        <span class="o">.</span><span class="na">withBundleName</span><span class="o">(</span><span class="s">&#34;com.demoapp&#34;</span><span class="o">)</span>
        <span class="o">.</span><span class="na">withAbilityName</span><span class="o">(</span><span class="s">&#34;com.demoapp.FooAbility&#34;</span><span class="o">)</span>
        <span class="o">.</span><span class="na">build</span><span class="o">();</span>
<span class="c1">// 把operation设置到intent中
</span><span class="c1"></span><span class="n">intent</span><span class="o">.</span><span class="na">setOperation</span><span class="o">(</span><span class="n">operation</span><span class="o">);</span>
<span class="n">startAbility</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
</code></pre></div><h2 id="pageability">PageAbility</h2>
<p>一个PageAbility可以包含任意个AbilitySlice，默认展示的AbilitySlice是通过**setMainRoute()**方法来指定的。</p>
<h3 id="abilityslice">AbilitySlice</h3>
<p>AbilitySlice相当于一个页面，其显示的内容是通过组件来声明的，其组件加载⽀持两种⽅式：</p>
<ul>
<li>Java代码</li>
<li>xml布局文件</li>
</ul>
<p>在其onStart方法中通过 setUIContext 来加载视图组件，它有两个重载：</p>
<ul>
<li>setUIContext(int) : 通过布局⽂件的ID，加载resources/base/layout⽬录下的布局⽂件完成⻚⾯的渲染。</li>
<li>setUIContext(ComponentContainer) :通过加载⼀个使⽤Java代码创建的组件完成⻚⾯的渲染 。</li>
</ul>
<h2 id="serviceability">ServiceAbility</h2>
<div class="details admonition quote open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-quote-right fa-fw"></i>HarmonyOS文档<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">基于Service模板的Ability（以下简称“Service”）主要用于后台运行任务（如执行音乐播放、文件下载等），但不提供用户交互界面。Service可由其他应用或Ability启动，即使用户切换到其他应用，Service仍将在后台继续运行。</div>
        </div>
    </div>
<h3 id="前台service">前台Service</h3>
<p>一般情况下，Service都是在后台运行的，后台Service的优先级都是比较低的，当资源不足时，系统有可能回收正在运行的后台Service。</p>
<p>在一些场景下（如播放音乐），用户希望应用能够一直保持运行，此时就需要使用前台Service。前台Service会始终保持正在运行的图标在系统状态栏显示。</p>
<h2 id="dataability">DataAbility</h2>
<div class="details admonition quote open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-quote-right fa-fw"></i>HarmonyOS文档<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>使用Data模板的Ability（以下简称“Data”）有助于应用管理其自身和其他应用存储数据的访问，并提供与其他应用共享数据的方法。Data既可用于同设备不同应用的数据共享，也支持跨设备不同应用的数据共享。</p>
<p>数据的存放形式多样，可以是数据库，也可以是磁盘上的文件。Data对外提供对数据的增、删、改、查，以及打开文件等接口，这些接口的具体实现由开发者提供</p>
</div>
        </div>
    </div>
<h3 id="uri">URI</h3>
<p>URI用来标识一个具体的数据，例如数据库中的某个表或磁盘上的某个文件。格式如下：</p>
<p></p>
<ul>
<li>scheme：协议方案名，固定为“dataability”，代表Data Ability所使用的协议类型。</li>
<li>authority：设备ID。如果为跨设备场景，则为目标设备的ID；如果为本地设备场景，则不需要填写。</li>
<li>path：资源的路径信息，代表特定资源的位置信息。</li>
<li>query：查询参数。</li>
<li>fragment：可以用于指示要访问的子资源。</li>
</ul>
<p>URI示例：</p>
<ul>
<li>跨设备场景：dataability://<em>device_id</em>/<em>com.domainname.dataability.persondata</em>/<em>person</em>/<em>10</em></li>
<li>本地设备：dataability:///<em>com.domainname.dataability.persondata</em>/<em>person</em>/<em>10</em></li>
</ul>
<h3 id="数据操作">数据操作</h3>
<p>DataAbility可以对文件或数据库进行数据操纵，不同类型数据管理方式写法都不一样，详见文档的<strong>数据管理</strong>一栏：</p>
<p></p>
<h2 id="实践工程">实践工程</h2>
<p><a href="https://leeshy-tech.github.io/harmonyos_pagetopage/" target="_blank" rel="noopener noreffer">页面导航</a></p>
<p><a href="https://leeshy-tech.github.io/harmonyos_serviceability/" target="_blank" rel="noopener noreffer">ServiceAbility</a></p>
<p><a href="https://leeshy-tech.github.io/harmonyos_addressbook/" target="_blank" rel="noopener noreffer">电话簿</a></p>
<h2 id="结束语">结束语</h2>
<p>本文仅是对官方文档做一个简单的总结+个人理解，详细的内容还需参考官方文档。</p>
<h3 id="参考文献">参考文献</h3>
<p><a href="https://developer.harmonyos.com/cn/docs/documentation/doc-guides/document-outline-0000001064589184" target="_blank" rel="noopener noreffer">HarmonyOS——文档</a></p>
]]></description>
</item>
</channel>
</rss>
